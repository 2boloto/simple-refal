//FROM LibraryEx
$EXTERN ArgList, Map, Fetch;

//FROM Library
$EXTERN WriteLine, StrFromInt, Exit, System;

//FROM ParseCmdLine
$EXTERN ParseCommandLine;

//FROM FileScanner
$EXTERN CreateFileList;

//FROM Config
$EXTERN
  Config-GetFolders,
  Config-GetSourceFile,
  Config-GetSrefCompiler,
  Config-GetCppCompilerExe,
  Config-GetCppCompilerLib,
  Config-GetPrefix,
  Config-GetReferences,
  Config-GetTargetFileName;

$ENTRY Go { = <Main <ArgList>>; }

Main {
  (e.Program)
    = <WriteLine 'Usage:'>
      <WriteLine '  srmake flags... MainFileName[.sref]'>
      <WriteLine>
      <WriteLine 'flags:'>
      <WriteLine '   [-s path\\to\\srefc.exe]'>
      <WriteLine '   -c c++compiler'>
      <WriteLine '   {-d search-dir}'>
      <WriteLine '   [-o target]'>
      <WriteLine '   -X flags-for-srefc'>;

  (e.Program) e.Arguments
    = <MakeProject
        <ParseCommandLine e.Arguments>
      >;
}

MakeProject {
  #Success t.Config
    = <Map
        {
          (s.FolderTag e.Folder) = (e.Folder);
        }
        <Config-GetFolders t.Config>
      >
    : e.Folders
    = <Config-GetSourceFile t.Config> : e.SourceFile
    = <CreateFileList t.Config e.SourceFile> : t.Config^ e.Units
    = <RunSrefCompiler t.Config e.Units>;

  #Fails e.Errors
    = <Map
        {
          (s.Pos e.Message) =
            <WriteLine
              'Command line argument ' <StrFromInt s.Pos> ': ' e.Message
            >;
        }
        e.Errors
      >
      <Exit 1>;
}

PrintSrcPos {
  #CMD-LINE = 'command line';
  (s.LineNum e.FileName) = e.FileName ':' <StrFromInt s.LineNum>;
}

RunSrefCompiler {
  t.Config e.Units-B (#Error t.SrcPos e.Message) e.Units-E
    = <Map
        {
          (#Error t.SrcPos^ e.Message^) =
            <WriteLine <PrintSrcPos t.SrcPos> ': ' e.Message>;

          (#Output e.Output) = ;
          (#OutputWithNative (e.Output) e.Native) = ;
          (#Source (e.Source) e.Output) = ;
        }
        (#Error t.SrcPos e.Message) e.Units-E
      >
      <Exit 1>;

  t.Config e.Units
    = <Config-GetSrefCompiler t.Config> : e.SrefCompiler
    = <Config-GetCppCompilerExe t.Config> : e.CppCompilerExe
    = <Config-GetCppCompilerLib t.Config> : e.CppCompilerLib
    = <MakeTargetFileFlag t.Config> : e.TargetFileFlag
    = <MakeSearchFolderFlags t.Config> : e.SearchFolderFlags
    = <GetPrefix t.Config> : e.Prefix
    = <Config-GetReferences t.Config> : e.References
    = <System
        e.SrefCompiler
        ' --cpp-command-exe="' e.CppCompilerExe '"'
        ' --cpp-command-lib="' e.CppCompilerLib '"'
        e.TargetFileFlag
        e.SearchFolderFlags
        ' --prefix="' e.Prefix '"'
        <Map
          {
            (e.Reference) = ' --reference="' e.Reference '"';
          }
          e.References
        >
        <Map
          {
            (#Output e.Output) = ' "' e.Output '"';
            (#OutputWithNative (e.Output) e.Native) = ' "' e.Output '"';
            (#Source (e.Source) e.Output) = ' "' e.Source '"';
          }
          e.Units
        >
      >;
}

MakeTargetFileFlag {
  t.Config
    = <Fetch
        <Config-GetTargetFileName t.Config>
        {
          #DefaultTarget = /* пусто */;
          e.TargetFile = ' --target-file="' e.TargetFile '"';
        }
      >;
}

MakeSearchFolderFlags {
  t.Config
    = <Map
        {
          (#Search e.Folder) = ' --directory="' e.Folder '"';
          (#Runtime e.Folder) = ' --runtime-directory="' e.Folder '"';
        }
        <Config-GetFolders t.Config>
      >;
}

GetPrefix {
  t.Config
    = <Fetch
        <Config-GetPrefix t.Config>
        {
          #NotSet = /* пусто */;
          e.Prefix = e.Prefix;
        }
      >;
}
