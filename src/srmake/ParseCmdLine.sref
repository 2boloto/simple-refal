//FROM LibraryEx
$EXTERN Fetch, Seq, MapReduce, Map;

//FROM GetOpt
$EXTERN GetOpt;

//FROM Config
$EXTERN
  Config-Create,
  Config-SetCppCompiler,
  Config-AddFolder,
  Config-SetSrefCompiler,
  Config-AddSrefCompilerFlag,
  Config-SetTargetFileName,
  Config-SetSourceFile;

/**
  <ParseCommandLine e.Arguments>
    == #Success t.Config
    == #Fails (s.ArgNum e.Message)*

  e.Folders ::= (s.FolderType e.Path)*
  s.FolderType ::= #Search | #Runtime
  t.Target ::= (e.TargetFile) | #DefaultTarget
*/
$ENTRY ParseCommandLine {
  e.Arguments =
    <Fetch
      <GetOpt
        (
          (#CppCompiler #Required 'c' ('cpp-command'))
          (#RuntimeFolder #Required 'D' ('runtime-dir') ('runtime-directory'))
          (#SearchFolder #Required 'd' ('dir') ('directory'))
          (#SrefCompiler #Required 's' ('sref-command'))
          (#SrefCompilerOption #Required 'X' ('thru') ('through'))
          (#TargetFileName #Required 'o' ('target-file'))
        )
        e.Arguments
      >
      <Seq
        (CheckRequiredOptions (#CppCompiler #FILE))
        {
          (e.Errors) e.Options
            = (<Config-Create> e.Errors) e.Options;
        }
        (MapReduce
          {
            (t.Config e.Errors) (#CppCompiler s.Num e.CppCompiler)
              = <Update
                  t.Config (e.Errors) Config-SetCppCompiler s.Num e.CppCompiler
                >;

            (t.Config e.Errors) (#RuntimeFolder s.Num e.Folder)
              = <Update
                  t.Config (e.Errors) Config-AddFolder s.Num #Runtime e.Folder
                >;

            (t.Config e.Errors) (#SearchFolder s.Num e.Folder)
              = <Update
                  t.Config (e.Errors) Config-AddFolder s.Num #Search e.Folder
                >;

            (t.Config e.Errors) (#SrefCompiler s.Num e.SrefCompiler)
              = <Update
                  t.Config (e.Errors)
                  Config-SetSrefCompiler s.Num e.SrefCompiler
                >;

            (t.Config e.Errors) (#SrefCompilerOption s.Num e.Flag)
              = <Update
                  t.Config (e.Errors) Config-AddSrefCompilerFlag s.Num e.Flag
                >;

            (t.Config e.Errors) (#TargetFileName s.Num e.TargetFile)
              = <Update
                  t.Config (e.Errors)
                  Config-SetTargetFileName s.Num e.TargetFile
                >;

            (t.Config e.Errors) (#FILE s.Num e.SourceFile)
              = <Update
                  t.Config (e.Errors) Config-SetSourceFile s.Num e.SourceFile
                >;

            (t.Config e.Errors) t.Option
              = (t.Config e.Errors) t.Option;
          }
        )
        {
          (t.Config /* нет ошибок */) =
            #Success t.Config;

          (t.Config e.Errors) =
            #Fails
            <Map
              {
                (s.Pos #NoRequiredParam e.Param) =
                  (s.Pos 'option ' e.Param ' expects parameter');

                (s.Pos #UnknownShortOption s.Option) =
                  (s.Pos 'unknown option -' s.Option);

                (s.Pos #UnknownLongOption e.Option) =
                  (s.Pos 'unknown option --' e.Option);

                // У нас все опции с параметрами, не должно возникать
                // (s.Pos #UnexpectedLongOptionParam (e.Option) e.Param) =

                (s.Pos #ManySourceFiles) =
                  (s.Pos 'many source files in command line');

                (s.Pos #No #CppCompiler) =
                  (s.Pos 'option -c or --cpp-command not found');

                (s.Pos #No #FILE) =
                  (s.Pos 'expected source filename in command line');
              }
              e.Errors
            >;
        }
      >
    >;
}

CheckRequiredOptions {
  (s.Flag e.Required) (e.Errors) e.Options-B (s.Flag s.Num e.Value) e.Options-E
    = <CheckRequiredOptions
        (e.Required) (e.Errors) e.Options-B (s.Flag s.Num e.Value) e.Options-E
      >;

  (s.Flag e.Required) (e.Errors) e.Options
    = <CheckRequiredOptions
        (e.Required) (e.Errors (1 #No s.Flag)) e.Options
      >;

  (/* пусто */) (e.Errors) e.Options
    = (e.Errors) e.Options;
}

Update {
  t.Config (e.Errors) s.Updater s.LineNum e.Option
    = <Fetch
        <s.Updater t.Config e.Option>
        {
          #Success t.Config^ = (t.Config e.Errors);

          #Fails e.ErrorMessage
            = (t.Config e.Errors (s.LineNum e.ErrorMessage));
        }
      >;
}
