//FROM LibraryEx
$EXTERN Map, Fetch;

//FROM Library
$EXTERN ExistFile;

/**
  <FindFiles (e.Folders) e.Files>
    == t.FoundFile*

  t.FoundFile ::=
    (#Source (e.Source) e.Output)
    (#Output e.Output)
    (#OutputWithNative (e.Output) e.Native)
    (#NotFound e.FileName)
*/
$ENTRY FindFiles {
  (e.Folders) e.Files =
    <Map
      {
        (e.FileName) =
          <AnalyzeFile-CheckNotFound
            (e.FileName)
            <AnalyzeFile e.FileName>
            <Map
              {
                (e.Folder) = <AnalyzeFile e.Folder '/' e.FileName>;
              }
              e.Folders
            >
          >;
      }
      e.Files
    >;
}

AnalyzeFile-CheckNotFound {
  (e.FileName) (#Source (e.Source) e.Output) e.Variants =
    (#Source (e.Source) e.Output);

  (e.FileName) (#Output e.Output) e.Variants =
    (#Output e.Output);

  (e.FileName) (#OutputWithNative (e.Output) e.Native) e.Variants =
    (#OutputWithNative (e.Output) e.Native);

  (e.FileName) (#NotFound e.NotFoundPath) e.Variants =
    <AnalyzeFile-CheckNotFound (e.FileName) e.Variants>;

  (e.FileName) = (#NotFound e.FileName);
}

ExistFile-T {
  e.FileName = <ExistFile e.FileName> e.FileName;
}

AnalyzeFile {
  e.FileName '.sref' =
    <Fetch
      <ExistFile-T e.FileName '.sref'>
      {
        #True e.UnitName '.sref' =
          (#Source (e.UnitName '.sref') e.UnitName '.rasl');

        #False e.SourceName = (#NotFound e.SourceName);
      }
    >;

  e.FileName '.rasl' =
    <Fetch
      <ExistFile-T e.FileName '.rasl'>
      {
        #True e.OutName =
          <Fetch
            <ExistFile-T e.FileName '.cpp'>
            {
              #True e.NativeName =
                (#OutputWithNative (e.OutName) e.NativeName);

              #False e.NativeName =
                (#Output e.OutName);
            }
          >;

        #False e.OutName = (#NotFound e.OutName);
      }
    >;

  e.FileName =
    <Fetch
      (<ExistFile-T e.FileName '.sref'>)
      (<ExistFile-T e.FileName '.rasl'>)
      (<ExistFile-T e.FileName '.cpp'>)
      {
        (#True e.SourceName) (s.ResOut e.OutName) (s.ResNat e.Native) =
          (#Source (e.SourceName) e.OutName);

        (#False e.SourceName) (#True e.OutName) (#True e.Native) =
          (#OutputWithNative (e.OutName) e.Native);

        (#False e.SourceName) (#True e.OutName) (#False e.Native) =
          (#Output e.OutName);

        (#False e.UnitName '.sref')
        (#False e.UnitName '.rasl')
        (#False e.UnitName '.cpp') =
          (#NotFound e.UnitName);
      }
    >;
}

/**
  <FindInclude (e.Folders) e.FileName>
    == #Success e.FullPath
    == #Fails
*/
$ENTRY FindInclude {
  (e.Folders) e.FileName
    = <Fetch
        <AnalyzeInclude e.FileName>
        <Map
          {
            (e.Folder) = <AnalyzeInclude e.Folder '/' e.FileName>;
          }
          e.Folders
        >
        {
          e.Variants-B (#Success e.FullPath) e.Variants-E = #Success e.FullPath;

          e.Variants = #Fails;
        }
      >;
}

AnalyzeInclude {
  e.FileName '.srefi'
    = <Fetch
        <ExistFile-T e.FileName '.srefi'>
        {
          #True e.FullPath = (#Success e.FullPath);
          #False e.FullPath = (#Fails);
        }
      >;

  e.FileName
    = <Fetch
        <ExistFile-T e.FileName '.srefi'>
        {
          #True e.FullPath = (#Success e.FullPath);
          #False e.FullPath = (#Fails);
        }
      >;
}
