//FROM LibraryEx
$EXTERN Fetch, Seq, MapReduce, Inc, Map;

//FROM DisplayName
$EXTERN DisplayName, DisplayCName, CName;

//FROM Library
$EXTERN StrFromInt, Add;

//FROM Escape
$EXTERN EscapeChar, EscapeString;


FuncArguments {
  = '(refalrts::Iter arg_begin, refalrts::Iter arg_end)';
}

FuncReference {
  e.Name =
    ('refalrts::RefalFunction& ' <CName e.Name> ' = descr_' <BaseCName e.Name> ';');
}

FuncAlias {
  e.Name #Hash s.Cookie1 s.Cookie2 =
    (
      '#define ' <CName e.Name> '_alias '
      <CName e.Name #Hash s.Cookie1 s.Cookie2>
    );
}

GenCommonHeaders {
  = ('// Automatically generated file. Don\'t edit!')
  ('#include "refalrts.h"')
  () ();
}

GenCommonTailer {
  = () ('//End of file');
}

$ENTRY GenProgram-RASL {
  e.RASL =
    <Fetch
      e.RASL
      <Seq
        (MapReduce GenCommand-RASL (/* отступ */))
        {
          () /* отступ должен остаться тем же */
          e.Generated =
            <GenCommonHeaders>
            e.Generated
            <GenCommonTailer>;
        }
      >
    >;
}

$ENTRY GenProgram-Native {
  (e.SourceFileName) (e.TargetFileName) e.RASL =
    <Fetch
      e.RASL
      <Seq
        (MapReduce GenCommand-Native (/* отступ */))
        {
          () /* отступ должен остаться тем же */
          e.Generated =
            <GenCommonHeaders>
            e.Generated
            <GenCommonTailer>;
        }
        {
          e.Lines-B (#NativeInsertBegin s.SrcLineNum) e.Lines-E =
            <SetLineNumbers
              (e.SourceFileName) (e.TargetFileName) 1
              e.Lines-B (#NativeInsertBegin s.SrcLineNum) e.Lines-E
            >;

          e.Lines = e.Lines;
        }
      >
    >;
}

SetLineNumbers {
  (e.Source) (e.Target) s.LineNum (#NativeInsertBegin s.SrcLineNum) e.Lines =
    ('#line ' <StrFromInt s.SrcLineNum> ' ' '"' <EscapeString e.Source> '"')
    <SetLineNumbers
      (e.Source) (e.Target) <Inc s.LineNum> e.Lines
    >;

  (e.Source) (e.Target) s.LineNum (#NativeInsertEnd) e.Lines =
    ('#line ' <StrFromInt <Inc s.LineNum>> ' ' '"' <EscapeString e.Target> '"')
    <SetLineNumbers
      (e.Source) (e.Target) <Inc s.LineNum> e.Lines
    >;

  (e.Source) (e.Target) s.LineNum (e.OtherLine) e.Lines =
    (e.OtherLine)
    <SetLineNumbers
      (e.Source) (e.Target) <Inc s.LineNum> e.Lines
    >;

  (e.Source) (e.Target) s.LineNum /* кончились строки */ =
    /* пусто */;
}

ContextRange-B {
  s.RangeOffset = 'context[' <StrFromInt s.RangeOffset> ']';
}

ContextRange-E {
  s.RangeOffset = 'context[' <StrFromInt <Inc s.RangeOffset>> ']';
}

ContextRange {
  s.RangeOffset =
    <ContextRange-B s.RangeOffset> ', ' <ContextRange-E s.RangeOffset>;
}

ContextItem {
  s.ItemNumber = 'context[' <StrFromInt s.ItemNumber> ']';
}

PrintBracketsVarInit {
  e.Indent s.InnerBrackets =
    (e.Indent <ContextRange-B s.InnerBrackets> ' = 0;')
    (e.Indent <ContextRange-E s.InnerBrackets> ' = 0;')
    ;
}

PrintDirection {
  #AlgLeft = 'Left';
  #AlgRight = 'Right';
  #AlgTerm = 'Term';
}

CNameAlias {
  #CreateClosure = <CName #CreateClosure>;
  e.RegularName = <CName e.RegularName> '_alias';
}

BaseCName {
  e.Name #Hash s.Cookie1 s.Cookie2 = <CName e.Name>;
  e.Name = <CName e.Name>;
}

GenCommand-Common {
  // ---------------------------------------------------------------------------
  // Создания глобальных объектов, общие команды

  (e.Indent) (#CmdComment e.Text) = (e.Indent) (e.Indent '//' e.Text);

  (e.Indent) (#CmdExtern e.Name) =
    (e.Indent)
    ('extern refalrts::RefalFunction& ' <CName e.Name> ';')
    <FuncAlias e.Name>
    ();

  (e.Indent) (#CmdDefineIdent e.Name) =
    (e.Indent)
    ('// identifier #' <DisplayName e.Name>)
    ('template <typename SREFAL_PARAM_INT>')
    ('struct ident_' <CName e.Name> ' {')
    ('  static const char *name() {')
    ('    return "' <DisplayCName e.Name> '";')
    ('  }')
    ('};')
    ();

  (e.Indent) (#CmdSeparator) =
    (e.Indent)
    ();
}

GenCommand-Native {
  // ---------------------------------------------------------------------------
  // Создания глобальных объектов, общие команды

  (e.Indent) (#CmdDeclaration e.Name) =
    (e.Indent)
    ('extern refalrts::RefalFunction& ' <CName e.Name> ';')
    <FuncAlias e.Name>
    ('#define ' <BaseCName e.Name> '_str "' <DisplayCName e.Name> '"')
    ();

  (e.Indent) (#CmdNativeFuncDescr e.Name) =
    (e.Indent)
    (
      'static refalrts::RefalNativeFunction descr_' <BaseCName e.Name> '('
      'func_' <BaseCName e.Name> ', "' <DisplayCName e.Name> '"'
      ');'
    )
    <FuncReference e.Name>
    ();

  (e.Indent) (#CmdFnStart e.Name) =
    (e.Indent '  ')
    ('static refalrts::FnResult func_' <BaseCName e.Name> <FuncArguments> ' {');

  (e.Indent '  ') (#CmdFnEnd) =
    (e.Indent)
    ('}') ();

  (e.Indent) (#CmdEmitNativeCode s.LineNumber e.Code) =
    (e.Indent)
    (#NativeInsertBegin s.LineNumber)
    e.Code
    (#NativeInsertEnd);

  // ---------------------------------------------------------------------------
  // Команды режима прямой кодогенерации

  (e.Indent) (#CmdProfileFunction) =
    (e.Indent)
    (e.Indent 'refalrts::this_is_generated_function();');

  (e.Indent) (#CmdIssueMem s.Number) =
    (e.Indent)
    (e.Indent
      '// issue here memory for vars with ' <StrFromInt s.Number> ' elems'
    )
    (e.Indent 'refalrts::Iter context[' <StrFromInt s.Number> '];')
    (e.Indent 'refalrts::zeros( context, ' <StrFromInt s.Number> ' );')
    ;

  (e.Indent) (#CmdStartSentence) =
    (e.Indent '  ')
    (e.Indent 'do {');

  (e.Indent '  ') (#CmdEndSentence) =
    (e.Indent)
    (e.Indent '} while ( 0 );')
    (e.Indent 'refalrts::stop_sentence();')
    ();

  (e.Indent) (#CmdInitB0) =
    (e.Indent)
    (e.Indent <ContextRange-B 0> ' = arg_begin;')
    (e.Indent <ContextRange-E 0> ' = arg_end;')
    (e.Indent 'refalrts::move_left( ' <ContextRange 0> ' );')
    (e.Indent 'refalrts::move_left( ' <ContextRange 0> ' );')
    (e.Indent 'refalrts::move_right( ' <ContextRange 0> ' );')
    ;

  (e.Indent) (#CmdInitB0-Lite) =
    (e.Indent)
    (e.Indent <ContextRange-B 0> ' = arg_begin;')
    (e.Indent <ContextRange-E 0> ' = arg_end;')
    ;

  // ---------------------------------------------------------------------------
  // Команды сопоставления с образцом (прямая кодогенерация)

  (e.Indent) (#CmdChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    <PrintMatchChar (e.Indent) s.Direction s.BracketNumber s.Char>
    ;

  (e.Indent) (#CmdCharSave s.Direction s.BracketNumber s.Offset s.Char) =
    (e.Indent)
    <PrintMatchCharSave (e.Indent) s.Offset s.Direction s.BracketNumber s.Char>
    ;

  (e.Indent) (#CmdNumber s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    <PrintMatchNumber (e.Indent) s.Direction s.BracketNumber s.Number>
    ;

  (e.Indent) (#CmdNumberSave s.Direction s.BracketNumber s.Offset s.Number) =
    (e.Indent)
    <PrintMatchNumberSave (e.Indent) s.Offset s.Direction s.BracketNumber s.Number>
    ;

  (e.Indent) (#CmdName s.Direction s.BracketNumber e.Name) =
    (e.Indent)
    <PrintMatchName (e.Indent) s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (#CmdNameSave  s.Direction s.BracketNumber s.Offset e.Name) =
    (e.Indent)
    <PrintMatchNameSave (e.Indent) s.Offset s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (#CmdIdent s.Direction s.BracketNumber e.Name) =
    (e.Indent)
    <PrintMatchIdent (e.Indent) s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (#CmdIdentSave s.Direction s.BracketNumber s.Offset e.Name) =
    (e.Indent)
    <PrintMatchIdentSave (e.Indent) s.Offset s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (#CmdBrackets s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchBrackets (e.Indent) s.Direction s.BracketNumber s.InnerBrackets>
    ;

  (e.Indent) (#CmdBracketsSave s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchBracketsSave (e.Indent) s.Direction s.BracketNumber s.InnerBrackets>
    ;

  (e.Indent) (#CmdADT s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchADT
      (e.Indent) s.Direction s.BracketNumber s.InnerBrackets e.Name
    >
    ;

  (e.Indent) (#CmdADTSave s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchADTSave
      (e.Indent) s.Direction s.BracketNumber s.InnerBrackets e.Name
    >
    ;

  (e.Indent) (#CmdCallSave s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    (e.Indent
      <ContextItem <Add 2 s.InnerBrackets> > ' = '
      'refalrts::call_' <StrFromDirection s.Direction>
      '( '
      <ContextRange s.InnerBrackets> ', '
      <ContextRange s.BracketNumber> ' );'
    );

  (e.Indent) (#CmdEmpty s.Direction s.BracketNumber) =
    (e.Indent)
    <PrintMatchEmpty (e.Indent) s.BracketNumber>
    ;

  (e.Indent) (#CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    <PrintMatchSTVar (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber>;

 (e.Indent) (#CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    <PrintMatchSTVarSave
      (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber
    >;

  (e.Indent) (#CmdRepeated s.Direction s.BracketNumber s.Mode s.Var s.Sample) =
    (e.Indent)
    <PrintMatchRepeated
      (e.Indent) s.Direction s.BracketNumber s.Mode s.Var s.Sample
    >;

  (e.Indent)
  (#CmdRepeatedSave s.Direction s.BracketNumber s.Mode s.Var s.Sample) =
    (e.Indent)
    <PrintMatchRepeatedSave
      (e.Indent) s.Direction s.BracketNumber s.Mode s.Var s.Sample
    >;

  (e.Indent)
  (#CmdOpenedE-Start #AlgLeft s.BracketNumber s.VarNumber) =
    (e.Indent '  ')
    (e.Indent <ContextRange-B s.VarNumber> ' = 0;')
    (e.Indent <ContextRange-E s.VarNumber> ' = 0;')
    (e.Indent 'refalrts::start_e_loop();')
    (e.Indent 'do {')
    ;

  (e.Indent '  ')
  (#CmdOpenedE-End #AlgLeft s.BracketNumber s.VarNumber) =
    (e.Indent)
    (e.Indent
      '} while ( refalrts::open_evar_advance( '
      <ContextRange s.VarNumber> ', ' <ContextRange s.BracketNumber>
      ' ) );'
    )
    ;

  (e.Indent) (#CmdSave s.OldBracketNumber s.NewBracketNumber) =
    (e.Indent)
    (e.Indent
      <ContextRange-B s.NewBracketNumber>
      ' = ' <ContextRange-B s.OldBracketNumber> ';'
    )
    (e.Indent
      <ContextRange-E s.NewBracketNumber>
      ' = ' <ContextRange-E s.OldBracketNumber> ';'
    );

  // ---------------------------------------------------------------------------
  // Команды построения результата (прямая кодогенерация)

  (e.Indent) (#CmdEmptyResult) =
    (e.Indent)
    ()
    (e.Indent 'refalrts::reset_allocator();')
    (e.Indent 'refalrts::Iter res = arg_begin;');

  (e.Indent) (#CmdResetAllocator) =
    (e.Indent)
    ()
    (e.Indent 'refalrts::reset_allocator();');

  (e.Indent) (#CmdSetRes s.Offset) =
    (e.Indent)
    (e.Indent 'refalrts::Iter trash_prev = arg_begin->prev;')
    (e.Indent 'refalrts::use(trash_prev);')
    <Fetch
      s.Offset
      {
        #RIGHT-EDGE = (e.Indent 'refalrts::Iter res = arg_end->next;');
        s.Offset^ = (e.Indent 'refalrts::Iter res = ' <ContextItem s.Offset> ';');
      }
    >;

  (e.Indent) (#CmdCopyVar 'e' s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      'if (! refalrts::copy_evar(' <ContextRange s.Target> ', '
      <ContextRange s.Sample> '))'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (#CmdCopyVar s.Mode s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      'if (! refalrts::copy_stvar(' <ContextItem s.Target> ', '
      <ContextItem s.Sample> '))'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (#CmdReinitSVar s.Offset s.Sample) =
    (e.Indent)
    (e.Indent
      'refalrts::reinit_svar( '
      <ContextItem s.Offset> ', ' <ContextItem s.Sample>
      ' );'
    );

  (e.Indent) (#CmdCreateElem #Allocate s.ElemNumber #ElString e.String) =
    (e.Indent)
    (e.Indent
      'if( ! refalrts::alloc_chars( '
      <ContextItem s.ElemNumber> ', ' <ContextItem <Inc s.ElemNumber>> ', '
      <PrintString e.String> ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (#CmdCreateElem s.CreateMode s.ElemNumber e.ElemInfo) =
    (e.Indent)
    <PrintCreateElem (e.Indent) s.CreateMode s.ElemNumber e.ElemInfo>;

  (e.Indent) (#CmdLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      'refalrts::link_brackets( '
      <ContextItem s.Left> ', ' <ContextItem s.Right>
      ' );'
    );

  (e.Indent) (#CmdPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent 'refalrts::push_stack( ' <ContextItem s.ElemNumber> ' );');

  (e.Indent) (#CmdInsertElem s.ElemNumber) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_elem( res, ' <ContextItem s.ElemNumber> ' );'
    );

  (e.Indent) (#CmdInsertVar 'e' s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, ' <ContextRange s.Number> ' );'
    );

  (e.Indent) (#CmdInsertVar s.Mode s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_stvar( res, ' <ContextItem s.Number> ' );'
    );

  (e.Indent) (#CmdInsertRange s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, '
      <ContextItem s.Number> ', ' <ContextItem <Inc s.Number>>
      ' );'
    );

  (e.Indent) (#CmdInsertTile s.BeginOffset s.EndOffset) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, '
      <ContextItem s.BeginOffset> ', ' <ContextItem s.EndOffset>
      ' );'
    );

  (e.Indent) (#CmdUseRes) =
    (e.Indent)
    (e.Indent 'refalrts::use( res );');

  (e.Indent) (#CmdSpliceToFreeList) =
    (e.Indent)
    (e.Indent 'refalrts::splice_to_freelist( arg_begin, arg_end );');

  (e.Indent) (#CmdNextStep) =
    (e.Indent)
    (e.Indent 'return refalrts::cSuccess;');

  (e.Indent) (#CmdTrash s.Offset) =
    (e.Indent)
    <Fetch
      s.Offset
      {
        #LEFT-EDGE =
          (e.Indent
            'refalrts::splice_to_freelist_open( trash_prev, res );'
          );

        s.Offset^ =
          (e.Indent
            'refalrts::splice_to_freelist_open( '
            <ContextItem s.Offset> ', res );'
          );
      }
    >;

  (e.Indent) (#CmdFail) =
    (e.Indent)
    (e.Indent 'return refalrts::cRecognitionImpossible;');

  (e.Indent) (s.CommonCommand e.Args) =
    <GenCommand-Common (e.Indent) (s.CommonCommand e.Args)>;
}

GenCommand-RASL {
  // ---------------------------------------------------------------------------
  // Создания глобальных объектов, общие команды

  (e.Indent) (#CmdEnumDescr e.Name) =
    (e.Indent)
    (
      'static refalrts::RefalEmptyFunction descr_' <BaseCName e.Name> '('
      '"' <DisplayCName e.Name> '"'
      ');'
    )
    <FuncReference e.Name>
    <FuncAlias e.Name>
    ();

  (e.Indent) (#CmdInterpretFuncDescr e.Name) =
    (e.Indent)
    ('static refalrts::RASLFunction descr_' <BaseCName e.Name> '(')
    ('  "' <DisplayCName e.Name> '",')
    ('  scope_' <BaseCName e.Name> '::raa,')
    ('  scope_' <BaseCName e.Name> '::functions,')
    ('  scope_' <BaseCName e.Name> '::idents,')
    ('  scope_' <BaseCName e.Name> '::numbers,')
    ('  scope_' <BaseCName e.Name> '::strings')
    (');')
    <FuncReference e.Name>
    ();

  (e.Indent) (#CmdSwapDescr e.Name) =
    (e.Indent)
    (
      'static refalrts::RefalSwap descr_' <BaseCName e.Name> '('
      '"' <DisplayCName e.Name> '"'
      ');'
    )
    <FuncReference e.Name>
    <FuncAlias e.Name>
    ();

  (e.Indent) (#CmdNamespaceStart /* пусто */) =
    (e.Indent '  ')
    (e.Indent 'namespace /* unnamed */ {');

  (e.Indent) (#CmdNamespaceStart e.Name) =
    (e.Indent '  ')
    (e.Indent 'namespace scope_' <BaseCName e.Name> ' {');

  (e.Indent '  ') (#CmdNamespaceEnd /* пусто */) =
    (e.Indent)
    (e.Indent '} // unnamed namespace')
    ();

  (e.Indent '  ') (#CmdNamespaceEnd e.Name) =
    (e.Indent)
    (e.Indent '} // namespace scope_' <BaseCName e.Name>)
    ();

  // ---------------------------------------------------------------------------
  // Команды режима интерпретации

  (e.Indent) (#CmdiFuncArray) =
    (e.Indent)
    (e.Indent 'using refalrts::functions;');

  (e.Indent) (#CmdiFuncArray e.FuncNames (e.LastName)) =
    (e.Indent)
    (e.Indent 'static refalrts::RefalFunction *functions[] = {')
    <Map
      {
        (e.Name) = (e.Indent '  & ' <CNameAlias e.Name> ',');
      }
      e.FuncNames
    >
    (e.Indent '  & ' <CNameAlias e.LastName>)
    (e.Indent '};');

  (e.Indent) (#CmdiLabelArray) =
    (e.Indent)
    (e.Indent 'using refalrts::idents;');

  (e.Indent) (#CmdiLabelArray e.LabelNames (e.LastName)) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalIdentifier idents[] = {')
    <Map
      {
        (e.Name) = (e.Indent '  & ident_' <CName e.Name> '<int>::name,');
      }
      e.LabelNames
    >
    (e.Indent '  & ident_' <CName e.LastName> '<int>::name')
    (e.Indent '};');

  (e.Indent) (#CmdiNumberArray) =
    (e.Indent)
    (e.Indent 'using refalrts::numbers;');

  (e.Indent) (#CmdiNumberArray e.Numbers s.LastNumber) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalNumber numbers[] = {')
    <Map
      {
        s.Number = (e.Indent '  ' <StrFromInt s.Number> 'UL,');
      }
      e.Numbers
    >
    (e.Indent '  ' <StrFromInt s.LastNumber> 'UL')
    (e.Indent '};');

  (e.Indent) (#CmdiStringArray) =
    (e.Indent)
    (e.Indent 'using refalrts::strings;');

  (e.Indent) (#CmdiStringArray e.Strings (e.LastString)) =
    (e.Indent)
    (e.Indent 'static const refalrts::StringItem strings[] = {')
    <Map
      {
        (e.String) = (e.Indent '  {' <PrintString e.String> '},');
      }
      e.Strings
    >
    (e.Indent '  {' <PrintString e.LastString> '}')
    (e.Indent '};');

  (e.Indent) (#CmdInitRAA) =
    (e.Indent '  ')
    (e.Indent 'static const refalrts::RASLCommand raa[] = {');

  (e.Indent '  ') (#CmdFinRAA) =
    (e.Indent)
    (e.Indent '  {refalrts::icEnd, 0, 0, 0}')
    (e.Indent '};');

  (e.Indent) (#CmdiProfileFunction) =
    (e.Indent)
    (e.Indent '{refalrts::icThisIsGeneratedFunction, 0, 0, 0},');

  (e.Indent) (#CmdiLoadConstants) =
    (e.Indent)
    (e.Indent '{refalrts::icLoadConstants, 0, 0, 0},');

  (e.Indent) (#CmdiIssueMem s.Memory) =
    (e.Indent)
    (e.Indent '{refalrts::icIssueMemory, ' <StrFromInt s.Memory> ', 0, 0},');

  (e.Indent) (#CmdiReserveStack 0) =
    (e.Indent)
    /* ничего не генерируем */;

  (e.Indent) (#CmdiReserveStack s.Depth) =
    (e.Indent)
    (e.Indent
      '{refalrts::icReserveBacktrackStack, '
      <StrFromInt s.Depth> ', 0, 0},'
    );

  (e.Indent) (#CmdiOnFailGoTo s.Offset) =
    (e.Indent)
    (e.Indent '{refalrts::icOnFailGoTo, +' <StrFromInt s.Offset> ', 0, 0},');

  (e.Indent) (#CmdiProfilerStopSentence) =
    (e.Indent)
    (e.Indent '{refalrts::icProfilerStopSentence, 0, 0, 0},');

  (e.Indent) (#CmdiInitB0) =
    (e.Indent)
    (e.Indent '{refalrts::icInitB0, 0, 0, 0},');

  (e.Indent) (#CmdiInitB0-Lite) =
    (e.Indent)
    (e.Indent '{refalrts::icInitB0_Lite, 0, 0, 0},');

  // ---------------------------------------------------------------------------
  // Команды сопоставления с образцом (режим интерпретации)

  (e.Indent) (#CmdiChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    (e.Indent '{refalrts::icChar' <PrintDirection s.Direction> ', '
              '0, static_cast<unsigned char>(' '' <EscapeChar s.Char> '' '), '
              <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiCharSave s.Direction s.BracketNumber s.SaveOffset s.Char) =
    (e.Indent)
    (e.Indent
      '{refalrts::icChar' <PrintDirection s.Direction> 'Save, '
      <StrFromInt s.SaveOffset> ', '
      'static_cast<unsigned char>(' '' <EscapeChar s.Char> '' '), '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiNum s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    (e.Indent '{refalrts::icNum' <PrintDirection s.Direction> ', '
              '0, ' <StrFromInt s.Number> ', '
              <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    (e.Indent)
    (e.Indent
      '{refalrts::icNum' <PrintDirection s.Direction> 'Save, '
      <StrFromInt s.SaveOffset> ', '
      <StrFromInt s.Number> ', '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiHugeNum s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    (e.Indent '{refalrts::icHugeNum' <PrintDirection s.Direction> ', '
              '0, ' <StrFromInt s.Number> ', '
              <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent)
  (#CmdiHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    (e.Indent)
    (e.Indent
      '{refalrts::icHugeNum' <PrintDirection s.Direction> 'Save, '
      <StrFromInt s.SaveOffset> ', '
      <StrFromInt s.Number> ', '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiName s.Direction s.BracketNumber s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icFunc' <PrintDirection s.Direction> ', 0, '
              <StrFromInt s.NameId> ', '
              <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiNameSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    (e.Indent)
    (e.Indent
      '{refalrts::icFunc' <PrintDirection s.Direction> 'Save, '
      <StrFromInt s.SaveOffset> ', '
      <StrFromInt s.NameId> ', '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiIdent s.Direction s.BracketNumber s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icIdent' <PrintDirection s.Direction> ', '
              '0, '
              <StrFromInt s.NameId> ', '
              <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent)
  (#CmdiIdentSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    (e.Indent)
    (e.Indent
      '{refalrts::icIdent' <PrintDirection s.Direction> 'Save, '
      <StrFromInt s.SaveOffset> ', '
      <StrFromInt s.NameId> ', '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiBracket s.Direction s.Num s.NumRanges) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket' <PrintDirection s.Direction> ', '
              '0, ' <StrFromInt s.NumRanges> ', ' <StrFromInt s.Num> '},'
    );

  (e.Indent) (#CmdiBracketsSave s.Direction s.Num s.NumRanges) =
    (e.Indent)
    (e.Indent
      '{refalrts::icBracket' <PrintDirection s.Direction> 'Save, '
      '0, ' <StrFromInt s.NumRanges> ', ' <StrFromInt s.Num> '},'
    );

  (e.Indent) (#CmdiADT s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icADT' <PrintDirection s.Direction> ', '
              <StrFromInt s.NameId> ', '
              <StrFromInt s.InnerBrackets> ', '
              <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent)
  (#CmdiADTSave s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    (e.Indent)
    (e.Indent
      '{refalrts::icADT' <PrintDirection s.Direction> 'Save, '
      <StrFromInt s.NameId> ', '
      <StrFromInt s.InnerBrackets> ', '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiCallSave s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    (e.Indent
      '{refalrts::icCallSave' <PrintDirection s.Direction> ', '
      '0, ' <StrFromInt s.InnerBrackets> ', ' <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiEmpty s.Num) =
    (e.Indent)
    (e.Indent '{refalrts::icEmpty, 0, 0, ' <StrFromInt s.Num> '},');

  (e.Indent) (#CmdiVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::ic' s.Mode 'Var' <PrintDirection s.Direction> ', '
      '0, ' <StrFromInt s.VarNumber> ', ' <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::ic' s.Mode 'Var' <PrintDirection s.Direction> 'Save, '
      '0, ' <StrFromInt s.VarNumber> ', ' <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent)
  (#CmdiRepeat s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::ic' s.Mode 'Repeat' <PrintDirection s.Direction> ', '
      <StrFromInt s.VarNumber> ', '
      <StrFromInt s.SampleNumber> ', '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent)
  (#CmdiRepeatedSave
    s.Direction s.BracketNumber 't' s.VarNumber s.SampleNumber
  ) =
    (e.Indent)
    (e.Indent
      '{refalrts::ictRepeat' <PrintDirection s.Direction> 'Save, '
      <StrFromInt s.VarNumber> ', '
      <StrFromInt s.SampleNumber> ', '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiEPrepare s.BracketNumber s.VarNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::icEPrepare, 0, '
      <StrFromInt s.VarNumber> ', ' <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiEStart s.BracketNumber s.VarNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::icEStart, 0, '
      <StrFromInt s.VarNumber> ', ' <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiSave s.OldBracketNumber s.NewBracketNumber) =
    (e.Indent)
    (e.Indent '{refalrts::icSave, 0, '
              <StrFromInt s.NewBracketNumber> ', '
              <StrFromInt s.OldBracketNumber> '},'
    );

  // ---------------------------------------------------------------------------
  // Команды построения результата (режим интерпретации)

  (e.Indent) (#CmdiEmptyResult) =
    (e.Indent)
    (e.Indent '{refalrts::icEmptyResult, 0, 0, 0},');

  (e.Indent) (#CmdiSetRes s.Offset) =
    (e.Indent)
    <Fetch
      s.Offset
      {
        #RIGHT-EDGE =
          (e.Indent '{refalrts::icSetResRightEdge, 0, 0, 0},');

        s.Offset^ =
          (e.Indent '{refalrts::icSetRes, 0, 0, ' <StrFromInt s.Offset> '},');
      }
    >;

  (e.Indent) (#CmdiCopyVar 'e' s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      '{refalrts::icCopyEVar, '
      <StrFromInt s.Target> ', ' <StrFromInt s.Sample> ', 0},'
    );

  (e.Indent) (#CmdiCopyVar s.Mode s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      '{refalrts::icCopySTVar, '
      <StrFromInt s.Target> ', ' <StrFromInt s.Sample> ', 0},'
    );

  (e.Indent) (#CmdiReinitSVar s.Offset s.Sample) =
    (e.Indent)
    (e.Indent
      '{refalrts::icReinitSVar, 0, '
      <StrFromInt s.Sample> ', ' <StrFromInt s.Offset> '},'
    );

  (e.Indent) (#CmdiCreateElem s.CreateMode s.ElemNumber s.Type e.Info) =
    (e.Indent)
    <PrintInterpretCreateElem
      (e.Indent) s.CreateMode s.ElemNumber s.Type e.Info
    >;

  (e.Indent) (#CmdiLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      '{refalrts::icLinkBrackets, '
      <StrFromInt s.Left> ', ' <StrFromInt s.Right> ', 0},'
    );

  (e.Indent) (#CmdiPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent '{refalrts::icPushStack, 0, 0, ' <StrFromInt s.ElemNumber> '},');

  (e.Indent) (#CmdiInsertElem s.ElemNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::icSpliceElem, 0, 0, ' <StrFromInt s.ElemNumber> '},'
    );

  (e.Indent) (#CmdiInsertVar 'e' s.Offset) =
    (e.Indent)
    (e.Indent '{refalrts::icSpliceEVar, 0, 0, ' <StrFromInt s.Offset> '},');

  (e.Indent) (#CmdiInsertVar s.Mode s.Offset) =
    (e.Indent)
    (e.Indent '{refalrts::icSpliceSTVar, 0, 0, ' <StrFromInt s.Offset> '},');

  (e.Indent) (#CmdiInsertRange s.ElemNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::icSpliceRange, 0, 0, ' <StrFromInt s.ElemNumber> '},'
    );

  (e.Indent) (#CmdiInsertTile s.BeginOffset s.EndOffset) =
    (e.Indent)
    (e.Indent
      '{refalrts::icSpliceTile, '
      <StrFromInt s.BeginOffset> ', ' <StrFromInt s.EndOffset> ', 0},'
    );

  (e.Indent) (#CmdiSpliceToFreeList) =
    (e.Indent)
    (e.Indent '{refalrts::icSpliceToFreeList, 0, 0, 0},');

  (e.Indent) (#CmdiNextStep) =
    (e.Indent)
    (e.Indent '{refalrts::icNextStep, 0, 0, 0},');

  (e.Indent) (#CmdiTrash s.Offset) =
    (e.Indent)
    <Fetch
      s.Offset
      {
        #LEFT-EDGE =
          (e.Indent '{refalrts::icTrashLeftEdge, 0, 0, 0},');

        s.Offset^ =
          (e.Indent '{refalrts::icTrash, 0, 0, ' <StrFromInt s.Offset> '},');
      }
    >;

  (e.Indent) (#CmdiFail) =
    (e.Indent)
    (e.Indent '{refalrts::icFail, 0, 0, 0},');

  (e.Indent) (s.CommonCommand e.Args) =
    <GenCommand-Common (e.Indent) (s.CommonCommand e.Args)>;
}

PrintLength {
  e.String = <DoPrintLength 0 e.String>;
}

DoPrintLength {
  s.Length s.Char e.Tail = <DoPrintLength <Inc s.Length> e.Tail>;

  s.Length = <StrFromInt s.Length>;
}

PrintString {
  e.String = '"' <EscapeString e.String> '", ' <PrintLength e.String>;
}

PrintMatchChar {
  (e.Indent) s.Direction s.BracketNumber s.Char =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('char') '' <EscapeChar s.Char> ''
    >;
}

PrintMatchCharSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber s.Char =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('char') '' <EscapeChar s.Char> ''
    >;
}

PrintMatchNumber {
  (e.Indent) s.Direction s.BracketNumber s.Number =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('number') <StrFromInt s.Number> 'UL'
    >;
}

PrintMatchNumberSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber s.Number =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('number') <StrFromInt s.Number> 'UL'
    >;
}

PrintMatchName {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('function') '& ' <CNameAlias e.Name>
    >;
}

PrintMatchNameSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber e.Name =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('function') '& ' <CNameAlias e.Name>
    >;
}

PrintMatchIdent {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('ident') ' & ident_' <CName e.Name> '<int>::name'
    >;
}

PrintMatchIdentSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber e.Name =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('ident') ' & ident_' <CName e.Name> '<int>::name'
    >;
}

PrintMatchBrackets {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('brackets')
      <ContextRange s.InnerNum>
    >;
}

PrintMatchBracketsSave {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum =
    <PrintMatchSave
      (e.Indent) <Add 2 s.InnerNum> s.Direction s.BracketNumber
      ('brackets')
      <ContextRange s.InnerNum>
    >
    (
      e.Indent
      'refalrts::bracket_pointers('
      <ContextItem <Add s.InnerNum 2> > ', '
      <ContextItem <Add s.InnerNum 3> >
      ');'
    );
}

PrintMatchADT {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('adt')
      <ContextRange s.InnerNum> ', & ' <CNameAlias e.Name>
    >;
}

PrintMatchADTSave {
  (e.Indent) #AlgTerm s.Offset s.InnerNum e.Name =
    (e.Indent
      <ContextItem <Add s.InnerNum 2>> ' = '
      'refalrts::adt_term('
      <ContextRange s.InnerNum> ', '
      '& ' <CNameAlias e.Name> ', '
      <ContextItem s.Offset> ');'
    )
    (e.Indent 'if( ! ' <ContextItem <Add s.InnerNum 2>> ' )')
    (e.Indent '  ' <BreakerFromIndent e.Indent>);

  (e.Indent) s.Direction s.BracketNumber s.InnerNum e.Name =
    <PrintMatchSave
      (e.Indent) <Add 2 s.InnerNum> s.Direction s.BracketNumber
      ('adt')
      <ContextRange s.InnerNum> ', '
      '& ' <CNameAlias e.Name>
    >
    (
      e.Indent
      'refalrts::adt_pointers('
      <ContextItem <Add s.InnerNum 2> > ', '
      <ContextItem <Add s.InnerNum 3> > ', '
      <ContextItem <Add s.InnerNum 4> >
      ');'
    );
}

BreakerFromIndent {
  '  ' = 'return refalrts::cRecognitionImpossible;';

  e.OtherIndent = 'continue;';
}

PrintMatchEmpty {
  (e.Indent) s.BracketNumber =
    (e.Indent
      'if( ! refalrts::empty_seq( ' <ContextRange s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

StrFromDirection {
  #AlgLeft = 'left'; #AlgRight = 'right';
}

VarMatchFunction { 's' = 'svar'; 't' = 'tvar'; }

PrintMatchSTVar {
  (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      (<VarMatchFunction s.Mode>) <ContextItem s.VarNumber>
    >;
}

PrintMatchSTVarSave {
  (e.Indent) s.Direction s.BracketNumber 't' s.VarNumber =
    <PrintMatchSave
      (e.Indent) <Inc s.VarNumber> s.Direction s.BracketNumber
      (<VarMatchFunction 't'>) <ContextItem s.VarNumber>
    >;
}

PrintMatchRepeated {
  (e.Indent) s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNumber =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_evar')
      <ContextRange s.VarNumber> ', ' <ContextRange s.SampleNumber>
    >;

  (e.Indent) #AlgTerm s.BracketNumber s.Mode s.VarNumber s.SampleNumber =
    (e.Indent
      'if( ! refalrts::repeated_stvar_term( ' <ContextItem s.VarNumber>
      ', ' <ContextItem s.SampleNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);

  (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_stvar')
      <ContextItem s.VarNumber> ', ' <ContextItem s.SampleNumber>
    >;
}

PrintMatchRepeatedSave {
  (e.Indent) s.Direction s.BracketNumber 't' s.VarNumber s.SampleNumber =
    <PrintMatchSave
      (e.Indent) <Inc s.VarNumber> s.Direction s.BracketNumber
      ('repeated_stvar')
      <ContextItem s.VarNumber> ', ' <ContextItem s.SampleNumber>
    >;

  (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber =
    <PrintMatchRepeated
      (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber
    >;
}

PrintMatch {
  (e.Indent) #AlgTerm s.Offset (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_term( ' e.TextRep ', '
      <ContextItem s.Offset> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);

  (e.Indent) s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <ContextRange s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintMatchSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      <ContextItem s.Offset> ' = '
      'refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <ContextRange s.BracketNumber> ' );'
    )
    (e.Indent 'if( ! ' <ContextItem s.Offset> ' )')
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintCreateElem {
  (e.Indent) #Allocate s.ElemNumber s.ElementType e.Info =
    (e.Indent
      'if( ! refalrts::alloc_' <AllocatorFuncName s.ElementType> '( '
      <ContextItem s.ElemNumber> <AllocatorFuncArgument s.ElementType e.Info>
      ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) s.CreateMode s.ElemNumber s.ElementType e.Info =
    (e.Indent
      'refalrts::' <AllocatorMode s.CreateMode> '_'
      <AllocatorFuncName s.ElementType> '( '
      <ContextItem s.ElemNumber> <AllocatorFuncArgument s.ElementType e.Info>
      ' );'
    );
}

AllocatorMode {
  #Reinit = 'reinit';
  #Update = 'update';
}

AllocatorFuncName {
  #ElChar = 'char';
  #ElName = 'name';
  #ElNumber = 'number';
  #ElIdent = 'ident';

  #ElOpenADT = 'open_adt';
  #ElCloseADT = 'close_adt';

  #ElOpenBracket = 'open_bracket';
  #ElCloseBracket = 'close_bracket';

  #ElOpenCall = 'open_call';
  #ElCloseCall = 'close_call';
}

AllocatorFuncArgument {
  #ElChar s.Char = ', ' '' <EscapeChar s.Char> '';

  #ElName e.Name = ', & ' <CNameAlias e.Name>;

  #ElNumber s.Number = ', ' <StrFromInt s.Number> 'UL';

  #ElIdent e.Name = ', & ident_' <CName e.Name> '<int>::name';

  // Остальное -- скобки
  s.Other = ;
}

PrintInterpretCreateElem {
  (e.Indent) s.Mode s.ElemNumber s.ElementType e.Info =
    (e.Indent
      '{refalrts::ic' <CreateMode s.Mode> <CreateCommandTag s.ElementType> ', '
      '0, '
      <CreateCommandInfo s.ElementType e.Info> ', '
      <StrFromInt s.ElemNumber> '},'
    );
}

CreateMode {
  #Allocate = 'Alloc';
  #Reinit = 'Reinit';
  #Update = 'Update';
}

CreateCommandTag {
  #ElChar = 'Char';

  #ElName = 'Func';

  #ElNumber = 'Int';
  #ElHugeNumber = 'HugeInt';

  #ElIdent = 'Ident';

  #ElOpenBracket = 'Bracket';
  #ElOpenADT = 'Bracket';
  #ElOpenCall = 'Bracket';
  #ElCloseBracket = 'Bracket';
  #ElCloseADT = 'Bracket';
  #ElCloseCall = 'Bracket';

  #ElString = 'String';
}

CreateCommandInfo {
  #ElChar s.Char = '' <EscapeChar s.Char> '';

  #ElName s.NameId = <StrFromInt s.NameId>;

  #ElNumber s.Number = <StrFromInt s.Number>;
  #ElHugeNumber s.NumberId = <StrFromInt s.NumberId>;

  #ElIdent s.NameId = <StrFromInt s.NameId>;

  #ElOpenBracket = 'refalrts::ibOpenBracket';
  #ElOpenADT = 'refalrts::ibOpenADT';
  #ElOpenCall = 'refalrts::ibOpenCall';
  #ElCloseBracket = 'refalrts::ibCloseBracket';
  #ElCloseADT = 'refalrts::ibCloseADT';
  #ElCloseCall = 'refalrts::ibCloseCall';

  #ElString s.StringId = <StrFromInt s.StringId>;
}
