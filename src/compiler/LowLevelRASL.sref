//FROM LibraryEx
$EXTERN Map, Fetch, Max, Seq, Inc, Compare, MapReduce;

//FROM Library
$EXTERN Add, StrFromInt;

//FROM Hash
$EXTERN HashLittle2-Chars;

//FROM DisplayName
$EXTERN DisplayName;

/**
  <LowLevelRASL s.GenMode e.RASLAST>
    == e.RASL

  s.GenMode ::= #OnlyDirect | #OnlyInterpret | #Both
*/
$ENTRY LowLevelRASL {
  s.GenMode (e.SrcName) e.ProgramElements =
    <Fetch
      e.ProgramElements
      <Seq
        (MapReduce
          CalcDigest
          // Числа выбраны случайно: hexdump /dev/urandom
          (<HashLittle2-Chars 4001567069 291363191 e.SrcName>)
        )
        {
          (s.Hash1 s.Hash2) e.Items =
            <Map (SetCookies s.Hash1 s.Hash2) e.Items>;
        }
        (MapReduce
          {
            (e.Declarations)
            (#Function (e.Name) e.Commands) =
              (e.Declarations (#CmdExtern e.Name))
              <Function
                s.GenMode (e.Name)
                <AddSavers e.Commands>
              >;

            (e.Declarations)
            (#CmdNativeFunction (e.Name) t.SrcPos e.Code) =
              (e.Declarations (#CmdExtern e.Name))
              (#CmdFnStart e.Name)
              (#CmdEmitNativeCode t.SrcPos e.Code)
              (#CmdFnEnd)
              (#CmdFuncDescr e.Name);

            (e.Declarations)
            (#CmdEnum e.Name) =
              (e.Declarations (#CmdEnumDescr e.Name));

            (e.Declarations)
            (#CmdSwap e.Name) =
              (e.Declarations (#CmdSwapDescr e.Name));

            (e.Declarations)
            (#CmdDeclaration e.Name) =
              (e.Declarations (#CmdDeclaration e.Name));

            (e.Declarations)
            (#CmdDefineIdent e.Name) =
              (e.Declarations (#CmdDefineIdent e.Name));

            (e.Declarations)
            (#CmdEmitNativeCode t.SrcPos e.Code) =
              (e.Declarations)
              (#CmdEmitNativeCode t.SrcPos e.Code);
          }
          (/* объявления и определения swap’ов и enum’ов */)
        )
        {
          (e.Declarations) e.Definitions =
            e.Declarations (#CmdSeparator) e.Definitions;
        }
      >
    >;
}

CalcDigest {
  (s.Hash1 s.Hash2) (#Function s.ScopeClass (e.Name) e.Commands) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'R'>)
    (#Function s.ScopeClass (e.Name) e.Commands);

  (s.Hash1 s.Hash2)
  (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'N'>)
    (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code);

  (s.Hash1 s.Hash2) (#CmdEnum s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'E'>)
    (#CmdEnum s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdSwap s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'S'>)
    (#CmdSwap s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdDeclaration s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'D'>)
    (#CmdDeclaration s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdDefineIdent e.Name) =
    (s.Hash1 s.Hash2) (#CmdDefineIdent e.Name);

  (s.Hash1 s.Hash2) (#CmdEmitNativeCode t.SrcPos e.Code) =
    (s.Hash1 s.Hash2) (#CmdEmitNativeCode t.SrcPos e.Code);
}

HashFuncName {
  s.Hash1 s.Hash2 s.ScopeClass e.Name s.Sign =
    <HashFuncName-Aux
      s.Hash1 s.Hash2 s.ScopeClass <DisplayName e.Name> s.Sign
    >;
}

HashFuncName-Aux {
  s.Hash1 s.Hash2 #GN-Entry e.Name =
    <HashLittle2-Chars s.Hash1 s.Hash2 'E' e.Name>;

  s.Hash1 s.Hash2 #GN-Local e.Name =
    <HashLittle2-Chars s.Hash1 s.Hash2 'L' e.Name>;
}

SetCookies {
  s.Hash1 s.Hash2
  (#Function s.ScopeClass (e.Name) e.Commands) =
    (#Function
      (<MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>)
      e.Commands
    );

  s.Hash1 s.Hash2
  (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code) =
    (#CmdNativeFunction
      (<MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>)
      t.SrcPos e.Code
    );

  s.Hash1 s.Hash2 (#CmdEnum s.ScopeClass e.Name) =
    (#CmdEnum <MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>);

  s.Hash1 s.Hash2 (#CmdSwap s.ScopeClass e.Name) =
    (#CmdSwap <MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>);

  s.Hash1 s.Hash2 (#CmdDeclaration s.ScopeClass e.Name) =
    (#CmdDeclaration
      <MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>
    );

  s.Hash1 s.Hash2 (#CmdDefineIdent e.Name) =
    (#CmdDefineIdent e.Name);

  s.Hash1 s.Hash2 (#CmdEmitNativeCode t.SrcPos e.Code) =
    (#CmdEmitNativeCode t.SrcPos e.Code);
}

MingleName {
  #GN-Entry e.Name s.Hash1 s.Hash2 = e.Name #Hash 0 0;
  #GN-Local e.Name s.Hash1 s.Hash2 = e.Name #Hash s.Hash1 s.Hash2;
}

AddSavers {
  (#CmdIssueMem s.Memory) e.Commands =
    <DoAddSavers
      s.Memory
      (/* alive vars */) (/* frozen vars */)
      (/* scanned */) e.Commands
    >;
}

DoAddSavers {
  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdInitB0) e.Commands =
    <DoAddSavers
      s.ContextTop (e.Alive 0) (e.Frozen)
      (e.Scanned (#CmdInitB0)) e.Commands
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdInitB0-Lite) e.Commands =
    <DoAddSavers
      s.ContextTop (e.Alive 0) (e.Frozen)
      (e.Scanned (#CmdInitB0-Lite)) e.Commands
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdCallSave #AlgLeft s.BracketNumber s.InnerNum e.Name) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdCallSave #AlgLeft s.BracketNumber s.InnerNum e.Name)
            )
            e.Commands
          >;
      }
    >;

  /*
    Эти предложения корректно обрабатывает и #AlgTerm:
    s.BracketNumber, который в этом случае будет номером t-переменной,
    просто не найдётся в таблицах e.Alive и e.Frozen, а функция
    CheckSaved вернёт без изменения свой аргумент.
  */
  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdBrackets s.Direction s.BracketNumber s.InnerNum) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdBrackets s.Direction s.BracketNumber s.InnerNum)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdBracketsSave s.Direction s.BracketNumber s.InnerNum) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdBracketsSave s.Direction s.BracketNumber s.InnerNum)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdADT s.Direction s.BracketNumber s.InnerNum e.Name) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdADT s.Direction s.BracketNumber s.InnerNum e.Name)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdADTSave s.Direction s.BracketNumber s.InnerNum e.Name) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdADTSave s.Direction s.BracketNumber s.InnerNum e.Name)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdComment e.Comment) e.Commands =
    <DoAddSavers
      s.ContextTop (e.Alive) (e.Frozen)
      (
        e.Scanned
        (#CmdComment <FixupFrozenComment (e.Frozen) e.Comment>)
      )
      e.Commands
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdRepeated s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNum)
  e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <Fetch
            <CheckFrozen e.Frozen s.SampleNum>
            {
              s.SampleNum^ =
                <DoAddSavers
                  s.ContextTop (e.Alive) (e.Frozen)
                  (
                    e.Scanned
                    e.Saver
                    (#CmdRepeated
                      s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNum
                    )
                  )
                  e.Commands
                >;
            }
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdRepeatedSave s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNum)
  e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <Fetch
            <CheckFrozen e.Frozen s.SampleNum>
            {
              s.SampleNum^ =
                <DoAddSavers
                  s.ContextTop (e.Alive) (e.Frozen)
                  (
                    e.Scanned
                    e.Saver
                    (#CmdRepeatedSave
                      s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNum
                    )
                  )
                  e.Commands
                >;
            }
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdOpenELoop #AlgLeft s.BracketNumber s.VarNumber e.SubCommands)
  /* обычно, последняя команда, но после неё может следовать #CmdFail */
  e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <Fetch
            <DoAddSavers
              s.ContextTop () (e.Frozen <Freeze e.Alive>)
              () e.SubCommands
            >
            {
              (#CmdIssueMem s.ContextTop^) e.SubCommands^ =
                (#CmdIssueMem s.ContextTop)
                e.Scanned
                e.Saver
                (#CmdOpenELoop
                  #AlgLeft s.BracketNumber s.VarNumber e.SubCommands
                )
                <Fetch
                  e.Commands
                  {
                    /* пусто */ = /* пусто */;
                    (#CmdFail) = (#CmdFail);
                  }
                >;
            }
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (s.MatchCommand #AlgLeft s.BracketNumber e.Info) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive) (e.Frozen)
            (e.Scanned e.Saver (s.MatchCommand #AlgLeft s.BracketNumber e.Info))
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (s.MatchCommand #AlgRight s.BracketNumber e.Info) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive) (e.Frozen)
            (
              e.Scanned e.Saver
              (s.MatchCommand #AlgRight s.BracketNumber e.Info)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdCopyVar 'e' s.Target s.Sample) e.Commands =
    <Fetch
      <CheckFrozen e.Frozen s.Sample>
      {
        s.Sample^ =
          <DoAddSavers
            s.ContextTop (e.Alive) (e.Frozen)
            (e.Scanned (#CmdCopyVar 'e' s.Target s.Sample)) e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdInsertVar 'e' s.Offset) e.Commands =
    <Fetch
      <CheckFrozen e.Frozen s.Offset>
      {
        s.Offset^ =
          <DoAddSavers
            s.ContextTop (e.Alive) (e.Frozen)
            (e.Scanned (#CmdInsertVar 'e' s.Offset)) e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdSentence e.SubCommands) e.Commands =
    <Fetch
      <DoAddSavers
        s.ContextTop () (e.Frozen <Freeze e.Alive>)
        () e.SubCommands
      >
      {
        (#CmdIssueMem s.InnerContextTop) e.SubCommands^ =
          <Fetch
            <DoAddSavers
              s.ContextTop (e.Alive) (e.Frozen)
              (e.Scanned (#CmdSentence e.SubCommands))
              e.Commands
            >
            {
              (#CmdIssueMem s.OuterContextTop) e.Scanned^ =
                (#CmdIssueMem <Max s.InnerContextTop s.OuterContextTop>)
                e.Scanned;
            }
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen) (e.Scanned) t.OtherCommand e.Commands =
    <DoAddSavers
      s.ContextTop (e.Alive) (e.Frozen)
      (e.Scanned t.OtherCommand) e.Commands
    >;

  s.ContextTop (e.Alive) (e.Frozen) (e.Scanned) /* всё */ =
    (#CmdIssueMem s.ContextTop) e.Scanned;
}

CheckSaved {
  s.ContextTop
  (e.Alive-B s.BracketNumber e.Alive-E) (e.Frozen) s.BracketNumber =
    s.ContextTop
    (e.Alive-B s.BracketNumber e.Alive-E) (e.Frozen) s.BracketNumber;

  s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber =
    <CheckSaved-Fronen
      s.ContextTop (e.Alive) () (e.Frozen) s.BracketNumber
    >;
}

CheckSaved-Fronen {
  s.ContextTop (e.Alive) (e.ScannedFrozen)
  (e.Frozen-B (s.BracketNumber #Frozen) e.Frozen-E) s.BracketNumber =
    <Add s.ContextTop 2>
    (e.Alive s.ContextTop)
    (e.ScannedFrozen e.Frozen-B (s.BracketNumber s.ContextTop) e.Frozen-E)
    s.ContextTop (#CmdSave s.BracketNumber s.ContextTop);

  s.ContextTop (e.Alive) (e.ScannedFrozen)
  (e.Frozen-B (s.BracketNumber s.NewNumber) e.Frozen-E) s.BracketNumber =
    <CheckSaved-Fronen
      s.ContextTop (e.Alive)
      (e.ScannedFrozen e.Frozen-B (s.BracketNumber s.NewNumber))
      (e.Frozen-E) s.NewNumber
    >;

  s.ContextTop (e.Alive) (e.ScannedFrozen) (e.Frozen) s.BracketNumber =
    s.ContextTop (e.Alive) (e.ScannedFrozen e.Frozen) s.BracketNumber;
}

FixupFrozenComment {
  (e.Frozen) e.Comment-B #Offset s.Num e.Comment-E =
    e.Comment-B
    <Fetch
      <CheckFrozen e.Frozen s.Num>
      {
        s.Num = <StrFromInt s.Num>;
        s.Renum = <StrFromInt s.Renum> '(' <StrFromInt s.Num> ')';
      }
    >
    <FixupFrozenComment (e.Frozen) e.Comment-E>;

  (e.Frozen) e.Comment = e.Comment;
}

CheckFrozen {
  e.Frozen-B (s.BracketNumber #Frozen) e.Frozen-E s.BracketNumber =
    s.BracketNumber;

  e.Frozen-B (s.BracketNumber s.NewNumber) e.Frozen-E s.BracketNumber =
    <CheckFrozen e.Frozen-E s.NewNumber>;

  e.Frozen s.BracketNumber = s.BracketNumber;
}

Freeze {
  e.BracketNumbers =
    <Map { s.Number = (s.Number #Frozen); } e.BracketNumbers>;
}

Function {
  #Both (e.Name) e.Commands =
    // Интерпретируемый код
    (#CmdIfDef 'INTERPRET')
    <Function #OnlyInterpret (e.Name) e.Commands>
    (#CmdElse)
    // Компилируемый код
    <Function #OnlyDirect (e.Name) e.Commands>
    (#CmdEndIf);

  #OnlyDirect (e.Name) e.Commands =
    // Компилируемый код
    <Function-Direct (e.Name) e.Commands>;

  #OnlyInterpret (e.Name) e.Commands =
    // Интерпретируемый код
    <Function-Interpret (e.Name) e.Commands>;
}

Function-Interpret {
  (e.Name) e.FunctionBody =
    <Fetch
      e.FunctionBody
      <Seq
        ConvertInterpretCommands
        PrepareOpenEStack
        {
          e.FunctionBody^ =
            (#CmdInitRAA)
            (#CmdiProfileFunction)
            (#CmdiLoadConstants)
            e.FunctionBody
            (#CmdFinRAA);
        }
        (OutlineConstants
          (0 /* функции */)
          (0 /* идентификаторы */)
          (0 /* большие числа */)
          (0 /* строки */)
        )
        {
          e.FunctionBody^ =
            (#CmdNamespaceStart)
            (#CmdNamespaceStart e.Name)
            e.FunctionBody
            (#CmdNamespaceEnd e.Name)
            (#CmdNamespaceEnd)
            (#CmdInterpretFuncDescr e.Name);
        }
      >
    >;
}

ConvertInterpretCommands {
  e.Commands = <Map ConvertOneInterpretCommand e.Commands>;
}

Length-T {
  e.Expr = <DoLength 0 e.Expr>;
}

DoLength {
  s.Count e.Expr (#CmdComment e.Text) =
    <DoLength s.Count e.Expr> (#CmdComment e.Text);

  s.Count e.Expr t.Last = <DoLength <Inc s.Count> e.Expr> t.Last;

  s.Count /* пусто */ = s.Count;
}

ConvertOneInterpretCommand {
  (#CmdComment e.Text) = (#CmdComment e.Text);

  (#CmdIssueMem s.Memory) = (#CmdiIssueMem s.Memory);

  (#CmdiOnFailGoTo s.Offset) = (#CmdiOnFailGoTo s.Offset);

  (#CmdInitB0) = (#CmdiInitB0);

  (#CmdInitB0-Lite) = (#CmdiInitB0-Lite);

  (#CmdChar s.Direction s.BracketNumber s.Char) =
    (#CmdiChar s.Direction s.BracketNumber s.Char);

  (#CmdCharSave s.Direction s.BracketNumber s.SaveOffset s.Char) =
    (#CmdiCharSave s.Direction s.BracketNumber s.SaveOffset s.Char);

  (#CmdNumber s.Direction s.BracketNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdiNum s.Direction s.BracketNumber s.Number);

        s.Other = (#CmdiHugeNum s.Direction s.BracketNumber s.Number);
      }
    >;

  (#CmdNumberSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' =
          (#CmdiNumSave s.Direction s.BracketNumber s.SaveOffset s.Number);

        s.Other =
          (#CmdiHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number);
      }
    >;

  (#CmdName s.Direction s.BracketNumber e.Name) =
    (#CmdiName s.Direction s.BracketNumber e.Name);

  (#CmdNameSave s.Direction s.BracketNumber s.SaveOffset e.Name) =
    (#CmdiNameSave s.Direction s.BracketNumber s.SaveOffset e.Name);

  (#CmdIdent s.Direction s.BracketNumber e.Name) =
    (#CmdiIdent s.Direction s.BracketNumber e.Name);

  (#CmdIdentSave s.Direction s.BracketNumber s.SaveOffset e.Name) =
    (#CmdiIdentSave s.Direction s.BracketNumber s.SaveOffset e.Name);

  (#CmdBrackets s.Direction s.Num s.NumRanges) =
    (#CmdiBracket s.Direction s.Num s.NumRanges);

  (#CmdBracketsSave s.Direction s.Num s.NumRanges) =
    (#CmdiBracketsSave s.Direction s.Num s.NumRanges);

  (#CmdADT s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (#CmdiADT s.Direction s.BracketNumber s.InnerBrackets e.Name);

  (#CmdADTSave s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (#CmdiADTSave s.Direction s.BracketNumber s.InnerBrackets e.Name);

  (#CmdCallSave s.Direction s.Num s.NumRanges) =
    (#CmdiCallSave s.Direction s.Num s.NumRanges);

  (#CmdEmpty #AlgLeft s.BracketNumber) =
    (#CmdiEmpty s.BracketNumber);

  (#CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (#CmdiVar s.Direction s.BracketNumber s.Mode s.VarNumber);

  (#CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (#CmdiVarSave s.Direction s.BracketNumber s.Mode s.VarNumber);

  (#CmdRepeated s.Direction s.BracketNumber s.Mode s.VarNum s.SampleNum) =
    (#CmdiRepeat s.Direction s.BracketNumber s.Mode s.VarNum s.SampleNum);

  (#CmdRepeatedSave s.Direction s.BracketNumber 't' s.VarNum s.SampleNum) =
    (#CmdiRepeatedSave s.Direction s.BracketNumber 't' s.VarNum s.SampleNum);

  (#CmdRepeatedSave s.Direction s.BracketNumber s.Mode s.VarNum s.SampleNum) =
    (#CmdiRepeat s.Direction s.BracketNumber s.Mode s.VarNum s.SampleNum);

  (#CmdiEPrepare s.BracketNum s.VarNumber) =
    (#CmdiEPrepare s.BracketNum s.VarNumber);

  (#CmdiEStart s.BracketNum s.VarNumber) =
    (#CmdiEStart s.BracketNum s.VarNumber);

  (#CmdSave s.OldBracketNumber s.NewBracketNumber) =
    (#CmdiSave s.OldBracketNumber s.NewBracketNumber);

  (#CmdEmptyResult) = (#CmdiEmptyResult);

  (#CmdResetAllocator) = (#CmdiEmptyResult);

  (#CmdSetRes s.Offset) = (#CmdiSetRes s.Offset);

  (#CmdCopyVar s.Mode s.Number s.Sample) =
    (#CmdiCopyVar s.Mode s.Number s.Sample);

  (#CmdReinitSVar s.Offset s.Sample) = (#CmdiReinitSVar s.Offset s.Sample);

  (#CmdAllocateElem s.ElemNo #ElNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdiCreateElem #Allocate s.ElemNo #ElNumber s.Number);
        s.Other = (#CmdiCreateElem #Allocate s.ElemNo #ElHugeNumber s.Number);
      }
    >;

  (#CmdAllocateElem s.ElemNo s.Type e.Info) =
    (#CmdiCreateElem #Allocate s.ElemNo s.Type e.Info);

  (#CmdReinitElem s.ElemNo #ElNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdiCreateElem #Reinit s.ElemNo #ElNumber s.Number);
        s.Other = (#CmdiCreateElem #Reinit s.ElemNo #ElHugeNumber s.Number);
      }
    >;

  (#CmdReinitElem s.ElemNo s.Type e.Info) =
    (#CmdiCreateElem #Reinit s.ElemNo s.Type e.Info);

  (#CmdUpdateElem s.ElemNo #ElNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdiCreateElem #Update s.ElemNo #ElNumber s.Number);
        s.Other = (#CmdiCreateElem #Update s.ElemNo #ElHugeNumber s.Number);
      }
    >;

  (#CmdUpdateElem s.ElemNo s.Type e.Info) =
    (#CmdiCreateElem #Update s.ElemNo s.Type e.Info);

  (#CmdLinkBrackets s.Left s.Right) = (#CmdiLinkBrackets s.Left s.Right);

  (#CmdPushStack s.ElemNo) = (#CmdiPushStack s.ElemNo);

  (#CmdInsertElem s.ElemNo) = (#CmdiInsertElem s.ElemNo);

  (#CmdInsertVar s.Mode s.Number) = (#CmdiInsertVar s.Mode s.Number);

  (#CmdInsertRange s.ElemNo) = (#CmdiInsertRange s.ElemNo);

  (#CmdInsertTile s.BeginOffset s.EndOffset) =
    (#CmdiInsertTile s.BeginOffset s.EndOffset);

  (#CmdUseRes) = /* пусто */;

  (#CmdSpliceToFreeList) = (#CmdiSpliceToFreeList);

  (#CmdNextStep) = (#CmdiNextStep);

  (#CmdTrash s.Offset) = (#CmdiTrash s.Offset);

  (#CmdFail) = (#CmdiFail);

  (#CmdSentence e.SubCommands) =
    <Fetch
      <Length-T
        <ConvertInterpretCommands e.SubCommands>
      >
      {
        s.Length e.SubCommands^ =
          (#CmdiOnFailGoTo s.Length)
          e.SubCommands
          (#CmdiProfilerStopSentence);
      }
    >;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) =
    (#CmdiEPrepare s.BracketNum s.VarNumber)
    (#CmdiEStart s.BracketNum s.VarNumber)
    <ConvertInterpretCommands e.SubCommands>;
}

RemoveNumber { (s.Number e.Name) = (e.Name); }

OutlineConstants {
  (s.NextFunc e.Funcs)
  (s.NextLabel e.Labels)
  (s.NextNumber e.Numbers)
  (s.NextString e.Strings)
  /* пусто */ =
    (#CmdiFuncArray <Map RemoveNumber e.Funcs>)
    (#CmdiLabelArray <Map RemoveNumber e.Labels>)
    (#CmdiNumberArray <Map { (s.Id s.Value) = s.Value; } e.Numbers>)
    (#CmdiStringArray <Map RemoveNumber e.Strings>);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiName s.Direction s.BracketNum s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiName s.Direction s.BracketNum s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiNameSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiNameSave s.Direction s.BracketNum s.SaveOffset s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElName s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElName s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiADT s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiADT s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiADTSave s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiADTSave s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiIdent s.Direction s.BracketNum e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiIdent s.Direction s.BracketNum s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiIdent s.Direction s.BracketNum e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiIdent s.Direction s.BracketNum s.NextLabel);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiIdentSave s.Direction s.BracketNum s.SaveOffset e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiIdentSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiIdentSave s.Direction s.BracketNum s.SaveOffset e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiIdentSave s.Direction s.BracketNum s.SaveOffset s.NextLabel);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElIdent e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElIdent s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElIdent e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElIdent s.NextLabel);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdiHugeNum s.Direction s.BracketNum s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdiHugeNum s.Direction s.BracketNum s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdiHugeNum s.Direction s.BracketNum s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdiHugeNum s.Direction s.BracketNum s.NextNumId);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdiHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdiHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdiHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdiHugeNumSave s.Direction s.BracketNum s.SaveOffset s.NextNumId);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.NextNumId);

  (e.Funcs) (e.Labels) (e.Numbers)
  (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElString s.Id);

  (e.Funcs) (e.Labels) (e.Numbers) (s.NextStringId e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (<Inc s.NextStringId> e.Strings (s.NextStringId e.String))
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElString s.NextStringId);

  (e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  t.OtherCommand =
    <OutlineConstants (e.Funcs) (e.Labels) (e.Numbers) (e.Strings) e.Commands>
    t.OtherCommand;
}

PrepareOpenEStack {
  e.Commands =
    <MapReduce
      {
        (#CmdiReserveStack s.Depth) (#CmdiEStart e.VarInfo) =
          (#CmdiReserveStack <Inc s.Depth>) (#CmdiEStart e.VarInfo);

        (#CmdiReserveStack s.Depth) (#CmdiOnFailGoTo s.Offset) =
          (#CmdiReserveStack <Inc s.Depth>) (#CmdiOnFailGoTo s.Offset);

        (#CmdiReserveStack s.Depth) t.OtherCommand =
          (#CmdiReserveStack s.Depth) t.OtherCommand;
      }
      (#CmdiReserveStack 0)
      e.Commands
    >;
}

Function-Direct {
  (e.Name) e.Body =
    (#CmdFnStart e.Name)
    (#CmdProfileFunction)
    <Function-DirectRec e.Body>
    (#CmdFnEnd)
    (#CmdFuncDescr e.Name);
}

Function-DirectRec {
  (#CmdSentence e.SubCommands) e.Tail =
    (#CmdStartSentence)
    <Function-DirectRec e.SubCommands>
    (#CmdEndSentence)
    <Function-DirectRec e.Tail>;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) e.Tail =
    (#CmdOpenedE-Start #AlgLeft s.BracketNum s.VarNumber)
    <Function-DirectRec e.SubCommands>
    (#CmdOpenedE-End #AlgLeft s.BracketNum s.VarNumber)
    <Function-DirectRec e.Tail>;

  t.Command e.Tail = t.Command <Function-DirectRec e.Tail>;

  /* пусто */ = /* пусто */;
}
