//FROM LibraryEx
$EXTERN Map, Fetch, Max, Seq, Inc, Compare, MapReduce, DelAccumulator;

//FROM Library
$EXTERN Add, StrFromInt, WriteLine, Exit;

//FROM Hash
$EXTERN HashLittle2-Chars;

//FROM DisplayName
$EXTERN DisplayName;

/**
  <LowLevelRASL s.GenMode s.DebugInfo (e.SrcName) e.RASLAST>
    == t.RASLModule
    == t.RASLModule t.NativeModule

  s.GenMode ::= #OnlyDirect | #OnlyInterpret
  s.DebugInfo ::= #DebugInfo | #NoDebugInfo
*/
$ENTRY LowLevelRASL {
  s.GenMode s.DebugInfo (e.SrcName) e.ProgramElements =
    <Fetch
      e.ProgramElements
      <Seq
        (Map
          {
            (#Function s.ScopeClass (e.Name) e.Commands) =
              (#Function s.ScopeClass (e.Name) <AddSavers e.Commands>);

            t.OtherItem = t.OtherItem;
          }
        )
        (MapReduce
          CalcDigest
          // Числа выбраны случайно: hexdump /dev/urandom
          (<HashLittle2-Chars 4001567069 291363191 <Canonize e.SrcName>>)
        )
        (Map (MarkFunctionGenMode s.GenMode))
        {
          (s.Hash1 s.Hash2) e.Items =
            <LowLevelRASL-RASL s.DebugInfo s.Hash1 s.Hash2 e.Items>
            <LowLevelRASL-Native s.Hash1 s.Hash2 e.Items>;
        }
      >
    >;
}

Canonize {
  e.Canonized '\\' e.NotCanonized = e.Canonized '/' <Canonize e.NotCanonized>;
  e.Canonized = e.Canonized;
}

AddSavers {
  (#CmdIssueMemory s.Memory) e.Commands =
    <DoAddSavers
      s.Memory
      (/* alive vars */) (/* frozen vars */)
      (/* scanned */) e.Commands
    >;
}

DoAddSavers {
  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdInitB0) e.Commands =
    <DoAddSavers
      s.ContextTop (e.Alive 0) (e.Frozen)
      (e.Scanned (#CmdInitB0)) e.Commands
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdInitB0-Lite) e.Commands =
    <DoAddSavers
      s.ContextTop (e.Alive 0) (e.Frozen)
      (e.Scanned (#CmdInitB0-Lite)) e.Commands
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdCallSave #AlgLeft s.BracketNumber s.InnerNum e.Name) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdCallSave #AlgLeft s.BracketNumber s.InnerNum e.Name)
            )
            e.Commands
          >;
      }
    >;

  /*
    Эти предложения корректно обрабатывает и #AlgTerm:
    s.BracketNumber, который в этом случае будет номером t-переменной,
    просто не найдётся в таблицах e.Alive и e.Frozen, а функция
    CheckSaved вернёт без изменения свой аргумент.
  */
  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdBrackets s.Direction s.BracketNumber s.InnerNum) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdBrackets s.Direction s.BracketNumber s.InnerNum)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdBracketsSave s.Direction s.BracketNumber s.InnerNum) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdBracketsSave s.Direction s.BracketNumber s.InnerNum)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdADT s.Direction s.BracketNumber s.InnerNum e.Name) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdADT s.Direction s.BracketNumber s.InnerNum e.Name)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdADTSave s.Direction s.BracketNumber s.InnerNum e.Name) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive s.InnerNum) (e.Frozen)
            (
              e.Scanned
              e.Saver
              (#CmdADTSave s.Direction s.BracketNumber s.InnerNum e.Name)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdComment e.Comment) e.Commands =
    <DoAddSavers
      s.ContextTop (e.Alive) (e.Frozen)
      (
        e.Scanned
        (#CmdComment <FixupFrozenComment (e.Frozen) e.Comment>)
      )
      e.Commands
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdRepeated s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNum)
  e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <Fetch
            <CheckFrozen e.Frozen s.SampleNum>
            {
              s.SampleNum^ =
                <DoAddSavers
                  s.ContextTop (e.Alive) (e.Frozen)
                  (
                    e.Scanned
                    e.Saver
                    (#CmdRepeated
                      s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNum
                    )
                  )
                  e.Commands
                >;
            }
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned)
  (#CmdOpenELoop #AlgLeft s.BracketNumber s.VarNumber e.SubCommands)
  /* обычно, последняя команда, но после неё может следовать #CmdFail */
  e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <Fetch
            <DoAddSavers
              s.ContextTop () (e.Frozen <Freeze e.Alive>)
              () e.SubCommands
            >
            {
              (#CmdIssueMemory s.ContextTop^) e.SubCommands^ =
                (#CmdIssueMemory s.ContextTop)
                e.Scanned
                e.Saver
                (#CmdOpenELoop
                  #AlgLeft s.BracketNumber s.VarNumber e.SubCommands
                )
                <Fetch
                  e.Commands
                  {
                    /* пусто */ = /* пусто */;
                    (#CmdFail) = (#CmdFail);
                  }
                >;
            }
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (s.MatchCommand #AlgLeft s.BracketNumber e.Info) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive) (e.Frozen)
            (e.Scanned e.Saver (s.MatchCommand #AlgLeft s.BracketNumber e.Info))
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (s.MatchCommand #AlgRight s.BracketNumber e.Info) e.Commands =
    <Fetch
      <CheckSaved s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber>
      {
        s.ContextTop^ (e.Alive^) (e.Frozen^) s.BracketNumber^ e.Saver =
          <DoAddSavers
            s.ContextTop (e.Alive) (e.Frozen)
            (
              e.Scanned e.Saver
              (s.MatchCommand #AlgRight s.BracketNumber e.Info)
            )
            e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdCopyVar 'e' s.Target s.Sample) e.Commands =
    <Fetch
      <CheckFrozen e.Frozen s.Sample>
      {
        s.Sample^ =
          <DoAddSavers
            s.ContextTop (e.Alive) (e.Frozen)
            (e.Scanned (#CmdCopyVar 'e' s.Target s.Sample)) e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdInsertVar 'e' s.Offset) e.Commands =
    <Fetch
      <CheckFrozen e.Frozen s.Offset>
      {
        s.Offset^ =
          <DoAddSavers
            s.ContextTop (e.Alive) (e.Frozen)
            (e.Scanned (#CmdInsertVar 'e' s.Offset)) e.Commands
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen)
  (e.Scanned) (#CmdSentence e.SubCommands) e.Commands =
    <Fetch
      <DoAddSavers
        s.ContextTop () (e.Frozen <Freeze e.Alive>)
        () e.SubCommands
      >
      {
        (#CmdIssueMemory s.InnerContextTop) e.SubCommands^ =
          <Fetch
            <DoAddSavers
              s.ContextTop (e.Alive) (e.Frozen)
              (e.Scanned (#CmdSentence e.SubCommands))
              e.Commands
            >
            {
              (#CmdIssueMemory s.OuterContextTop) e.Scanned^ =
                (#CmdIssueMemory <Max s.InnerContextTop s.OuterContextTop>)
                e.Scanned;
            }
          >;
      }
    >;

  s.ContextTop (e.Alive) (e.Frozen) (e.Scanned) t.OtherCommand e.Commands =
    <DoAddSavers
      s.ContextTop (e.Alive) (e.Frozen)
      (e.Scanned t.OtherCommand) e.Commands
    >;

  s.ContextTop (e.Alive) (e.Frozen) (e.Scanned) /* всё */ =
    (#CmdIssueMemory s.ContextTop) e.Scanned;
}

CheckSaved {
  s.ContextTop
  (e.Alive-B s.BracketNumber e.Alive-E) (e.Frozen) s.BracketNumber =
    s.ContextTop
    (e.Alive-B s.BracketNumber e.Alive-E) (e.Frozen) s.BracketNumber;

  s.ContextTop (e.Alive) (e.Frozen) s.BracketNumber =
    <CheckSaved-Frozen
      s.ContextTop (e.Alive) () (e.Frozen) s.BracketNumber
    >;
}

CheckSaved-Frozen {
  s.ContextTop (e.Alive) (e.ScannedFrozen)
  (e.Frozen-B (s.BracketNumber #Frozen) e.Frozen-E) s.BracketNumber =
    <Add s.ContextTop 2>
    (e.Alive s.ContextTop)
    (e.ScannedFrozen e.Frozen-B (s.BracketNumber s.ContextTop) e.Frozen-E)
    s.ContextTop (#CmdSave s.BracketNumber s.ContextTop);

  s.ContextTop (e.Alive) (e.ScannedFrozen)
  (e.Frozen-B (s.BracketNumber s.NewNumber) e.Frozen-E) s.BracketNumber =
    <CheckSaved-Frozen
      s.ContextTop (e.Alive)
      (e.ScannedFrozen e.Frozen-B (s.BracketNumber s.NewNumber))
      (e.Frozen-E) s.NewNumber
    >;

  s.ContextTop (e.Alive) (e.ScannedFrozen) (e.Frozen) s.BracketNumber =
    s.ContextTop (e.Alive) (e.ScannedFrozen e.Frozen) s.BracketNumber;
}

FixupFrozenComment {
  (e.Frozen) e.Comment-B #Offset s.Num e.Comment-E =
    e.Comment-B
    <Fetch
      <CheckFrozen e.Frozen s.Num>
      {
        s.Num = <StrFromInt s.Num>;
        s.Renum = <StrFromInt s.Renum> '(' <StrFromInt s.Num> ')';
      }
    >
    <FixupFrozenComment (e.Frozen) e.Comment-E>;

  (e.Frozen) e.Comment = e.Comment;
}

CheckFrozen {
  e.Frozen-B (s.BracketNumber #Frozen) e.Frozen-E s.BracketNumber =
    s.BracketNumber;

  e.Frozen-B (s.BracketNumber s.NewNumber) e.Frozen-E s.BracketNumber =
    <CheckFrozen e.Frozen-E s.NewNumber>;

  e.Frozen s.BracketNumber = s.BracketNumber;
}

Freeze {
  e.BracketNumbers =
    <Map { s.Number = (s.Number #Frozen); } e.BracketNumbers>;
}

CalcDigest {
  (s.Hash1 s.Hash2) (#Function s.ScopeClass (e.Name) e.Commands) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'R'>)
    (#Function s.ScopeClass (e.Name) e.Commands);

  (s.Hash1 s.Hash2)
  (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'N'>)
    (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code);

  (s.Hash1 s.Hash2) (#CmdEnum s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'E'>)
    (#CmdEnum s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdSwap s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'S'>)
    (#CmdSwap s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdDeclaration s.ScopeClass e.Name) =
    (<HashFuncName s.Hash1 s.Hash2 s.ScopeClass e.Name 'D'>)
    (#CmdDeclaration s.ScopeClass e.Name);

  (s.Hash1 s.Hash2) (#CmdDefineIdent e.Name) =
    (s.Hash1 s.Hash2) (#CmdDefineIdent e.Name);

  (s.Hash1 s.Hash2) (#CmdEmitNativeCode t.SrcPos e.Code) =
    (s.Hash1 s.Hash2) (#CmdEmitNativeCode t.SrcPos e.Code);
}

HashFuncName {
  s.Hash1 s.Hash2 s.ScopeClass e.Name s.Sign =
    <HashLittle2-Chars
      s.Hash1 s.Hash2
      <CharFromScopeClass s.ScopeClass> <DisplayName e.Name> s.Sign
    >;
}

CharFromScopeClass {
  #GN-Entry = 'E';
  #GN-Local = 'L';
}

MarkFunctionGenMode {
  #OnlyInterpret (#Function s.ScopeClass (e.Name) e.Commands) =
    (#Function-ToRASL s.ScopeClass (e.Name) e.Commands);

  #OnlyDirect (#Function s.ScopeClass (e.Name) e.Commands) =
    (#Function-ToNative s.ScopeClass (e.Name) e.Commands);

  s.GenMode (s.Type e.Info) = (s.Type e.Info);
}

LowLevelRASL-RASL {
  s.DebugInfo s.Hash1 s.Hash2 e.Items =
    <Fetch
      e.Items
      <Seq
        (MapReduce
          (ClassifyItems-RASL s.DebugInfo)
          (/* Области видимости функций */)
        )
        {
          (e.FuncScopeClass) e.Definitions =
            (
              (#ModuleID s.Hash1 s.Hash2)
              <PrepareRASL
                (e.FuncScopeClass) e.Definitions
              >
            );
        }
      >
    >;
}

OverflowFailure {
  e.Function #CmdIssueMemory s.Memory
    = <WriteLine 'Compilation failure in function ' e.Function ':'>
      <WriteLine
        '  this function requests ' <StrFromInt s.Memory> ' local variables, '
        'but maximum size is 256.'
      >
      <WriteLine '  Compilation aborted.'>
      <Exit 1>;

  e.Function #CmdOnFailGoTo s.Memory
    = <WriteLine 'Compilation failure in function ' e.Function ':'>
      <WriteLine
        '  this function try jump over ' <StrFromInt s.Memory> ' commands, '
        'but maximum jump length is 256.'
      >
      <WriteLine '  Compilation aborted.'>
      <Exit 1>;
}

ClassifyItems-RASL {
  s.DebugInfo (e.FuncScopeClass)
  (#Function-ToRASL s.ScopeClass (e.Name) e.FunctionBody) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    <Fetch
      e.FunctionBody
      <Seq
        (RemoveDebugInfo s.DebugInfo)
        ConvertInterpretCommands
        {
          e.Commands-B (#OVERFLOW s.Type s.Count) e.Commands-E
            = <OverflowFailure e.Name s.Type s.Count>;

          e.Commands = e.Commands;
        }
        PrepareOpenEStack
        {
          e.FunctionBody^ =
            (#CmdInterpretFuncDescr
              s.ScopeClass
              (e.Name)
              <Length-T
                (#CmdProfileFunction)
                (#CmdLoadConstants)
                e.FunctionBody
              >
            );
        }
      >
    >;

  s.DebugInfo (e.FuncScopeClass)
  (#Function-ToNative s.ScopeClass (e.Name) e.Commands) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdNativeFuncDescr s.ScopeClass e.Name);

  s.DebugInfo (e.FuncScopeClass)
  (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdNativeFuncDescr s.ScopeClass e.Name);

  s.DebugInfo (e.FuncScopeClass)
  (#CmdEnum s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdEnumDescr s.ScopeClass e.Name);

  s.DebugInfo (e.FuncScopeClass)
  (#CmdSwap s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name))
    (#CmdSwapDescr s.ScopeClass e.Name);

  s.DebugInfo (e.FuncScopeClass)
  (#CmdDeclaration s.ScopeClass e.Name) =
    (e.FuncScopeClass (s.ScopeClass e.Name));

  s.DebugInfo (e.FuncScopeClass)
  (#CmdDefineIdent e.Name) =
    (e.FuncScopeClass);

  s.DebugInfo (e.FuncScopeClass)
  (#CmdEmitNativeCode t.SrcPos e.Code) =
    (e.FuncScopeClass);
}

RemoveDebugInfo {
  #DebugInfo e.FunctionBody =
    // ничего не меняем, сохраняем отладочную информацию как есть
    e.FunctionBody;

  #NoDebugInfo e.FunctionBody =
    <RemoveDebugInfoRec e.FunctionBody>;
}

RemoveDebugInfoRec {
  (#CmdSentence e.SubCommands) e.Tail =
    (#CmdSentence <RemoveDebugInfoRec e.SubCommands>) <RemoveDebugInfoRec e.Tail>;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) e.Tail =
    (#CmdOpenELoop
      #AlgLeft s.BracketNum s.VarNumber
      <RemoveDebugInfoRec e.SubCommands>
    )
    <RemoveDebugInfoRec e.Tail>;

  (#CmdVariableDebugTable s.Mode e.Index s.Depth s.Offset) e.Tail =
    (#CmdComment
      'DEBUG: ' s.Mode '.' e.Index '#' <StrFromInt s.Depth>
      ': ' <StrFromInt s.Offset>
    )
    <RemoveDebugInfoRec e.Tail>;

  t.Command e.Tail = t.Command <RemoveDebugInfoRec e.Tail>;

  /* пусто */ = /* пусто */;
}

ConvertInterpretCommands {
  e.Commands = <Map ConvertOneInterpretCommand e.Commands>;
}

Length-T {
  e.Expr = <DoLength 0 e.Expr>;
}

DoLength {
  s.Count e.Expr (#CmdComment e.Text) =
    <DoLength s.Count e.Expr> (#CmdComment e.Text);

  s.Count e.Expr t.Last = <DoLength <Inc s.Count> e.Expr> t.Last;

  s.Count /* пусто */ = s.Count;
}

ConvertOneInterpretCommand {
  (#CmdIssueMemory s.Memory)
    = <Fetch
        <Compare s.Memory 256>
        {
          '<' = (#CmdIssueMemory s.Memory);

          s.Other = (#OVERFLOW #CmdIssueMemory s.Memory);
        }
      >;

  (#CmdNumber s.Direction s.BracketNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdNum s.Direction s.BracketNumber s.Number);

        s.Other = (#CmdHugeNum s.Direction s.BracketNumber s.Number);
      }
    >;

  (#CmdNumberSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' =
          (#CmdNumSave s.Direction s.BracketNumber s.SaveOffset s.Number);

        s.Other =
          (#CmdHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number);
      }
    >;

  (#CmdCreateElem s.CreateMode s.ElemNo #ElNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdCreateElem s.CreateMode s.ElemNo #ElNumber s.Number);
        s.Other = (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number);
      }
    >;

  (#CmdUseRes) = /* пусто */;

  (#CmdVariableDebugTable s.Mode e.Index s.Depth s.Offset) =
    (#CmdVariableDebugTable
      s.Mode '.' e.Index '#' <StrFromInt s.Depth> s.Offset
    );

  (#CmdSentence e.SubCommands)
    = <Length-T <ConvertInterpretCommands e.SubCommands>>
    : s.Length e.SubCommands^
    = <Fetch
        <Compare s.Length 256>
        {
          '<'
             = (#CmdOnFailGoTo s.Length)
               e.SubCommands
               (#CmdProfilerStopSentence);

           s.Other = (#OVERFLOW #CmdOnFailGoTo s.Length);
        }
      >;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) =
    (#CmdEPrepare s.BracketNum s.VarNumber)
    (#CmdEStart s.BracketNum s.VarNumber)
    <ConvertInterpretCommands e.SubCommands>;

  t.Command = t.Command;
}

PrepareRASL {
  (e.FuncScopeClass) e.Definitions =
    <Fetch
      e.Definitions
      <Seq
        (MapReduce
          {
            (s.CurrentOffset e.All-RASL-Commands)
            (#CmdInterpretFuncDescr
              s.ScopeClass (e.Name) s.RASL-Length e.RASL-Commands
            ) =
              (
                <Add s.CurrentOffset s.RASL-Length>
                e.All-RASL-Commands
                (#CmdComment
                  <DisplayName e.Name>
                  ' (' <StrFromInt s.RASL-Length> '),'
                  ' +' <StrFromInt s.CurrentOffset>
                )
                e.RASL-Commands
              )
              (#CmdInterpretFuncDescr s.ScopeClass e.Name s.CurrentOffset);

            (s.CurrentOffset e.All-RASL-Commands) t.OtherItem =
              (s.CurrentOffset e.All-RASL-Commands) t.OtherItem;
          }
          (0 /* rasl */)
        )
        {
          (s.RASL-Length e.RASL-Commands) e.Items =
            <Fetch
              <OutlineConstants
                (0 /* функции */)
                (0 /* идентификаторы */)
                (0 /* большие числа */)
                (0 /* строки */)
                e.RASL-Commands
              >
              {
                (#CmdFuncArray s.FunctionCount e.Functions)
                (#CmdLabelArray s.LabelCount e.Labels)
                (#CmdNumberArray s.NumberCount e.Numbers)
                (#CmdStringArray s.StringCount e.Strings)
                e.RASL-Commands^ =
                  (#CmdFuncArray
                    s.FunctionCount
                    <DelAccumulator
                      <MapReduce
                        {
                          (e.Decls-B (s.ScopeClass e.FuncName) e.Decls-E)
                          (e.FuncName) =
                            (e.Decls-B e.Decls-E)
                            (s.ScopeClass e.FuncName);

                          (e.Decls) (#CreateClosure) =
                            (e.Decls) (#GN-Entry #CreateClosure);
                        }
                        (e.FuncScopeClass)
                        e.Functions
                      >
                    >
                  )
                  (#CmdLabelArray s.LabelCount e.Labels)
                  (#CmdNumberArray s.NumberCount e.Numbers)
                  (#CmdStringArray s.StringCount e.Strings)
                  (#RASL e.RASL-Commands)
                  (#Items e.Items);
              }
            >;
        }
      >
    >;
}

RemoveNumber { (s.Number e.Name) = (e.Name); }

OutlineConstants {
  (s.NextFunc e.Funcs)
  (s.NextLabel e.Labels)
  (s.NextNumber e.Numbers)
  (s.NextString e.Strings)
  /* пусто */ =
    (#CmdFuncArray s.NextFunc <Map RemoveNumber e.Funcs>)
    (#CmdLabelArray s.NextLabel <Map RemoveNumber e.Labels>)
    (#CmdNumberArray s.NextNumber <Map { (s.Id s.Value) = s.Value; } e.Numbers>)
    (#CmdStringArray s.NextString <Map RemoveNumber e.Strings>);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdName s.Direction s.BracketNum s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdName s.Direction s.BracketNum s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdNameSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdNameSave s.Direction s.BracketNum s.SaveOffset s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElName s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElName s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdADT s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdADT s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdADTSave s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdIdent s.Direction s.BracketNum e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdIdent s.Direction s.BracketNum s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdIdent s.Direction s.BracketNum e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdIdent s.Direction s.BracketNum s.NextLabel);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdIdentSave s.Direction s.BracketNum s.SaveOffset s.NextLabel);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElIdent s.NextLabel);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdHugeNum s.Direction s.BracketNum s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdHugeNum s.Direction s.BracketNum s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdHugeNum s.Direction s.BracketNum s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdHugeNum s.Direction s.BracketNum s.NextNumId);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdHugeNumSave s.Direction s.BracketNum s.SaveOffset s.NextNumId);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.NextNumId);

  (e.Funcs) (e.Labels) (e.Numbers)
  (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElString s.Id);

  (e.Funcs) (e.Labels) (e.Numbers) (s.NextStringId e.Strings)
  e.Commands
  (#CmdCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (<Inc s.NextStringId> e.Strings (s.NextStringId e.String))
      e.Commands
    >
    (#CmdCreateElem s.CreateMode s.ElemNo #ElString s.NextStringId);

  (e.Funcs) (e.Labels) (e.Numbers)
  (s.NextStringId e.Strings-B (s.Id e.VarName) e.Strings-E)
  e.Commands
  (#CmdVariableDebugTable e.VarName s.Offset) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (s.NextStringId e.Strings-B (s.Id e.VarName) e.Strings-E)
      e.Commands
    >
    (#CmdVariableDebugTable s.Id s.Offset);

  (e.Funcs) (e.Labels) (e.Numbers)
  (s.NextStringId e.Strings)
  e.Commands
  (#CmdVariableDebugTable e.VarName s.Offset) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (<Inc s.NextStringId> e.Strings (s.NextStringId e.VarName))
      e.Commands
    >
    (#CmdVariableDebugTable s.NextStringId s.Offset);

  (e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  t.OtherCommand =
    <OutlineConstants (e.Funcs) (e.Labels) (e.Numbers) (e.Strings) e.Commands>
    t.OtherCommand;
}

PrepareOpenEStack {
  e.Commands =
    <Fetch
      e.Commands
      <Seq
        (MapReduce
          {
            (#CmdReserveBacktrackStack s.Depth) (#CmdEStart e.VarInfo) =
              (#CmdReserveBacktrackStack <Inc s.Depth>) (#CmdEStart e.VarInfo);

            (#CmdReserveBacktrackStack s.Depth) (#CmdOnFailGoTo s.Offset) =
              (#CmdReserveBacktrackStack <Inc s.Depth>) (#CmdOnFailGoTo s.Offset);

            (#CmdReserveBacktrackStack s.Depth) t.OtherCommand =
              (#CmdReserveBacktrackStack s.Depth) t.OtherCommand;
          }
          (#CmdReserveBacktrackStack 0)
        )
        {
          (#CmdReserveBacktrackStack 0) e.Commands^ =
            /* отбрасываем ненужную команду */
            e.Commands;

          (#CmdReserveBacktrackStack s.Depth) e.Commands^ =
            (#CmdReserveBacktrackStack s.Depth) e.Commands;
        }
      >
    >;
}

LowLevelRASL-Native {
  s.Hash1 s.Hash2 e.Items =
    <Fetch
      <Map (SetCookies s.Hash1 s.Hash2) e.Items>
      <Seq
        (MapReduce
          ClassifyItems-Native
          (/* объявления для генерации RASL’а */)
        )
        {
          (e.Declarations) /* нет нативных определений */ =
            /* нет нативного RASL’а */;

          (e.Declarations) e.Definitions =
            ((e.Declarations) (e.Definitions));
        }
      >
    >;
}

SetCookies {
  s.Hash1 s.Hash2
  (#Function-ToRASL s.ScopeClass (e.Name) e.Commands) =
    (#Function-ToRASL
      (<MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>)
      e.Commands
    );

  s.Hash1 s.Hash2
  (#Function-ToNative s.ScopeClass (e.Name) e.Commands) =
    (#Function-ToNative
      (<MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>)
      e.Commands
    );

  s.Hash1 s.Hash2
  (#CmdNativeFunction s.ScopeClass (e.Name) t.SrcPos e.Code) =
    (#CmdNativeFunction
      (<MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>)
      t.SrcPos e.Code
    );

  s.Hash1 s.Hash2 (#CmdEnum s.ScopeClass e.Name) =
    (#CmdEnum <MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>);

  s.Hash1 s.Hash2 (#CmdSwap s.ScopeClass e.Name) =
    (#CmdSwap <MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>);

  s.Hash1 s.Hash2 (#CmdDeclaration s.ScopeClass e.Name) =
    (#CmdDeclaration
      <MingleName s.ScopeClass e.Name s.Hash1 s.Hash2>
    );

  s.Hash1 s.Hash2 (#CmdDefineIdent e.Name) =
    (#CmdDefineIdent e.Name);

  s.Hash1 s.Hash2 (#CmdEmitNativeCode t.SrcPos e.Code) =
    (#CmdEmitNativeCode t.SrcPos e.Code);
}

MingleName {
  #GN-Entry e.Name s.Hash1 s.Hash2 = e.Name #Hash 0 0;
  #GN-Local e.Name s.Hash1 s.Hash2 = e.Name #Hash s.Hash1 s.Hash2;
}

ClassifyItems-Native {
  (e.Declarations)
  (#Function-ToRASL (e.Name) e.Commands) =
    (e.Declarations (#CmdExtern e.Name));

  (e.Declarations)
  (#Function-ToNative (e.Name) e.Body) =
    (e.Declarations (#CmdExtern e.Name))
    (#CmdFnStart e.Name)
    (#CmdProfileFunction)
    <ConvertDirectCommands e.Body>
    (#CmdFnEnd)
    (#CmdNativeFuncDescr e.Name);

  (e.Declarations)
  (#CmdNativeFunction (e.Name) t.SrcPos e.Code) =
    (e.Declarations (#CmdExtern e.Name))
    (#CmdFnStart e.Name)
    (#CmdEmitNativeCode t.SrcPos e.Code)
    (#CmdFnEnd)
    (#CmdNativeFuncDescr e.Name);

  (e.Declarations)
  (#CmdEnum e.Name) =
    (e.Declarations (#CmdExtern e.Name));

  (e.Declarations)
  (#CmdSwap e.Name) =
    (e.Declarations (#CmdExtern e.Name));

  (e.Declarations)
  (#CmdDeclaration e.Name) =
    (e.Declarations (#CmdExtern e.Name));

  (e.Declarations)
  (#CmdDefineIdent e.Name) =
    (e.Declarations (#CmdDefineIdent e.Name));

  (e.Declarations)
  (#CmdEmitNativeCode t.SrcPos e.Code) =
    (e.Declarations)
    (#CmdEmitNativeCode t.SrcPos e.Code);
}

ConvertDirectCommands {
  (#CmdSentence e.SubCommands) e.Tail =
    (#CmdStartSentence)
    <ConvertDirectCommands e.SubCommands>
    (#CmdEndSentence)
    <ConvertDirectCommands e.Tail>;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) e.Tail =
    (#CmdOpenedE-Start #AlgLeft s.BracketNum s.VarNumber)
    <ConvertDirectCommands e.SubCommands>
    (#CmdOpenedE-End #AlgLeft s.BracketNum s.VarNumber)
    <ConvertDirectCommands e.Tail>;

  (#CmdVariableDebugTable s.Mode e.Index s.Depth s.Offset) e.Tail =
    (#CmdComment
      'DEBUG: ' s.Mode '.' e.Index '#' <StrFromInt s.Depth>
      ': ' <StrFromInt s.Offset>
    )
    <ConvertDirectCommands e.Tail>;

  t.Command e.Tail = t.Command <ConvertDirectCommands e.Tail>;

  /* пусто */ = /* пусто */;
}
