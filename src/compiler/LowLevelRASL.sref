//FROM LibraryEx
$EXTERN Map, Fetch, Seq, MapReduce, Inc, Compare;

/**
  <LowLevelRASL s.GenMode e.RASLAST>
    == e.RASL

  s.GenMode ::= #OnlyDirect | #OnlyInterpret | #Both
*/
$ENTRY LowLevelRASL {
  s.GenMode e.ProgramElements =
    <Map
      {
        (#Function s.ScopeClass (e.Name) e.Commands) =
          <LowLevelRASL-Function
            s.GenMode s.ScopeClass (e.Name) e.Commands
          >;

        (#CmdEnum s.ScopeClass e.Name) =
          (#CmdEnum s.ScopeClass e.Name);

        (#CmdSwap s.ScopeClass e.Name) =
          (#CmdSwap s.ScopeClass e.Name);

        (#CmdDeclaration s.ScopeClass e.Name) =
          (#CmdDeclaration s.ScopeClass e.Name);

        (#CmdDefineIdent e.Name) = (#CmdDefineIdent e.Name);

        (#CmdSeparator) = (#CmdSeparator);
      }
      e.ProgramElements
    >;
}

LowLevelRASL-Function {
  s.GenMode s.ScopeClass (e.Name) (#CmdIssueMem s.Number) e.Commands =
    (#CmdFnStart s.ScopeClass e.Name)
    (#CmdIssueMem s.Number)
    <Fetch
      s.GenMode
      {
        #Both =
          // Интерпретируемый код
          (#CmdIfDef 'INTERPRET')
          <Function-Interpret e.Commands>
          (#CmdElse)
          // Компилируемый код
          <Function-Direct e.Commands>
          (#CmdEndIf);

        #OnlyDirect =
          // Компилируемый код
          <Function-Direct e.Commands>;

        #OnlyInterpret =
          // Интерпретируемый код
          <Function-Interpret e.Commands>;
      }
    >
    (#CmdFnEnd);
}

Function-Interpret {
  e.Commands =
    <PrepareOpenEStack
      <OutlineConstants
        (0 /* функции */)
        (0 /* идентификаторы */)
        (0 /* большие числа */)
        (0 /* строки */)
        (#CmdInitRAA)
        <PrepareInterpretCommands e.Commands>
        (#CmdFinRAA)
      >
      0 /* начальная глубина */
    >
    (#CmdiRunInterpret);
}

PrepareInterpretCommands {
  e.Commands =
    <ConvertInterpretCommands e.Commands>;
}

ConvertInterpretCommands {
  e.Commands = <Map ConvertOneInterpretCommand e.Commands>;
}

Length-T {
  e.Expr = <DoLength 0 e.Expr>;
}

DoLength {
  s.Count e.Expr (#CmdComment e.Text) =
    <DoLength s.Count e.Expr> (#CmdComment e.Text);

  s.Count e.Expr t.Last = <DoLength <Inc s.Count> e.Expr> t.Last;

  s.Count /* пусто */ = s.Count;
}

ConvertOneInterpretCommand {
  (#CmdComment e.Text) = (#CmdComment e.Text);

  (#CmdiOnFailGoTo s.Offset) = (#CmdiOnFailGoTo s.Offset);

  (#CmdInitB0) = (#CmdiInitB0);

  (#CmdInitB0-Lite) = (#CmdiInitB0-Lite);

  (#CmdChar s.Direction s.BracketNumber s.Char) =
    (#CmdiChar s.Direction s.BracketNumber s.Char);

  (#CmdCharSave s.Direction s.BracketNumber s.SaveOffset s.Char) =
    (#CmdiCharSave s.Direction s.BracketNumber s.SaveOffset s.Char);

  (#CmdNumber s.Direction s.BracketNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdiNum s.Direction s.BracketNumber s.Number);

        s.Other = (#CmdiHugeNum s.Direction s.BracketNumber s.Number);
      }
    >;

  (#CmdNumberSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' =
          (#CmdiNumSave s.Direction s.BracketNumber s.SaveOffset s.Number);

        s.Other =
          (#CmdiHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number);
      }
    >;

  (#CmdName s.Direction s.BracketNumber e.Name) =
    (#CmdiName s.Direction s.BracketNumber e.Name);

  (#CmdNameSave s.Direction s.BracketNumber s.SaveOffset e.Name) =
    (#CmdiNameSave s.Direction s.BracketNumber s.SaveOffset e.Name);

  (#CmdIdent s.Direction s.BracketNumber e.Name) =
    (#CmdiIdent s.Direction s.BracketNumber e.Name);

  (#CmdIdentSave s.Direction s.BracketNumber s.SaveOffset e.Name) =
    (#CmdiIdentSave s.Direction s.BracketNumber s.SaveOffset e.Name);

  (#CmdBrackets s.Direction s.Num s.NumRanges) =
    (#CmdiBracket s.Direction s.Num s.NumRanges);

  (#CmdBracketsSave s.Direction s.Num s.NumRanges) =
    (#CmdiBracketsSave s.Direction s.Num s.NumRanges);

  (#CmdADT s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (#CmdiADT s.Direction s.BracketNumber s.InnerBrackets e.Name);

  (#CmdADTSave s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (#CmdiADTSave s.Direction s.BracketNumber s.InnerBrackets e.Name);

  (#CmdCallSave s.Direction s.Num s.NumRanges) =
    (#CmdiCallSave s.Direction s.Num s.NumRanges);

  (#CmdEmpty #AlgLeft s.BracketNumber) =
    (#CmdiEmpty s.BracketNumber);

  (#CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (#CmdiVar s.Direction s.BracketNumber s.Mode s.VarNumber);

  (#CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (#CmdiVarSave s.Direction s.BracketNumber s.Mode s.VarNumber);

  (#CmdRepeated s.Direction s.BracketNumber s.Mode s.VarNum s.SampleNum) =
    (#CmdiRepeat s.Direction s.BracketNumber s.Mode s.VarNum s.SampleNum);

  (#CmdRepeatedSave s.Direction s.BracketNumber 't' s.VarNum s.SampleNum) =
    (#CmdiRepeatedSave s.Direction s.BracketNumber 't' s.VarNum s.SampleNum);

  (#CmdRepeatedSave s.Direction s.BracketNumber s.Mode s.VarNum s.SampleNum) =
    (#CmdiRepeat s.Direction s.BracketNumber s.Mode s.VarNum s.SampleNum);

  (#CmdiEPrepare s.BracketNum s.VarNumber) =
    (#CmdiEPrepare s.BracketNum s.VarNumber);

  (#CmdiEStart s.BracketNum s.VarNumber) =
    (#CmdiEStart s.BracketNum s.VarNumber);

  (#CmdSave s.OldBracketNumber s.NewBracketNumber) =
    (#CmdiSave s.OldBracketNumber s.NewBracketNumber);

  (#CmdEmptyResult) = (#CmdiEmptyResult);

  (#CmdResetAllocator) = (#CmdiEmptyResult);

  (#CmdSetRes s.Offset) = (#CmdiSetRes s.Offset);

  (#CmdCopyVar s.Mode s.Number s.Sample) =
    (#CmdArrCopy s.Mode s.Number s.Sample);

  (#CmdReinitSVar s.Offset s.Sample) = (#CmdiReinitSVar s.Offset s.Sample);

  (#CmdAllocateElem s.ElemNo #ElNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdiCreateElem #Allocate s.ElemNo #ElNumber s.Number);
        s.Other = (#CmdiCreateElem #Allocate s.ElemNo #ElHugeNumber s.Number);
      }
    >;

  (#CmdAllocateElem s.ElemNo s.Type e.Info) =
    (#CmdiCreateElem #Allocate s.ElemNo s.Type e.Info);

  (#CmdReinitElem s.ElemNo #ElNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdiCreateElem #Reinit s.ElemNo #ElNumber s.Number);
        s.Other = (#CmdiCreateElem #Reinit s.ElemNo #ElHugeNumber s.Number);
      }
    >;

  (#CmdReinitElem s.ElemNo s.Type e.Info) =
    (#CmdiCreateElem #Reinit s.ElemNo s.Type e.Info);

  (#CmdUpdateElem s.ElemNo #ElNumber s.Number) =
    <Fetch
      <Compare s.Number 256> {
        '<' = (#CmdiCreateElem #Update s.ElemNo #ElNumber s.Number);
        s.Other = (#CmdiCreateElem #Update s.ElemNo #ElHugeNumber s.Number);
      }
    >;

  (#CmdUpdateElem s.ElemNo s.Type e.Info) =
    (#CmdiCreateElem #Update s.ElemNo s.Type e.Info);

  (#CmdLinkBrackets s.Left s.Right) = (#CmdiLinkBrackets s.Left s.Right);

  (#CmdPushStack s.ElemNo) = (#CmdiPushStack s.ElemNo);

  (#CmdInsertElem s.ElemNo) = (#CmdSpliceElem s.ElemNo);

  (#CmdInsertVar s.Mode s.Number) = (#CmdArrSplice s.Mode s.Number);

  (#CmdInsertRange s.ElemNo) = (#CmdSpliceRange s.ElemNo);

  (#CmdInsertTile s.BeginOffset s.EndOffset) =
    (#CmdiInsertTile s.BeginOffset s.EndOffset);

  (#CmdReturnResult) = (#CmdiReturnResult);

  (#CmdUseRes) = /* пусто */;

  (#CmdReturnResult-NoTrash) = (#CmdiReturnResult-NoTrash);

  (#CmdTrash s.Offset) = (#CmdiTrash s.Offset);

  (#CmdFail) = (#CmdiFail);

  (#CmdSentence e.SubCommands) =
    <Fetch
      <Length-T
        <ConvertInterpretCommands e.SubCommands>
      >
      {
        s.Length e.SubCommands^ =
          (#CmdiOnFailGoTo s.Length)
          e.SubCommands;
      }
    >;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) =
    (#CmdiEPrepare s.BracketNum s.VarNumber)
    (#CmdiEStart s.BracketNum s.VarNumber)
    <ConvertInterpretCommands e.SubCommands>;
}

RemoveNumber { (s.Number e.Name) = (e.Name); }

OutlineConstants {
  (s.NextFunc e.Funcs)
  (s.NextLabel e.Labels)
  (s.NextNumber e.Numbers)
  (s.NextString e.Strings)
  /* пусто */ =
    (#CmdiFuncArray <Map RemoveNumber e.Funcs>)
    (#CmdiLabelArray <Map RemoveNumber e.Labels>)
    (#CmdiNumberArray <Map { (s.Id s.Value) = s.Value; } e.Numbers>)
    (#CmdiStringArray <Map RemoveNumber e.Strings>);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiName s.Direction s.BracketNum s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiName s.Direction s.BracketNum e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiName s.Direction s.BracketNum s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiNameSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiNameSave s.Direction s.BracketNum s.SaveOffset e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiNameSave s.Direction s.BracketNum s.SaveOffset s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElName s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElName e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElName s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiADT s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiADT s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiADT s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (s.NextFunc e.Funcs-B (s.Num e.Func) e.Funcs-E) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiADTSave s.Direction s.BracketNum s.InnerBrackets s.Num);

  (s.NextFunc e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiADTSave s.Direction s.BracketNum s.InnerBrackets e.Func) =
    <OutlineConstants
      (<Inc s.NextFunc> e.Funcs (s.NextFunc e.Func)) (e.Labels) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiADTSave s.Direction s.BracketNum s.InnerBrackets s.NextFunc);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiIdent s.Direction s.BracketNum e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiIdent s.Direction s.BracketNum s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiIdent s.Direction s.BracketNum e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiIdent s.Direction s.BracketNum s.NextLabel);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiIdentSave s.Direction s.BracketNum s.SaveOffset e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiIdentSave s.Direction s.BracketNum s.SaveOffset s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiIdentSave s.Direction s.BracketNum s.SaveOffset e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiIdentSave s.Direction s.BracketNum s.SaveOffset s.NextLabel);

  (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
  (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElIdent e.Label) =
    <OutlineConstants
      (e.Funcs) (s.NextLabel e.Labels-B (s.Num e.Label) e.Labels-E) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElIdent s.Num);

  (e.Funcs) (s.NextLabel e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElIdent e.Label) =
    <OutlineConstants
      (e.Funcs) (<Inc s.NextLabel> e.Labels (s.NextLabel e.Label)) (e.Numbers)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElIdent s.NextLabel);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdiHugeNum s.Direction s.BracketNum s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdiHugeNum s.Direction s.BracketNum s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdiHugeNum s.Direction s.BracketNum s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdiHugeNum s.Direction s.BracketNum s.NextNumId);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdiHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdiHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdiHugeNumSave s.Direction s.BracketNum s.SaveOffset s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdiHugeNumSave s.Direction s.BracketNum s.SaveOffset s.NextNumId);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
  (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (s.NextNumId e.Numbers-B (s.Id s.Number) e.Numbers-E)
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Id);

  (e.Funcs) (e.Labels) (s.NextNumId e.Numbers) (e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.Number) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (<Inc s.NextNumId> e.Numbers (s.NextNumId s.Number))
      (e.Strings)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElHugeNumber s.NextNumId);

  (e.Funcs) (e.Labels) (e.Numbers)
  (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (s.NextStringId e.Strings-B (s.Id e.String) e.Strings-E)
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElString s.Id);

  (e.Funcs) (e.Labels) (e.Numbers) (s.NextStringId e.Strings)
  e.Commands
  (#CmdiCreateElem s.CreateMode s.ElemNo #ElString e.String) =
    <OutlineConstants
      (e.Funcs) (e.Labels) (e.Numbers)
      (<Inc s.NextStringId> e.Strings (s.NextStringId e.String))
      e.Commands
    >
    (#CmdiCreateElem s.CreateMode s.ElemNo #ElString s.NextStringId);

  (e.Funcs) (e.Labels) (e.Numbers) (e.Strings)
  e.Commands
  t.OtherCommand =
    <OutlineConstants (e.Funcs) (e.Labels) (e.Numbers) (e.Strings) e.Commands>
    t.OtherCommand;
}

PrepareOpenEStack {
  (#CmdiEStart e.VarInfo) e.Commands s.Depth =
    (#CmdiEStart e.VarInfo) <PrepareOpenEStack e.Commands <Inc s.Depth>>;

  (#CmdiOnFailGoTo s.Offset) e.Commands s.Depth =
    (#CmdiOnFailGoTo s.Offset) <PrepareOpenEStack e.Commands <Inc s.Depth>>;

  t.OtherCommand e.Commands s.Depth =
    t.OtherCommand <PrepareOpenEStack e.Commands s.Depth>;

  s.Depth = (#CmdiReserveStack s.Depth);
}

Function-Direct {
  (#CmdSentence e.SubCommands) e.Tail =
    (#CmdStartSentence)
    <Function-Direct e.SubCommands>
    (#CmdEndSentence)
    <Function-Direct e.Tail>;

  (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber e.SubCommands) e.Tail =
    (#CmdOpenedE-Start #AlgLeft s.BracketNum s.VarNumber)
    <Function-Direct e.SubCommands>
    (#CmdOpenedE-End #AlgLeft s.BracketNum s.VarNumber)
    <Function-Direct e.Tail>;

  t.Command e.Tail = t.Command <Function-Direct e.Tail>;

  /* пусто */ = /* пусто */;
}
