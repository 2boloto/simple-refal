*$FROM R5-Utils
$EXTERN R5-Builtins;


/**
  <R5-Transform-Blocks t.Unit*> == t.Unit*
*/
$ENTRY R5-Transform-Blocks {
  e.Units = <Transform-Step UnBlock e.Units>;
}

/**
  <R5-Transform t.Unit*> == t.Unit*
*/
$ENTRY R5-Transform-Conditions {
  e.Units
    = <Transform-Step UnCondition e.Units>;
}

Transform-Step {
  s.FnMode e.Units
    = <Map (Transform-Step-Aux s.FnMode) e.Units>;
}

Transform-Step-Aux {
  s.FnMode (Function s.Scope (e.Name) Sentences e.Sentences)
    = <Mu s.FnMode (e.Name) s.Scope e.Sentences>;

  s.FnMode (Ident e.Name) = (Ident e.Name);

  s.FnMode (NativeBlock t.SrcPos e.Code) = (NativeBlock t.SrcPos e.Code);

  s.FnMode (s.EnumSwapDeclaration s.ScopeClass e.Name)
    = (s.EnumSwapDeclaration s.ScopeClass e.Name);
}

** НАМЕРЕННО ОТКАЗЫВАЕМСЯ ОТ ОТСЛЕЖИВАНИЯ КОПИРОВАНИЯ ПОВТОРНЫХ ПЕРЕМЕННЫХ

/**
  <UnBlock (e.Name) s.Scope e.Sentences>
    == e.NewFunctions
*/
UnBlock {
  (e.Name) s.Scope e.Sentences
    = <DoUnBlock
        (e.Name /* — имя текущей функции */) s.Scope
        (/* scanned functions */)
        (/* scanned sentences */)
        e.Sentences
        (/* unscanned functions */)
      >;
}

DoUnBlock {
  (e.Name) s.Scope
  (e.ScannedFunctions) (e.ScannedSentences)
  e.Sentences-B
  (e.SentencePrefix (e.BlockResult) (((e.BlockName) Sentences e.SubSentences)))
  e.Sentences-E
  (e.UnscannedFunctions)
    , <BlockScopeVars e.SentencePrefix> : e.ScopeVars
    = <DoUnBlock
        (e.Name) s.Scope
        (e.ScannedFunctions)
        (
          e.ScannedSentences
          e.Sentences-B
          (
            e.SentencePrefix
            ((CallBrackets (TkName e.BlockName) e.ScopeVars e.BlockResult))
            (/* нет блока */)
          )
        )
        e.Sentences-E
        (
          e.UnscannedFunctions
          (
            (e.BlockName)
            <Map
              (transformer_AddScopeVars e.ScopeVars) e.SubSentences
            >
          )
        )
      >;

  (e.Name) s.Scope
  (e.ScannedFunctions) (e.ScannedSentences) e.UnscannedSentences
  (e.UnscannedFunctions)
    = <DoUnBlock-NextFunction
        (
          e.ScannedFunctions
          (Function
            s.Scope (e.Name)
            Sentences e.ScannedSentences e.UnscannedSentences
          )
        )
        (e.UnscannedFunctions)
      >;
}

DoUnBlock-NextFunction {
  (e.ScannedFunctions)
  (((e.NextFunctionName) e.NextFunctionSentences) e.UnscannedFunctions)
    = <DoUnBlock
        (e.NextFunctionName) GN-Local
        (e.ScannedFunctions)
        (/* scanned sentences */)
        e.NextFunctionSentences
        (e.UnscannedFunctions)
      >;

  (e.ScannedFunctions) (/* пусто */) = e.ScannedFunctions;
}

BlockScopeVars {
  (e.Pattern) e.Conditions
    = <Map
        transformer_MakeVariables
        <ExtractVariables-Block ((e.Pattern) e.Conditions () ())>
      >;
}

transformer_MakeVariables {
  ('e' e.Index) = (Brackets (TkVariable 'e' e.Index));
  (s.VarType e.Index) = (TkVariable s.VarType e.Index);
}

transformer_AddScopeVars {
  e.ScopeVars ((e.Pattern) e.Tail) = ((e.ScopeVars e.Pattern) e.Tail);
}


/**
  <UnCondition (e.Name) s.Scope e.Sentences>
    == e.NewFunctions
*/
UnCondition {
  (e.Name) s.Scope e.Sentences
    = <DoUnCondition
        (e.Name /* — имя текущей функции */) s.Scope
        (/* scanned functions */)
        e.Sentences
        (/* unscanned functions */)
      >;
}

DoUnCondition {
  (e.Name) s.Scope
  (e.ScannedFunctions)
  e.Sentences-B (e.ConditionalSentence) e.Sentences-E
  (e.UnscannedFunctions)
    , <UnConditionSentence
        (e.ConditionalSentence) e.Sentences-E
      >
    : Success (e.TransformedSentences) e.NewFunctions
    = <DoUnCondition-NextFunction
        (
          e.ScannedFunctions
          (Function
            s.Scope (e.Name) Sentences e.Sentences-B e.TransformedSentences
          )
        )
        (e.UnscannedFunctions e.NewFunctions)
      >;

  (e.Name) s.Scope
  (e.ScannedFunctions) e.Sentences (e.UnscannedFunctions)
    = <DoUnCondition-NextFunction
        (
          e.ScannedFunctions
          (Function s.Scope (e.Name) Sentences e.Sentences)
        )
        (e.UnscannedFunctions)
      >;
}

DoUnCondition-NextFunction {
  (e.ScannedFunctions)
  (((e.NextFunctionName) e.NextFunctionSentences) e.UnscannedFunctions)
    = <DoUnCondition
        (e.NextFunctionName) GN-Local
        (e.ScannedFunctions)
        e.NextFunctionSentences
        (e.UnscannedFunctions)
      >;

  (e.ScannedFunctions) (/* пусто */) = e.ScannedFunctions
}

/**
  <UnConditionSentence (e.ConditionalSentence) e.ContinuationSentences>
    == Success (e.TransformedSentences) e.NewFunctions
    == Fails
*/
UnConditionSentence {
  (e.Sentence) e.ContinuationSentences
    , e.Sentence
    : {
        (e.Pattern)
        (Condition
          (e.ConditionName) (e.CondResult) (/* нет блоков */) t.CondPattern
        )
        e.Tail
          = Success
            <UnConditionSentence-Aux
              (e.ConditionName)
              (e.Sentence) e.ContinuationSentences
            >;

        (e.Pattern)
        (Assign
          (e.AssignName) t.AssignResult (/* нет блоков */) t.AssignPattern
        )
        e.Tail
          /* не интересны предложени с присваиваниями */
          = Fails;

        (e.Pattern) (e.Result) (/* нет блока */) = Fails;
      };
}

UnConditionSentence-Aux {
  (e.ConditionName) (e.Sentence) e.ContinuationSentences
    , <AnalyzeContinuation (e.ConditionName) e.ContinuationSentences>
    : t.ContName e.ContFunction
    , <ConditionSubFunctions (e.ConditionName) t.ContName e.Sentence>
    : (e.CallCheckSentence) e.SubFunctions
    = (
        (e.CallCheckSentence)
        <MakeContinuationSentence
          t.ContName ((TkVariable 'eOther' 0)) ((TkVariable 'eOther' 0))
        >
      )
      e.SubFunctions
      e.ContFunction;
}

/*
  Схема нумерации замыканий:
  ?0 - функция проверки,
  ?1 - функция продолжения (может отсутствовать)
  ?n, n - чётное, - функция forward,
  ?n, n - нечётное, - функция next.
*/

AnalyzeContinuation {
  (e.ConditionName) /* пусто */ = NoContinuation /* пусто */;

  (e.ConditionName) e.Sentences
    , e.ConditionName '?' 1 : e.ContName
    = (e.ContName) ((e.ContName) e.Sentences);
}

MakeContinuationSentence {
  NoContinuation (e.Pattern) (e.ContArg) = /* пусто */;

  (e.ContName) (e.Pattern) (e.ContArg)
    = (
        (e.Pattern)
        ((CallBrackets (TkName e.ContName) e.ContArg))
        (/* нет блоков */)
      );
}

PatternSteps {
  (e.UsedVariables) e.Pattern
    = <DoPatternSteps
        (e.UsedVariables) (/* bound variables */) (HOLE e.Pattern)
      >;
}

DoPatternSteps {
  t.UsedVariables (e.BoundEVariables) e.HolesAndItems
    , e.HolesAndItems
    : {
        /* Жёсткие элементы */
        e.HolesAndItems-B (HOLE t.Item e.Pattern) e.HolesAndItems-E
          , <HardItem (e.BoundEVariables) t.Item> : True
          = <DoPatternSteps
              t.UsedVariables (e.BoundEVariables)
              e.HolesAndItems-B t.Item (HOLE e.Pattern) e.HolesAndItems-E
            >;

        e.HolesAndItems-B (HOLE e.Pattern t.Item) e.HolesAndItems-E
          , <HardItem (e.BoundEVariables) t.Item> : True
          = <DoPatternSteps
              t.UsedVariables (e.BoundEVariables)
              e.HolesAndItems-B (HOLE e.Pattern) t.Item e.HolesAndItems-E
            >;

        /* Закрытая e-переменная */
        e.HolesAndItems-B (HOLE (TkVariable 'e' e.Index)) e.HolesAndItems-E
          = <DoPatternSteps
              t.UsedVariables (e.BoundEVariables (e.Index))
              e.HolesAndItems-B (TkVariable 'e' e.Index) e.HolesAndItems-E
            >;

         /* Пустая дырка */
         e.HolesAndItems-B (HOLE /* пусто */) e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables)
               e.HolesAndItems-B e.HolesAndItems-E
             >;

         /* Скобки */
         e.HolesAndItems-B
         (HOLE (Brackets e.InBrackets) e.Pattern)
         e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables)
               e.HolesAndItems-B
               (LeftBracket)
               (HOLE e.InBrackets)
               (RightBracket)
               (HOLE e.Pattern)
               e.HolesAndItems-E
             >;

         e.HolesAndItems-B
         (HOLE e.Pattern (Brackets e.InBrackets))
         e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables)
               e.HolesAndItems-B
               (HOLE e.Pattern)
               (LeftBracket)
               (HOLE e.InBrackets)
               (RightBracket)
               e.HolesAndItems-E
             >;

         /* Открытая e-переменная */
         e.HolesAndItems-B
         (HOLE (TkVariable 'e' e.Index) e.Pattern)
         e.HolesAndItems-E
           = <DoPatternSteps
               t.UsedVariables (e.BoundEVariables (e.Index))
               e.HolesAndItems-B
               (OpenE 'e' e.Index)
               (HOLE e.Pattern)
               e.HolesAndItems-E
             >
             (
               <Map
                 transformer_BindBrackets
                 <T1 t.UsedVariables e.HolesAndItems>
                 <T2 t.UsedVariables e.HolesAndItems>
                 <T3 t.UsedVariables e.HolesAndItems>
                 <T4 t.UsedVariables e.HolesAndItems>
                 <T5 t.UsedVariables e.HolesAndItems>
                 <T5-sub t.UsedVariables e.Index>
                 <T6 t.UsedVariables e.HolesAndItems>
                 <T7 t.UsedVariables e.HolesAndItems>
               >
             );

           /* Конец разбора */
           e.OnlyItems
             = (<transformer_BindBrackets <T0 e.OnlyItems>>);
      };
}

HardItem {
  (e.BoundEVariables) (TkIdentifier e.Compound) = True;
  (e.BoundEVariables) (TkNumber s.Number) = True;
  (e.BoundEVariables) (TkChar s.Char) = True;

  (e.BoundEVariables) (TkVariable 's' e.Index) = True;
  (e.BoundEVariables) (TkVariable 't' e.Index) = True;

  (e.BoundEVariables-B (e.Index) e.BoundEVariables-E)
  (TkVariable 'e' e.Index) = True;

  (e.BoundEVariables) (TkVariable 'e' e.Index) = False;
  (e.BoundEVariables) (Brackets e.Pattern) = False;
}

transformer_BindBrackets {
  (e.Expr) = (<DoBindBrackets ('$') e.Expr>);
}

DoBindBrackets {
  (t.MultiBracket e.Scanned) t.Symbol e.Tail
    , <Symbol t.Symbol> : True
    = <DoBindBrackets (t.MultiBracket e.Scanned t.Symbol) e.Tail>;

  (t.MultiBracket e.Scanned) (TkVariable s.Type e.Index) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (TkVariable s.Type e.Index)) e.Tail
      >;

  (t.MultiBracket e.Scanned) (OpenE s.Type e.Index) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (Brackets (TkVariable s.Type e.Index)))
        e.Tail
      >;

  (t.MultiBracket e.Scanned) (Brackets e.InBrackets) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (Brackets e.InBrackets)) e.Tail
      >;

  (t.MultiBracket e.Scanned) (LeftBracket) e.Tail
    = <DoBindBrackets ((t.MultiBracket e.Scanned)) e.Tail>;

  ((t.MultiBracket e.Scanned) e.InBrackets) (RightBracket) e.Tail
    = <DoBindBrackets
        (t.MultiBracket e.Scanned (Brackets e.InBrackets)) e.Tail
      >;

  ('$' e.Scanned) = e.Scanned;
}

/*
  Смысл функций T1…T7 поясняется в «Подход к преобразованию условий.md».
*/

T1 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarName t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarName t.UsedVars1 't' e.Index ('_next')> : t.UsedVars2 e.tX_next
    , <NewVarName t.UsedVars2 'e' e.Index ('_rest')> : t.UsedVars3 e.eX_rest
    = (
        e.Items
        (Brackets (TkVariable e.eX_fix))
        (TkVariable e.tX_next)
        (TkVariable e.eX_rest)
        <PassiveHoles t.UsedVars3 e.ItemsAndHoles>
      );
}

PassiveHoles {
  t.UsedVariables
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern)
  e.ItemsAndHoles
    , <NewVarName t.UsedVariables 'e' e.Index ('_rest')> : t.NewVars e.eX_rest
    = e.Items
      (TkVariable e.eX_rest)
      <PassiveHoles t.NewVars e.ItemsAndHoles>;

  t.UsedVariables e.Items = e.Items;
}

T2 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarName t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarName t.UsedVars1 't' e.Index ('_next')> : t.UsedVars2 e.tX_next
    , <NewVarName t.UsedVars2 'e' e.Index ('_rest')> : t.UsedVars3 e.eX_rest
    = (
        e.Items
        (Brackets (TkVariable e.eX_fix) (TkVariable e.tX_next))
        (TkVariable e.eX_rest)
        <PassiveHoles t.UsedVars3 e.ItemsAndHoles>
      );
}

T3 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarName t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    = (
        e.Items
        (Brackets (TkVariable e.eX_fix))
        <PassiveHoles t.UsedVars1 e.ItemsAndHoles>
      );
}

T4 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarName t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    = (
        e.Items (TkVariable e.eX_fix)
        <PassiveHoles t.UsedVars1 e.ItemsAndHoles>
      );
}

T5 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <T5-sub t.UsedVars e.Index> : (t.SourceVar t.eX_fix t.eX_var)
    = (
        e.Items (Brackets t.eX_fix) t.eX_var
        <Substitute
          e.Pattern <T5-UnHole e.ItemsAndHoles> (t.SourceVar t.eX_fix t.eX_var)
        >
      );
}

T5-UnHole {
  e.Items (HOLE e.Pattern) e.ItemsAndHoles
    = e.Items e.Pattern <T5-UnHole e.ItemsAndHoles>;

  e.Items = e.Items;
}

T5-sub {
  t.UsedVars e.Index
    , <NewVarName t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarName t.UsedVars 'e' e.Index ('_var')> : t.UsedVars2 e.eX_var
    = ((TkVariable 'e' e.Index) (TkVariable e.eX_fix) (TkVariable e.eX_var));
}

Substitute {
  (TkVariable s.Type e.Index) e.Tail ((TkVariable s.Type e.Index) e.Expr)
    = e.Expr
      <Substitute e.Tail ((TkVariable s.Type e.Index) e.Expr)>;

  (Brackets e.InBrackets) e.Tail (t.Variable e.Expr)
    = (Brackets <Substitute e.InBrackets (t.Variable e.Expr)>)
      <Substitute e.Tail (t.Variable e.Expr)>;

  (CallBrackets (TkName e.FuncName) e.InBrackets)
  e.Tail (t.Variable e.Expr)
    = (CallBrackets
        (TkName e.FuncName)
        <Substitute e.InBrackets (t.Variable e.Expr)>
      )
      <Substitute e.Tail (t.Variable e.Expr)>;

  t.OtherItem e.Tail (t.Variable e.Expr)
    = t.OtherItem <Substitute e.Tail (t.Variable e.Expr)>;

  /* пусто */ (t.Variable e.Expr)
    = /* пусто */;
}

T6 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarName t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarName t.UsedVars1 'e' e.Index ('_rest')> : t.UsedVars2 e.eX_rest
    = (
        e.Items
        (Brackets (TkVariable e.eX_fix))
        (TkVariable e.eX_rest)
        <PassiveHoles t.UsedVars2 e.ItemsAndHoles>
      );
}

T7 {
  t.UsedVars
  e.Items (HOLE (TkVariable 'e' e.Index) e.Pattern) e.ItemsAndHoles
    , <NewVarName t.UsedVars 'e' e.Index ('_fix')> : t.UsedVars1 e.eX_fix
    , <NewVarName t.UsedVars1 'e' e.Index ('_rest')> : t.UsedVars2 e.eX_rest
    = (
        e.Items
        (TkVariable e.eX_fix) (TkVariable e.eX_rest)
        <PassiveHoles t.UsedVars2 e.ItemsAndHoles>
      );
}

T0 {
  e.Items = (<DoT0 e.Items>);
}

DoT0 {
  (OpenE 'e' e.Index) e.Tail
    = (Brackets (TkVariable 'e' e.Index)) <DoT0 e.Tail>;

  (Brackets e.InBrackets) e.Tail = (Brackets <DoT0 e.InBrackets>) <DoT0 e.Tail>;

  t.OtherItem e.Tail = t.OtherItem <DoT0 e.Tail>;

  /* пусто */ = /* пусто */;
}

/**
  <ConditionSubFunctions (e.ConditionName) t.ContName e.Sentence>
    == e.SubFunctions
*/
ConditionSubFunctions {
  (e.ConditionName) t.ContName e.Sentence
    , e.Sentence
    : (e.Pattern)
      (Condition
        (e.ConditionName) (e.CondResult) (/* нет блоков */) (e.CondPattern)
      )
      e.SentenceTail
    , e.ConditionName '?' 0 : e.CheckFunction
    , <ExtractVariables-Condition (e.Sentence)> : e.SentenceVariables
    , <ConditionScopeVars (e.Pattern)> : e.PatternVarsAsExpr
    , <ConditionSubFunctions-Aux
        (e.ConditionName)  (e.SentenceVariables) t.ContName
        (e.CheckFunction) (e.PatternVarsAsExpr)
        (e.CondResult) (e.CondPattern) (e.SentenceTail)
        <PatternSteps (e.SentenceVariables) e.Pattern>
      >
    : e.SubFunctions
    = (
        (e.Pattern)
        (
          (CallBrackets
            (TkName e.CheckFunction) e.PatternVarsAsExpr e.CondResult
          )
        )
        (/* нет блока */)
      )
      e.SubFunctions;
}

ConditionScopeVars {
  (e.Pattern) e.Conditions
    = <Map
        transformer_MakeVariables
        <ExtractVariables-Condition ((e.Pattern) e.Conditions () ())>
      >;
}

ConditionSubFunctions-Aux {
  (e.ConditionName) (e.VarNames) t.ContName
  (e.CheckFunction) (e.PatternVarsAsExpr)
  (e.CondResult) (e.CondPattern) (e.CheckSentenceTail)
  e.PatternSteps
    , <OpenEChain
        (e.ConditionName) (e.VarNames) t.ContName (e.CheckFunction)
        (e.PatternVarsAsExpr) (e.CondResult)
        e.PatternSteps
      >
    : (e.ContSentence) e.OpenEFunctions
    = (
        (e.CheckFunction)
        ((e.PatternVarsAsExpr e.CondPattern) e.CheckSentenceTail)
        e.ContSentence
      )
      e.OpenEFunctions;
}

OpenEChain {
  (e.ConditionName) (e.VarNames) NoContinuation
  (e.CheckFunction) (e.PatternVarsAsExpr) (e.CondResult)
  ((e.T0)) /* пусто */
    = (/* пусто */) /* пусто */;

  (e.ConditionName) (e.VarNames) (e.ContName)
  (e.CheckFunction) (e.PatternVarsAsExpr) (e.CondResult)
  ((e.T0)) /* пусто */
    , <NewVarName (e.VarNames) 'e' 0 ('Other')> : (e.NewVarNames) e.eOther
    = (
        (
          (e.PatternVarsAsExpr (TkVariable e.eOther))
          ((CallBrackets (TkName e.ContName) e.T0)) (/* нет блоков */)
        )
      )
      /* пусто */;

  (e.ConditionName) (e.VarNames) t.ContName
  (e.CheckFunction) (e.PatternVarsAsExpr) (e.CondResult)
  ((e.T0)) e.Templates
    , e.ConditionName '?' 2 : e.NextForward
    , <DoOpenEChain
        (e.ConditionName) 2 (e.NextForward) t.ContName
        (e.CheckFunction) (e.PatternVarsAsExpr e.CondResult)
        (/* generated */) e.Templates
      >
    : e.NewFunctions
    , <NewVarName (e.VarNames) 'e' 0 ('Other')> : (e.NewVarNames) e.eOther
    = (
        (
          (e.PatternVarsAsExpr (TkVariable e.eOther))
          ((CallBrackets (TkName e.NextForward) e.T0)) (/* нет блоков */)
        )
      )
      e.NewFunctions;
}

DoOpenEChain {
  (e.ConditionName) s.CurrentForwardId (e.CurrentForward) t.ContName
  (e.CheckFunction) (e.CheckFunctionArg)
  (e.GeneratedFunctions) (e.TemplateSet) /* пусто */
    , <MakeOpenE-ForwardNext
        (e.ConditionName) s.CurrentForwardId (e.CurrentForward) t.ContName
        (e.CheckFunction) (e.CheckFunctionArg)
        e.TemplateSet
      >
    : e.NewFunctions
    = e.GeneratedFunctions e.NewFunctions;

  (e.ConditionName) s.CurrentForwardId (e.CurrentForward) t.ContName
  (e.CheckFunction) (e.CheckFunctionArg)
  (e.GeneratedFunctions) (e.TemplateSet) e.TemplateSets
    , <+ 2 s.CurrentForwardId> : s.NextForwardId
    , e.ConditionName '?' s.NextForwardId : e.NextForward
    , <MakeOpenE-ForwardNext
        (e.ConditionName) s.CurrentForwardId (e.CurrentForward) (e.NextForward)
        (e.CheckFunction) (e.CheckFunctionArg)
        e.TemplateSet
      >
    : e.NewFunctions
    = <DoOpenEChain
        (e.ConditionName) s.NextForwardId (e.NextForward) t.ContName
        (e.CheckFunction) (e.CheckFunctionArg)
        (e.GeneratedFunctions e.NewFunctions) e.TemplateSets
      >;
}

MakeOpenE-ForwardNext {
  (e.ConditionName) s.CurrentForwardId (e.CurrentForwardName) t.ContName
  (e.CheckFunction) (e.CheckFunctionArg)
  (e.T1) (e.T2) (e.T3) (e.T4) (e.T5) (e.T5-sub) (e.T6) (e.T7)
    , e.ConditionName '?' <+ 1 s.CurrentForwardId> : e.NextName
    = (
        (e.CurrentForwardName)
        (
          (e.T1)
          ((CallBrackets (TkName e.NextName) e.T2)) (/* нет блоков */)
        )
        <MakeContinuationSentence t.ContName (e.T3) (e.T4)>
      )
      (
        (e.NextName)
        (
          (e.T5)
          (
            (CallBrackets
              (TkName e.CheckFunction)
              <Substitute e.CheckFunctionArg (e.T5-sub)>
            )
          )
          (/* нет блоков */)
        )
        <MakeContinuationSentence t.ContName (e.T6) (e.T7)>
      );
}

ExtractVariables-Block {
  e.Sentences = <Unique <ExtractVariables-Sentences-Block e.Sentences>>;
}

ExtractVariables-Condition {
  e.Sentences = <Unique <ExtractVariables-Sentences-Condition e.Sentences>>;
}

Unique {
  e.Items-B t.Item e.Items-M t.Item e.Items-E
    = e.Items-B <Unique e.Items-M t.Item e.Items-E>;

  e.UniqueItems = e.UniqueItems;
}

ExtractVariables-Sentences-Block {
  ((e.Pattern) e.Tail) e.Sentences
    = <ExtractVariables-Expr e.Pattern>
      <ExtractVariables-Tail-Block e.Tail>
      <ExtractVariables-Sentences-Block e.Sentences>;

  /* пусто */ = /* пусто */;
}

ExtractVariables-Sentences-Condition {
  ((e.Pattern) e.Tail) e.Sentences
    = <ExtractVariables-Expr e.Pattern>
      <ExtractVariables-Tail-Condition e.Tail>
      <ExtractVariables-Sentences-Condition e.Sentences>;

  /* пусто */ = /* пусто */;
}

ExtractVariables-Tail-Block {
  (Condition (e.ConditionName) (e.Result) (/* нет блоков */) (e.Pattern)) e.Tail
    = <ExtractVariables-Expr e.Result>
      <ExtractVariables-Expr e.Pattern>
      <ExtractVariables-Tail-Block e.Tail>;

  (e.Result) (/* нет блоков */) = <ExtractVariables-Expr e.Result>;

  (e.Result) (((e.BlockName) Sentences e.Sentences))
    = <ExtractVariables-Expr e.Result>
      <ExtractVariables-Sentences-Block e.Sentences>;
}

ExtractVariables-Tail-Condition {
  (Condition (e.ConditionName) (e.Result) (/* нет блоков */) (e.Pattern)) e.Tail
    = <ExtractVariables-Expr e.Result>
      <ExtractVariables-Expr e.Pattern>
      <ExtractVariables-Tail-Condition e.Tail>;

  (e.Result) (/* нет блоков */) = <ExtractVariables-Expr e.Result>;

  (e.Result) (((e.BlockName) Sentences e.Sentences))
    = <ExtractVariables-Expr e.Result>
      <ExtractVariables-Sentences-Condition e.Sentences>;
}

ExtractVariables-Expr {
  (TkVariable s.VarType e.Index) e.Terms
    = (s.VarType e.Index) <ExtractVariables-Expr e.Terms>;

  (Brackets e.Inner) e.Terms = <ExtractVariables-Expr e.Inner e.Terms>;
  (CallBrackets (TkName e.Function) e.Inner) e.Terms
    = <ExtractVariables-Expr e.Inner e.Terms>;

  t.Other e.Terms = <ExtractVariables-Expr e.Terms>;

  /* пусто */ = /* пусто */;
}


NewVarName {
  (e.Names-B (e.Prefix e.Suffix s.Depth) e.Names-E) e.Prefix s.Depth (e.Suffix)
    = <DoNewVarName
        ((e.Prefix e.Suffix s.Depth) e.Names-B e.Names-E)
        e.Prefix e.Suffix s.Depth 0
      >;

  (e.Names) e.Prefix s.Depth (e.Suffix)
    = ((e.Prefix e.Suffix s.Depth) e.Names) e.Prefix e.Suffix s.Depth;
}

DoNewVarName {
  (e.Names) e.Prefix s.Depth s.SufNo
    , e.Prefix <Symb s.SufNo> s.Depth: e.NewName
    , e.Names
    : {
        e.Names-B (e.NewName) e.Names-E
          = <DoNewVarName
              ((e.NewName) e.Names-B e.Names-E) e.Prefix <+ s.SufNo 1>
            >;

        e.Names = ((e.NewName) e.Names) e.NewName;
      };
}

Symbol {
  (TkIdentifier e.Chars) = True;
  (TkNumber s.Number) = True;
  (TkChar s.Char) = True;
  t.Other = False;
}

/**
  <Apply t.Function e.Arg> == e.Res
  t.Function ::= s.FuncName | (t.Function e.Bounded)
*/
Apply {
  s.FuncName e.Arg = <Mu s.FuncName e.Arg>;

  (t.Function e.Bounded) e.Arg = <Apply t.Function e.Bounded e.Arg>;
}

/**
  <Map t.Function t.Item*> == <Apply t.Function t.Item>*
*/
Map {
  t.Function t.NextItem e.Items
    = <Apply t.Function t.NextItem> <Map t.Function e.Items>;

  t.Function /* пусто */ = /* пусто */;
}
