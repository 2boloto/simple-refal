//FROM LibraryEx
$EXTERN Map, Fetch, Seq, MapReduce, Inc, Compare, DelAccumulator;

//FROM HardSent
$EXTERN CreateHardPattern;

//FROM GlobalGen
$EXTERN CreateGlobalGen, SplitGen, Max, PatternComment, ReverseGen;

//FROM HighLevelRASL-GenResult-Simple
$EXTERN GenResult-Simple;

//FROM HighLevelRASL-GenSubst-Simple
$EXTERN GenInitSubst-Simple, GenSubst-Simple;

/**
  <HighLevelRASL e.AST>
    == e.RASLAST

  e.RASLAST ::= t.RASLFunction*
  t.RASLFunction ::=
      (#Function s.ScopeClass (e.Name) t.HiRASLCommand*)
    | (s.SingularItem s.ScopeClass e.Name)
    | (#Ident e.Name)
    | (#Separator)
  s.SingularItem ::= #Enum | #Swap | #Stub | #Declaration
  t.HiRASLCommand ::=
      (#Cmd… e.Value)
    | (#CmdSentence t.HiRASLCommand*)
    | (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber t.HiRASLCommand*)
*/
$ENTRY HighLevelRASL-OptPattern {
  e.ProgramElements =
    <Map
      {
        (#Function s.ScopeClass (e.Name) e.Sentences) =
          <HighLevelRASL-Function
            s.ScopeClass (e.Name) e.Sentences
          >;

        (#Enum s.ScopeClass e.Name) =
          (#CmdEnum s.ScopeClass e.Name);

        (#Swap s.ScopeClass e.Name) =
          (#CmdSwap s.ScopeClass e.Name);

        (#Stub s.ScopeClass e.Name) =
          /* пусто */;

        (#Declaration s.ScopeClass e.Name) =
          (#CmdDeclaration s.ScopeClass e.Name);

        (#Ident e.Name) = (#CmdDefineIdent e.Name);

        (#Separator) = (#CmdSeparator);
      }
      e.ProgramElements
    >;
}

ListLen {
  (s.Len) t.Elem e.ListTail =
    <ListLen (<Inc s.Len>) e.ListTail>;
  (s.Len) = s.Len;
}

HighLevelRASL-Function {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      <ListLen (0) e.Sentences>
      {
        0 = (#CmdEnum s.ScopeClass e.Name);
        1 = 
          <HighLevelRASL-OneFunction s.ScopeClass (e.Name) e.Sentences>;
        s.Else =
          <HighLevelRASL-MulFunction s.ScopeClass (e.Name) e.Sentences>;
      }
    >;
}

HighLevelRASL-OneFunction {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      e.Sentences
      <Seq
        {
          ((e.Pattern) (e.Result)) =
            (<HighLevelRASL-Sentence (e.Pattern) (e.Result)>);
        }
        (MapReduce
          {
            s.MaxMemory ((#CmdIssueMem s.Memory) e.Sentence) =
              <Fetch
                <Compare s.MaxMemory s.Memory> {
                  '<' = s.Memory;
                  s.Other = s.MaxMemory;
                }
              >
              (#CmdSentence e.Sentence);
          }
          0
        )
        {
          s.MaxMemory e.Sentences^ (#CmdSentence e.LastSentence) =
            (#Function
              s.ScopeClass (e.Name)
              (#CmdIssueMem s.MaxMemory)
              e.Sentences
              <Fetch
                e.LastSentence
                {
                  e.Commands (#CmdOpenELoop e.OpenELoop) =
                    e.Commands (#CmdOpenELoop e.OpenELoop) (#CmdFail);

                  e.LastSentence^ = e.LastSentence;
                }
              >
            );

          0 /* нет предложений */ =
            (#CmdEnum s.ScopeClass e.Name);
        }
      >
    >;
}

HighLevelRASL-Sentence {
  (e.Pattern) (e.Result) =
    <Fetch
      <GenPattern e.Pattern>
      {
        s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.PatternCommands =
          <Fetch
            <GenResult-Simple
              s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result
            >
            {
              s.ContextCount e.ResultCommands =
                <FoldOpenELoops
                  (#CmdIssueMem s.ContextCount)
                  e.PatternCommands
                  e.ResultCommands
                >;
            }
          >;
      }
    >;
}

HighLevelRASL-MulFunction {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      e.Sentences
      <Seq
        (MapReduce
          {
            (e.HardGens) ((e.Pattern) (e.Result)) =
              <Fetch
                <CreateHardPattern e.Pattern>
                {
                  e.HardGen =
                    (e.HardGens (e.HardGen))
                    ((<PatternComment e.HardGen>) (e.Result));
                }
              >;
          }
          (/* hard gens */)
        )
        {
          (e.HardPatterns) e.SentenceTails =
            <CreateGlobalGen e.HardPatterns> e.SentenceTails;
        }
        {
          (e.FastGen) (e.GlobalGen) e.SentenceTails =
            (
              (#CmdComment 'FAST GEN:' <PatternComment e.FastGen>)
              (#CmdComment 'GLOBAL GEN:' <PatternComment e.GlobalGen>)
            )
            (<SplitGen (e.GlobalGen) e.SentenceTails>)
            e.SentenceTails;
        }
        {
          (e.Comments) ((e.CommonPattern) e.SentSubsts) e.SentenceTails =
            (e.Comments)
            (<GenPattern <ReverseGen e.CommonPattern>>)
            <DelAccumulator
              <MapReduce
                {
                  ((e.Substitute) e.Substs) ((e.HardGenComment) (e.Result)) =
                    (e.Substs)
                    ((e.Substitute) (e.HardGenComment) (e.Result));
                }
                (e.SentSubsts) e.SentenceTails
              >
            >;
        }
        {
          (e.Comments)
          (s.ContextSize (e.Vars) (e.MarkedPattern) e.CommonMatchCommands)
          e.SentencesWithSubst =
            (e.Comments e.CommonMatchCommands)
            <MapReduce
              {
                s.MaxMemory ((e.Substitute) (e.HardGenComment) (e.Result)) =
                  <Fetch
                    <GenSentence s.ContextSize (e.Vars) (e.Substitute) (e.Result)>
                    {
                      (#CmdIssueMem s.Memory) e.Commands =
                        <Max s.MaxMemory s.Memory>
                        (#CmdSentence
                          (#CmdComment e.HardGenComment)
                          e.Commands
                        );
                    }
                  >;
              }
              s.ContextSize e.SentencesWithSubst
            >;
        }
        {
          (e.Prefix) s.MaxMemory e.Sentences^ (#CmdSentence e.LastSentence) =
            (#Function
              s.ScopeClass (e.Name)
              (#CmdIssueMem s.MaxMemory)
              e.Prefix
              e.Sentences
              <Fetch
                e.LastSentence
                {
                  e.Commands (#CmdOpenELoop e.OpenELoop) =
                    e.Commands (#CmdOpenELoop e.OpenELoop) (#CmdFail);
                  e.LastSentence^ = e.LastSentence;
                }
              >
            );

          (e.Prefix) 0 /* нет предложений */ =
            (#CmdEnum s.ScopeClass e.Name);
        }
      >
    >;
}

GenSentence {
  s.ContextSize (e.Vars) (e.Substitute) (e.Result) =
    <Fetch
      s.ContextSize (e.Vars) (e.Substitute) (e.Result)
      <Seq
        // 1. (e.Vars) (e.Substitute) => (e.PrepSubstitute)
        {
          e.Head (e.Vars) (e.Substitute) e.Tail =
            e.Head
            <ComposeVars (/* Scanned */) (e.Substitute) (e.Vars)>
            e.Tail;
        }
        // 2. #E #CmdSave — removed
        // 3. GenSubst-Simple
        // 3.1. GenResult-Simple
        {
          s.MaxMemory (e.Substitutes) (e.Result^) =
            <Fetch
              <GenSubst-Simple
                s.MaxMemory
                (#Junk)
                <Map
                  {
                    t.Subst = t.Subst (#Junk);
                  }
                  e.Substitutes
                >
                (/* commands */)
              >
              {
                s.ContextOffset (e.PatternVars) (e.MarkedPattern)
                e.PatternCommands =
                  <Fetch
                    <GenResult-Simple
                      s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result
                    >
                    {
                      s.ContextCount e.ResultCommands =
                        <FoldOpenELoops
                          (#CmdIssueMem <Max s.MaxMemory s.ContextCount>)
                          e.PatternCommands
                          e.ResultCommands
                        >;
                    }
                  >;
              }
            >;
        }
      >
    >;
}

ComposeVars {
  (e.Scanned)
  (e.Substitute-B (s.Tag (e.Name) '$' e.Subst) e.Substitute-E)
  (e.Vars-B (s.Mode (e.Name) s.Offset) e.Vars-E) =
    <ComposeVars
      (e.Scanned (s.Tag s.Offset e.Subst))
      (e.Substitute-B e.Substitute-E) (e.Vars-B e.Vars-E)
    >;
  (e.Scanned) () () = (e.Scanned);
}

FoldOpenELoops {
  e.Commands-B (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber) e.Commands-E =
    e.Commands-B
    (#CmdOpenELoop
      #AlgLeft s.BracketNum s.VarNumber
      <FoldOpenELoops e.Commands-E>
    );

  e.Commands = e.Commands;
}

/*
  e.Vars ::= (s.Count s.Mode e.Index)*
*/

//==============================================================================
// Генерация образца
//==============================================================================

/*
Команды распознавания
  Литералы, формат (#Cmd*** s.Direction s.BracketNum e.Literal)
  Скобки, формат (#CmdBrackets s.Direction s.BracketNum s.InnerNum)
  АТД, формат
    (#CmdADT s.Direction s.BracketNum s.InnerNum e.Name)
  Пустые скобки, формат (#CmdEmpty #AlgLeft s.BracketNum),
    направление добавлено для единнобразия, генератором не используется
  Переменные:
    повторные, формат
      (#CmdRepeated s.Direction s.BracketNum s.Mode s.VarNumber s.SampleNumber)
    новые s и t, формат (#CmdVar s.Direction s.BracketNum s.Mode s.VarNumber)
    открытые e:
      первоначальный формат (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber)
      после обработки:
        (#CmdOpenedE-Start #AlgLeft s.BracketNum 'e' e.Index)
        (#CmdOpenedE-End #AlgLeft s.BracketNum 'e' e.Index)
  Команды сохранения скобок
    (#CmdSave s.OldNumber e.NewNumber)
  Комментарий, вносимый в исходный код (#CmdComment e.Text)
*/

GenPattern {
  e.Pattern =
    <Fetch
      <GenInitSubst-Simple 'funcname'>
      {
        s.B0-Offset s.ContextTop
        (#Junk e.JunkLeft) (#Junk e.JunkRight) e.InitCommands =
          <GenSubst-Simple
            s.ContextTop
            (#Junk e.JunkLeft) (#E s.B0-Offset e.Pattern) (#Junk e.JunkRight)
            (e.InitCommands)
          >;
      }
    >;
}
