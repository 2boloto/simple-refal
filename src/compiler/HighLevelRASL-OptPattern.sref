//FROM LibraryEx
$EXTERN Map, Fetch, Seq, MapReduce, Inc, Dec, Compare, Sort, DelAccumulator;

//FROM Library
$EXTERN Add, StrFromInt;

//FROM Escape
$EXTERN EscapeChar;

//FROM HardSent
$EXTERN CreateHardPattern;

//FROM GlobalGen
$EXTERN CreateGlobalGen, SplitGen, Max, PatternComment, ReverseGen;

/**
  <HighLevelRASL e.AST>
    == e.RASLAST

  e.RASLAST ::= t.RASLFunction*
  t.RASLFunction ::=
      (#Function s.ScopeClass (e.Name) t.HiRASLCommand*)
    | (s.SingularItem s.ScopeClass e.Name)
    | (#Ident e.Name)
    | (#Separator)
  s.SingularItem ::= #Enum | #Swap | #Stub | #Declaration
  t.HiRASLCommand ::=
      (#Cmd… e.Value)
    | (#CmdSentence t.HiRASLCommand*)
    | (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber t.HiRASLCommand*)
*/
$ENTRY HighLevelRASL-OptPattern {
  e.ProgramElements =
    <Map
      {
        (#Function s.ScopeClass (e.Name) e.Sentences) =
          <HighLevelRASL-Function
            s.ScopeClass (e.Name) e.Sentences
          >;

        (#Enum s.ScopeClass e.Name) =
          (#CmdEnum s.ScopeClass e.Name);

        (#Swap s.ScopeClass e.Name) =
          (#CmdSwap s.ScopeClass e.Name);

        (#Stub s.ScopeClass e.Name) =
          /* пусто */;

        (#Declaration s.ScopeClass e.Name) =
          (#CmdDeclaration s.ScopeClass e.Name);

        (#Ident e.Name) = (#CmdDefineIdent e.Name);

        (#Separator) = (#CmdSeparator);
      }
      e.ProgramElements
    >;
}

ListLen {
  (s.Len) t.Elem e.ListTail =
    <ListLen (<Inc s.Len>) e.ListTail>;
  (s.Len) = s.Len;
}

HighLevelRASL-Function {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      <ListLen (0) e.Sentences>
      {
        0 = (#CmdEnum s.ScopeClass e.Name);
        1 = 
          <HighLevelRASL-OneFunction s.ScopeClass (e.Name) e.Sentences>;
        s.Else =
          <HighLevelRASL-MulFunction s.ScopeClass (e.Name) e.Sentences>;
      }
    >;
}

HighLevelRASL-OneFunction {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      e.Sentences
      <Seq
        {
          ((e.Pattern) (e.Result)) =
            (<HighLevelRASL-Sentence (e.Pattern) (e.Result)>);
        }
        (MapReduce
          {
            s.MaxMemory ((#CmdIssueMem s.Memory) e.Sentence) =
              <Fetch
                <Compare s.MaxMemory s.Memory> {
                  '<' = s.Memory;
                  s.Other = s.MaxMemory;
                }
              >
              (#CmdSentence e.Sentence);
          }
          0
        )
        {
          s.MaxMemory e.Sentences^ (#CmdSentence e.LastSentence) =
            (#Function
              s.ScopeClass (e.Name)
              (#CmdIssueMem s.MaxMemory)
              e.Sentences
              <Fetch
                e.LastSentence
                {
                  e.Commands (#CmdOpenELoop e.OpenELoop) =
                    e.Commands (#CmdOpenELoop e.OpenELoop) (#CmdFail);

                  e.LastSentence^ = e.LastSentence;
                }
              >
            );

          0 /* нет предложений */ =
            (#CmdEnum s.ScopeClass e.Name);
        }
      >
    >;
}

HighLevelRASL-Sentence {
  (e.Pattern) (e.Result) =
    <Fetch
      <GenPattern e.Pattern>
      {
        s.ContextOffset (e.PatternVars) e.PatternCommands =
          <Fetch
            <GenResult s.ContextOffset (e.PatternVars) e.Result>
            {
              s.ContextCount e.ResultCommands =
                <FoldOpenELoops
                  (#CmdIssueMem s.ContextCount)
                  (#CmdInitB0)
                  e.PatternCommands
                  e.ResultCommands
                >;
            }
          >;
      }
    >;
}

HighLevelRASL-MulFunction {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      e.Sentences
      <Seq
        (MapReduce
          {
            (e.HardGens) ((e.Pattern) (e.Result)) =
              <Fetch
                <CreateHardPattern e.Pattern>
                {
                  e.HardGen =
                    (e.HardGens (e.HardGen))
                    ((<PatternComment e.HardGen>) (e.Result));
                }
              >;
          }
          (/* hard gens */)
        )
        {
          (e.HardPatterns) e.SentenceTails =
            <CreateGlobalGen e.HardPatterns> e.SentenceTails;
        }
        {
          (e.FastGen) (e.GlobalGen) e.SentenceTails =
            (
              (#CmdComment 'FAST GEN:' <PatternComment e.FastGen>)
              (#CmdComment 'GLOBAL GEN:' <PatternComment e.GlobalGen>)
            )
            (<SplitGen (e.GlobalGen) e.SentenceTails>)
            e.SentenceTails;
        }
        {
          (e.Comments) ((e.CommonPattern) e.SentSubsts) e.SentenceTails =
            (e.Comments)
            (<GenPattern <ReverseGen e.CommonPattern>>)
            <DelAccumulator
              <MapReduce
                {
                  ((e.Substitute) e.Substs) ((e.HardGenComment) (e.Result)) =
                    (e.Substs)
                    ((e.Substitute) (e.HardGenComment) (e.Result));
                }
                (e.SentSubsts) e.SentenceTails
              >
            >;
        }
        {
          (e.Comments^) (s.ContextSize (e.Vars) e.CommonMatchCommands) e.SentencesWithSubst =
            (e.Comments e.CommonMatchCommands)
            <MapReduce
              {
                s.MaxMemory ((e.Substitute) (e.HardGenComment) (e.Result)) =
                  <Fetch
                    <GenSentence s.ContextSize (e.Vars) (e.Substitute) (e.Result)>
                    {
                      (#CmdIssueMem s.Memory) e.Commands =
                        <Max s.MaxMemory s.Memory>
                        (#CmdSentence
                          (#CmdComment e.HardGenComment)
                          e.Commands
                        );
                    }
                  >;
              }
              s.ContextSize e.SentencesWithSubst
            >;
        }
        {
          (e.Prefix) s.MaxMemory e.Sentences^ (#CmdSentence e.LastSentence) =
            (#Function
              s.ScopeClass (e.Name)
              (#CmdIssueMem s.MaxMemory)
                          (#CmdInitB0)
              e.Prefix
              e.Sentences
              <Fetch
                e.LastSentence
                {
                  e.Commands (#CmdOpenELoop e.OpenELoop) =
                    e.Commands (#CmdOpenELoop e.OpenELoop) (#CmdFail);
                  e.LastSentence^ = e.LastSentence;
                }
              >
            );

          (e.Prefix) 0 /* нет предложений */ =
            (#CmdEnum s.ScopeClass e.Name);
        }
      >
    >;
}

GenSentence {
  s.ContextSize (e.Vars) (e.Substitute) (e.Result) =
    <Fetch
      s.ContextSize (e.Vars) (e.Substitute) (e.Result)
      <Seq
        // 1. (e.Vars) (e.Substitute) => (e.PrepSubstitute)
        {
          e.Head (e.Vars) (e.Substitute) e.Tail =
            e.Head
            <ComposeVars (/* Scanned */) (e.Substitute) (e.Vars)>
            e.Tail;
        }
        // 2. #E #CmdSave — removed
        // 3. GenPattern-New
        // 3.1. GenResult
        {
          s.MaxMemory (e.Substitutes) (e.Result^) =
            <Fetch
              <GenPattern-New s.MaxMemory (e.Substitutes)>
              {
                s.ContextOffset (e.PatternVars) e.PatternCommands =
                  <Fetch
                    <GenResult s.ContextOffset (e.PatternVars) e.Result>
                    {
                      s.ContextCount e.ResultCommands =
                        <FoldOpenELoops
                          (#CmdIssueMem <Max s.MaxMemory s.ContextCount>)
                          e.PatternCommands
                          e.ResultCommands
                        >;
                    }
                  >;
              }
            >;
        }
      >
    >;
}

ComposeVars {
  (e.Scanned)
  (e.Substitute-B (s.Tag (e.Name) '$' e.Subst) e.Substitute-E)
  (e.Vars-B (s.Mode (e.Name) s.Offset) e.Vars-E) =
    <ComposeVars
      (e.Scanned (s.Tag s.Offset e.Subst))
      (e.Substitute-B e.Substitute-E) (e.Vars-B e.Vars-E)
    >;
  (e.Scanned) () () = (e.Scanned);
}

FoldOpenELoops {
  e.Commands-B (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber) e.Commands-E =
    e.Commands-B
    (#CmdOpenELoop
      #AlgLeft s.BracketNum s.VarNumber
      <FoldOpenELoops e.Commands-E>
    );

  e.Commands = e.Commands;
}

/*
  e.Vars ::= (s.Count s.Mode e.Index)*
*/

//==============================================================================
// Генерация образца
//==============================================================================

/*
Команды распознавания
  Литералы, формат (#Cmd*** s.Direction s.BracketNum e.Literal)
  Скобки, формат (#CmdBrackets s.Direction s.BracketNum s.InnerNum)
  АТД, формат
    (#CmdADT s.Direction s.BracketNum s.InnerNum e.Name)
  Пустые скобки, формат (#CmdEmpty #AlgLeft s.BracketNum),
    направление добавлено для единнобразия, генератором не используется
  Переменные:
    повторные, формат
      (#CmdRepeated s.Direction s.BracketNum s.Mode s.VarNumber s.SampleNumber)
    новые s и t, формат (#CmdVar s.Direction s.BracketNum s.Mode s.VarNumber)
    открытые e:
      первоначальный формат (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber)
      после обработки:
        (#CmdOpenedE-Start #AlgLeft s.BracketNum 'e' e.Index)
        (#CmdOpenedE-End #AlgLeft s.BracketNum 'e' e.Index)
  Команды сохранения скобок
    (#CmdSave s.OldNumber e.NewNumber)
  Комментарий, вносимый в исходный код (#CmdComment e.Text)
*/

GenPattern {
  e.Pattern =
    <GenPattern-New 2 ((#E 0 e.Pattern))>;
}

GenPattern-New {
  s.MaxMemory (e.Substitutes) =
    <DoGenPattern
      s.MaxMemory e.Substitutes (/* vars */) (/* commands */)
    >;
}

Inc2 {
  s.Num = <Add 2 s.Num>;
}

DoGenPattern {
  // Распознавание Т-подстановки
  s.ContextOffset
  e.Substs-B (#T s.Num (#TkChar s.Char)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgTerm s.Num s.Char))
    >;
  s.ContextOffset
  e.Substs-B (#T s.Num (#TkName e.Name)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgTerm s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkIdentifier e.Ident)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgTerm s.Num e.Ident))
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkNumber s.Value)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgTerm s.Num s.Value))
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#Brackets e.SubRange)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B (#E s.ContextOffset e.SubRange) e.Substs-E
      (e.Vars) (e.Commands (#CmdBrackets #AlgTerm s.Num s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#ADT-Brackets (e.Name) e.SubRange)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B (#E s.ContextOffset e.SubRange) e.Substs-E
      (e.Vars) (e.Commands (#CmdADT #AlgTerm s.Num s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkVariable s.Mode e.Index)) e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.Num)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgTerm s.Num s.Mode s.Num s.SampleOffset)
      )
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkVariable 't' e.Index)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (e.Vars ('t' (e.Index) s.Num)) (e.Commands)
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkVariable 's' e.Index)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (e.Vars ('s' (e.Index) s.Num))
      (e.Commands (#CmdVar #AlgTerm s.Num 's' s.ContextOffset))
    >;

  // Распознавание S-подстановки
  s.ContextOffset
  e.Substs-B (#S s.Num (#TkChar s.Char)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgTerm s.Num s.Char))
    >;
  s.ContextOffset
  e.Substs-B (#S s.Num (#TkName e.Name)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgTerm s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B (#S s.Num (#TkIdentifier e.Ident)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgTerm s.Num e.Ident))
    >;

  s.ContextOffset
  e.Substs-B (#S s.Num (#TkNumber s.Value)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgTerm s.Num s.Value))
    >;

  s.ContextOffset
  e.Substs-B (#S s.Num (#TkVariable s.Mode e.Index)) e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.Num)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgTerm s.Num s.Mode s.Num s.SampleOffset)
      )
    >;

  s.ContextOffset
  e.Substs-B (#S s.Num (#TkVariable 's' e.Index)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (e.Vars ('s' (e.Index) s.Num)) (e.Commands)
    >;

  // Распознавание литералов (символьных, целочисленных, имён)
  s.ContextOffset
  e.Substs-B (#E s.Num (#TkChar s.Char) e.Range) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgLeft s.Num s.Char))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkNumber s.Number) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgLeft s.Num s.Number))
    >;

  s.ContextOffset
  e.Substs-B (#E s.Num (#TkName e.Name) e.Range) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#E s.Num e.Range) e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgLeft s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkIdentifier e.Name) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars)
      (e.Commands
        (#CmdComment #CmdIdent #AlgLeft s.Num e.Name)
        (#CmdIdent #AlgLeft s.Num e.Name)
      )
    >;

  s.ContextOffset
  e.Substs-B (#E s.Num e.Range (#TkChar s.Char)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars)
      (
        e.Commands
        (#CmdComment #CmdChar #AlgRight s.Num '' <EscapeChar s.Char> '')
        (#CmdChar #AlgRight s.Num s.Char)
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkNumber s.Number))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgRight s.Num s.Number))
    >;

  s.ContextOffset
  e.Substs-B (#E s.Num e.Range (#TkName e.Name)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgRight s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkIdentifier e.Name))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgRight s.Num e.Name))
    >;

  // Распознавание скобок
  s.ContextOffset
  e.Substs-B
  (#E s.Num (#Brackets e.SubRange) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.ContextOffset e.SubRange)
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars)
      (
        e.Commands
        (#CmdComment #CmdBrackets s.Num s.ContextOffset)
        (#CmdBrackets #AlgLeft s.Num s.ContextOffset)
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#Brackets e.SubRange))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      (#E s.ContextOffset e.SubRange)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdBrackets #AlgRight s.Num s.ContextOffset))
    >;

  // Распознавание АТД-скобок
  s.ContextOffset
  e.Substs-B
  (#E s.Num (#ADT-Brackets (e.Name) e.SubRange) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.ContextOffset e.SubRange)
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars)
      (e.Commands (#CmdADT #AlgLeft s.Num s.ContextOffset e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#ADT-Brackets (e.Name) e.SubRange))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      (#E s.ContextOffset e.SubRange)
      e.Substs-E
      (e.Vars)
      (e.Commands (#CmdADT #AlgRight s.Num s.ContextOffset e.Name))
    >;

  // Пустой диапазон
  s.ContextOffset
  e.Substs-B
  (#E s.Num /* пусто */)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdEmpty #AlgLeft s.Num))
    >;

  // Распознавание переменных
  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable s.Mode e.Index) e.Range)
  e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      <IncVarOffset s.ContextOffset s.Mode>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.ContextOffset)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgLeft s.Num s.Mode s.ContextOffset s.SampleOffset)
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable s.Mode e.Index))
  e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      <IncVarOffset s.ContextOffset s.Mode>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.ContextOffset)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgRight s.Num s.Mode s.ContextOffset s.SampleOffset)
      )
    >;

  // Диапазон с закрытой переменной
  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable 'e' e.Index))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      e.Substs-E
      (e.Vars ('e' (e.Index) s.Num))
      (e.Commands
        (#CmdComment
          ' closed ' <PrintVar 'e' e.Index> ' as range ' #Offset s.Num
        )
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable 's' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('s' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgLeft s.Num 's' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable 's' e.Index))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('s' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgRight s.Num 's' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable 't' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('t' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgLeft s.Num 't' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable 't' e.Index))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('t' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgRight s.Num 't' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable 'e' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('e' (e.Index) s.ContextOffset))
      (e.Commands (#CmdOpenedE #AlgLeft s.Num s.ContextOffset))
    >;

  // Завершение разбора.
  s.ContextOffset (e.Vars) (e.Commands) =
    s.ContextOffset (e.Vars) e.Commands;
}

IncVarOffset {
  s.ContextOffset 'e' = <Inc2 s.ContextOffset>;
  s.ContextOffset 't' = <Inc s.ContextOffset>;
  s.ContextOffset 's' = <Inc s.ContextOffset>;
}

TextFromPattern {
  (#TkOpenBracket) e.Tail = ' (' <TextFromPattern e.Tail>;
  (#TkCloseBracket) e.Tail = ' )' <TextFromPattern e.Tail>;

  (#TkOpenADT) (#TkName e.Name) e.Tail = ' [' e.Name <TextFromPattern e.Tail>;
  (#TkCloseADT) e.Tail = ' ]' <TextFromPattern e.Tail>;

  (#TkChar s.Char) e.Tail =
    ' ' '' <TextFromPattern-Char (#TkChar s.Char) e.Tail>;

  (#TkNumber s.Number) e.Tail =
    ' ' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (#TkName e.Name) e.Tail =
    ' & ' e.Name <TextFromPattern e.Tail>;

  (#TkVariable s.Mode e.Index s.Depth s.Offset) e.Tail =
    ' ' <PrintVar s.Mode e.Index s.Depth> '/' #Offset s.Offset
    <TextFromPattern e.Tail>;

  (#TkIdentifier e.Name) e.Tail =
    ' # ' e.Name <TextFromPattern e.Tail>;

  = ;
}

PrintVar {
  s.Mode e.Index s.Depth = s.Mode '.' e.Index '#' <StrFromInt s.Depth>;
}

Escape {
  s.Char = <EscapeChar s.Char>;
}

TextFromPattern-Char {
  (#TkChar s.Char) e.Tail =
    <Escape s.Char> <TextFromPattern-Char e.Tail>;

  e.Other = '' <TextFromPattern e.Other>;
}

//==============================================================================
// Генерация результата
//==============================================================================

GenResult {
  s.ContextOffset (e.PatternVars) e.Result =
    <Fetch
      <DoGenResult
        (
          <Map
            {
              (s.Mode (e.Index) e.Offsets) = (s.Mode (e.Index) () e.Offsets);
            }
            e.PatternVars
          >
        )
        (/* alloc commands */) (/* other commands */)
        s.ContextOffset // счётчик новых элементов
        <CollectStrings e.Result>
      >
      {
        s.ContextOffset^ (e.CommonVars) e.ResultCommands =
          s.ContextOffset
          <MakeVariableCommentTable e.CommonVars>
          (#CmdEmptyResult)
          e.ResultCommands
          (#CmdReturnResult);
      }
    >;
}

CollectStrings {
  (#TkChar s.Value1) (#TkChar s.Value2) e.Tail =
    <Fetch
      <BuildString (s.Value1 s.Value2) e.Tail>
      {
        (e.Chars) e.Tail^ = (#TkString e.Chars) <CollectStrings e.Tail>;
      }
    >;

  (#Brackets e.InBrackets) e.Tail =
    (#Brackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  (#CallBrackets e.InBrackets) e.Tail =
    (#CallBrackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  (#ADT-Brackets e.InBrackets) e.Tail =
    (#ADT-Brackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  t.OtherTerm e.Tail = t.OtherTerm <CollectStrings e.Tail>;

  /* пусто */ = /* пусто */;
}

BuildString {
  (e.Chars) (#TkChar s.Value) e.Tail =
    <BuildString (e.Chars s.Value) e.Tail>;

  (e.Chars) e.Tail = (e.Chars) e.Tail;
}

// Основные команды работы с результатом
//  (#CmdAllocateElem s.Number s.ElType e.Info)
//  (#CmdLinkBrackets s.Left s.Right)
//  (#CmdPushStack s.Number)
//  (#CmdInsertElem s.Number)
//  (#CmdInsertVar s.Mode s.Number)

/*
  Порядок выполнения команд.
  1. Все выделения памяти (в порядке перечисления)
  2. Связывание крулых и угловых скобок и
  построение результата (в обратном порядке)
*/

DoGenResult {
  // Создаём литералы
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter (#TkChar s.Value) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElChar s.Value))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter (#TkName e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElName e.Name))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkNumber s.Number) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElNumber s.Number))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkIdentifier e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElIdent e.Name))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkString e.Chars) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElString e.Chars))
      ((#CmdInsertRange s.Counter) e.Commands)
      <Add s.Counter 2> e.Result
    >;

  /*
    Обработка открывающих скобок всех трёх типов осуществляется похоже.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#Brackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElOpenBracket))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (#TkCloseBracket s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#CallBrackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElOpenCall))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (#CloseCall s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#ADT-Brackets (e.Name) e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElOpenADT))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter>
      (#TkName e.Name) e.InBrackets (#TkCloseADT s.Counter) e.Result
    >;

  /*
    Закрывающие скобки надо обрабатывать особым образом.
    Круглые скобки и АТД -- слинковать, угловые -- добавить в стек.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkCloseBracket s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElCloseBracket))
      (
        (#CmdLinkBrackets s.OpenCounter s.Counter)
        (#CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkCloseADT s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElCloseADT))
      (
        (#CmdLinkBrackets s.OpenCounter s.Counter)
        (#CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#CloseCall s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElCloseCall))
      (
        (#CmdPushStack s.Counter)
        (#CmdPushStack s.OpenCounter)
        (#CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  // Обработка переменных
  (
    e.Vars-B
    (s.Mode (e.Index) (e.ResultVars) s.NextPatternVar e.PatternVars)
    e.Vars-E
  )
  (e.AllocCommands) (e.Commands)
  s.Counter (#TkVariable s.Mode e.Index) e.Result =
    <DoGenResult
      (
        e.Vars-B
        (s.Mode (e.Index) (e.ResultVars s.NextPatternVar) e.PatternVars)
        e.Vars-E
      )
      (e.AllocCommands)
      ((#CmdInsertVar s.Mode s.NextPatternVar) e.Commands)
      s.Counter e.Result
    >;

  (e.Vars-B (s.Mode (e.Index) (e.ResultVars s.Sample)) e.Vars-E)
  (e.AllocCommands) (e.Commands)
  s.Counter (#TkVariable s.Mode e.Index) e.Result =
    <DoGenResult
      (e.Vars-B (s.Mode (e.Index) (e.ResultVars s.Sample s.Counter)) e.Vars-E)
      (e.AllocCommands (#CmdCopyVar s.Mode s.Counter s.Sample))
      ((#CmdInsertVar s.Mode s.Counter) e.Commands)
      <IncVarOffset s.Counter s.Mode> e.Result
    >;

  // Завершение просмотра
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter =
    s.Counter (e.Vars) e.AllocCommands e.Commands;
}

MakeVariableCommentTable {
  e.Vars =
    <Fetch
      e.Vars
      <Seq
        (Map ReplicateVar)
        Sort
        (Map MakeVariableComment)
      >
    >;
}

ReplicateVar {
  (s.Mode (e.Index) (e.ResultOccurences) e.PatternOccurences) =
    <Map
      {
        s.ContextOffset = (s.ContextOffset s.Mode e.Index);
      }
      e.ResultOccurences e.PatternOccurences
    >;
}

MakeVariableComment {
  (s.Offset s.Mode e.Index s.Depth) =
    (#CmdComment
      #Offset s.Offset ': ' <PrintVar s.Mode e.Index s.Depth>
    );
}
