//FROM LibraryEx
$EXTERN Fetch, MapReduce, Map;

//FROM Generator-Common
$EXTERN GenCommonHeaders, GenCommonTailer, PrintLength;

//FROM DisplayName
$EXTERN DisplayCName, CName;

//FROM Library
$EXTERN StrFromInt;

//FROM Escape
$EXTERN EscapeChar, EscapeString;

//FROM Opcodes
$EXTERN NumberFromOpcode, NumberFromBracket;


$ENTRY GenProgram-RASL {
  (
    (#ModuleID s.Cookie1 s.Cookie2)
    (#CmdFuncArray e.FuncNames)
    (#CmdLabelArray e.Labels)
    (#CmdNumberArray e.Numbers)
    (#CmdStringArray e.Strings)
    (#RASL e.RASL)
    (#Items e.Items)
  ) =
    <GenCommonHeaders>
    ('static refalrts::UInt32 COOKIE1 = ' <StrFromInt s.Cookie1> 'U;')
    ('static refalrts::UInt32 COOKIE2 = ' <StrFromInt s.Cookie2> 'U;')
    ()
    ('static refalrts::FunctionTableItem func_table_items[] = {')
    <Map
      {
        (s.ScopeClass e.Name) = ('  ' <NameWithSign s.ScopeClass e.Name> ',');
      }
      e.FuncNames
    >
    ('  0')
    ('};')
    ()
    ('static refalrts::FunctionTable functions(COOKIE1, COOKIE2, func_table_items);')
    ()
    <Fetch
      e.Labels
      {
        /* пусто */ =
          ('using refalrts::idents;');

          e.LabelNames (e.LastName) =
            ('static const refalrts::RefalIdentifier idents[] = {')
            <Map
              {
                (e.Name) =
                  ('  refalrts::ident_from_static("' <DisplayCName e.Name> '"),');
              }
              e.LabelNames
            >
            ('  refalrts::ident_from_static("' <DisplayCName e.LastName> '"),')
            ('};');
      }
    >
    ()
    <Fetch
      e.Numbers
      {
        /* пусто */ =
          ('using refalrts::numbers;');

      e.Numbers^ s.LastNumber =
        ('static const refalrts::RefalNumber numbers[] = {')
        <Map
          {
            s.Number = ('  ' <StrFromInt s.Number> 'UL,');
          }
          e.Numbers
        >
        ('  ' <StrFromInt s.LastNumber> 'UL')
        ('};');
      }
    >
    ()
    <Fetch
      e.Strings
      {
        /* пусто */ =
          ('using refalrts::strings;');

        e.Strings^ (e.LastString) =
          ('static const refalrts::StringItem strings[] = {')
          <Map
            {
              (e.String) = ('  {' <PrintString e.String> '},');
            }
            e.Strings
          >
          ('  {' <PrintString e.LastString> '}')
          ('};');
      }
    >
    ()
    ('static const refalrts::RASLCommand rasl[] = {')
    <Map GenCommand-RASL e.RASL>
    ('  {' <StrFromInt <NumberFromOpcode #CmdEnd>> ', 0, 0, 0}')
    ('};')
    ()
    (
      'static refalrts::ConstTableBlock const_table('
      <StrFromInt s.Cookie1> 'U, ' <StrFromInt s.Cookie2> 'U, '
      'functions, idents, numbers, strings, rasl'
      ');'
    )
    ()
    <Map GenCommand-Globals e.Items>
    ()
    <GenCommonTailer>;
}

NameWithSign {
  #GN-Entry e.Name = '"*' <DisplayCName e.Name> '"';
  #GN-Local e.Name = '"#' <DisplayCName e.Name> '"';
}

GenCommand-Globals {
  // ---------------------------------------------------------------------------
  // Создания глобальных объектов, общие команды

  (#CmdComment e.Text) = ('//' e.Text);

  // ---------------------------------------------------------------------------
  // Команды режима интерпретации
  // Создание глобальных объектов, общие команды

  (#CmdEnumDescr s.ScopeClass e.Name) =
    (
      'static refalrts::EmptyFunctionBlock block_' <CName e.Name> '('
      <NameWithSign s.ScopeClass e.Name>
      ');'
    );

  (#CmdInterpretFuncDescr s.ScopeClass e.Name s.Offset) =
    (
      'static refalrts::RefalFunctionBlock block_'<CName e.Name> '('
      <NameWithSign s.ScopeClass e.Name> ', ' <StrFromInt s.Offset>
      ');'
    )
    ();

  (#CmdSwapDescr s.ScopeClass e.Name) =
    (
      'static refalrts::SwapBlock block_' <CName e.Name> '('
      <NameWithSign s.ScopeClass e.Name>
      ');'
    );

  (#CmdNativeFuncDescr s.ScopeClass e.Name) =
    (
      'static refalrts::NativeFunctionBlock block_' <CName e.Name> '('
      <NameWithSign s.ScopeClass e.Name>
      ');'
    );
}

GenCommand-RASL {
  // ---------------------------------------------------------------------------
  // Создания глобальных объектов, общие команды

  (#CmdComment e.Text) = ('  //' e.Text);

  (#CmdProfileFunction) =
    <PutCommand #CmdProfileFunction>;

  (#CmdLoadConstants) =
    <PutCommand #CmdLoadConstants>;

  (#CmdIssueMemory s.Memory) =
    <PutCommand #CmdIssueMemory s.Memory 0 0>;

  (#CmdReserveBacktrackStack s.Depth) =
    <PutCommand #CmdReserveBacktrackStack s.Depth 0 0>;

  (#CmdOnFailGoTo s.Offset) =
    <PutCommand #CmdOnFailGoTo s.Offset 0 0>;

  (#CmdProfilerStopSentence) =
    <PutCommand #CmdProfilerStopSentence>;

  (#CmdInitB0) =
    <PutCommand #CmdInitB0>;

  (#CmdInitB0-Lite) =
    <PutCommand #CmdInitB0-Lite>;

  // ---------------------------------------------------------------------------
  // Команды сопоставления с образцом (режим интерпретации)

  (#CmdChar s.Direction s.BracketNumber s.Char) =
    <PutCommand (#CmdChar s.Direction) 0 (#C s.Char) s.BracketNumber>;

  (#CmdCharSave s.Direction s.BracketNumber s.SaveOffset s.Char) =
    <PutCommand
      (#CmdCharSave s.Direction) s.SaveOffset (#C s.Char) s.BracketNumber
    >;

  (#CmdNum s.Direction s.BracketNumber s.Number) =
    <PutCommand (#CmdNum s.Direction) 0 s.Number s.BracketNumber>;

  (#CmdNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <PutCommand (#CmdNumSave s.Direction) s.SaveOffset s.Number s.BracketNumber>;

  (#CmdHugeNum s.Direction s.BracketNumber s.Number) =
    <PutCommand (#CmdHugeNum s.Direction) 0 s.Number s.BracketNumber>;

  (#CmdHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <PutCommand
      (#CmdHugeNumSave s.Direction) s.SaveOffset s.Number s.BracketNumber
    >;

  (#CmdName s.Direction s.BracketNumber s.NameId) =
    <PutCommand (#CmdName s.Direction) 0 s.NameId s.BracketNumber>;

  (#CmdNameSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    <PutCommand (#CmdNameSave s.Direction) s.SaveOffset s.NameId s.BracketNumber>;

  (#CmdIdent s.Direction s.BracketNumber s.NameId) =
    <PutCommand (#CmdIdent s.Direction) 0 s.NameId s.BracketNumber>;

  (#CmdIdentSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    <PutCommand
      (#CmdIdentSave s.Direction) s.SaveOffset s.NameId s.BracketNumber
    >;

  (#CmdBrackets s.Direction s.Num s.NumRanges) =
    <PutCommand (#CmdBrackets s.Direction) 0 s.NumRanges s.Num>;

  (#CmdBracketsSave s.Direction s.Num s.NumRanges) =
    <PutCommand (#CmdBracketsSave s.Direction) 0 s.NumRanges s.Num>;

  (#CmdADT s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    <PutCommand (#CmdADT s.Direction) s.NameId s.InnerBrackets s.BracketNumber>;

  (#CmdADTSave s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    <PutCommand
      (#CmdADTSave s.Direction) s.NameId s.InnerBrackets s.BracketNumber
    >;

  (#CmdCallSave s.Direction s.BracketNumber s.InnerBrackets) =
    <PutCommand (#CmdCallSave s.Direction) 0 s.InnerBrackets s.BracketNumber>;

  (#CmdEmpty s.Direction s.Num) =
    <PutCommand #CmdEmpty 0 0 s.Num>;

  (#CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    <PutCommand (s.Mode #CmdVar s.Direction) 0 s.VarNumber s.BracketNumber>;

  (#CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    <PutCommand (s.Mode #CmdVarSave s.Direction) 0 s.VarNumber s.BracketNumber>;

  (#CmdRepeated s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber) =
    <PutCommand
      (s.Mode #CmdRepeated s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (#CmdRepeatedTVarSave
    s.Direction s.BracketNumber s.VarNumber s.SampleNumber
  ) =
    <PutCommand
      ('t' #CmdRepeatedSave s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (#CmdEPrepare s.BracketNumber s.VarNumber) =
    <PutCommand #CmdEPrepare 0 s.VarNumber s.BracketNumber>;

  (#CmdEStart s.BracketNumber s.VarNumber) =
    <PutCommand #CmdEStart 0 s.VarNumber s.BracketNumber>;

  (#CmdSave s.OldBracketNumber s.NewBracketNumber) =
    <PutCommand #CmdSave 0 s.NewBracketNumber s.OldBracketNumber>;

  // ---------------------------------------------------------------------------
  // Команды построения результата (режим интерпретации)

  (#CmdResetAllocator) =
    <PutCommand #CmdResetAllocator 0 0 0>;

  (#CmdSetRes s.Offset) =
    <Fetch
      s.Offset
      {
        #ARG-BEGIN = <PutCommand #CmdSetResArgBegin>;
        #RIGHT-EDGE = <PutCommand #CmdSetResRightEdge>;

        s.Offset^ = <PutCommand #CmdSetRes 0 0 s.Offset>;
      }
    >;

  (#CmdCopyVar 'e' s.Target s.Sample) =
    <PutCommand #CmdCopyEVar s.Target s.Sample 0>;

  (#CmdCopyVar s.Mode s.Target s.Sample) =
    <PutCommand #CmdCopySTVar s.Target s.Sample 0>;

  (#CmdReinitSVar s.Offset s.Sample) =
    <PutCommand #CmdReinitSVar 0 s.Sample s.Offset>;

  (#CmdCreateElem s.CreateMode s.ElemNumber s.ElementType e.Info) =
    <PutCommand
      (s.CreateMode <CreateCommandTag s.ElementType>)
      0 <CreateCommandInfo s.ElementType e.Info> s.ElemNumber
    >;

  (#CmdLinkBrackets s.Left s.Right) =
    <PutCommand #CmdLinkBrackets s.Left s.Right 0>;

  (#CmdPushStack s.ElemNumber) =
    <PutCommand #CmdPushStack 0 0 s.ElemNumber>;

  (#CmdInsertElem s.ElemNumber) =
    <PutCommand #CmdSpliceElem 0 0 s.ElemNumber>;

  (#CmdInsertVar 'e' s.Offset) =
    <PutCommand #CmdSpliceEVar 0 0 s.Offset>;

  (#CmdInsertVar s.Mode s.Offset) =
    <PutCommand #CmdSpliceSTVar 0 0 s.Offset>;

  (#CmdInsertRange s.ElemNumber) =
    <PutCommand #CmdSpliceRange 0 0 s.ElemNumber>;

  (#CmdInsertTile s.BeginOffset s.EndOffset) =
    <PutCommand #CmdSpliceTile s.BeginOffset s.EndOffset 0>;

  (#CmdSpliceToFreeList) =
    <PutCommand #CmdSpliceToFreeList 0 0 0>;

  (#CmdNextStep) =
    <PutCommand #CmdNextStep>;

  (#CmdTrash s.Offset) =
    <Fetch
      s.Offset
      {
        #LEFT-EDGE = <PutCommand #CmdTrashLeftEdge>;

        s.Offset^ = <PutCommand #CmdTrash 0 0 s.Offset>;
      }
    >;

  (#CmdFail) =
    <PutCommand #CmdFail>;
}

PutCommand {
  s.Symbolic =
    ('  {' <StrFromInt <NumberFromOpcode s.Symbolic>> ', 0, 0, 0},');

  s.Symbolic t.Arg1 t.Arg2 t.Arg3 =
    <PutCommand (s.Symbolic) t.Arg1 t.Arg2 t.Arg3>;

  (e.Symbolic) t.Arg1 t.Arg2 t.Arg3 =
    (
      '  {' <StrFromInt <NumberFromOpcode e.Symbolic>>
      ', ' <PutCommand-Arg t.Arg1>
      ', ' <PutCommand-Arg t.Arg2>
      ', ' <PutCommand-Arg t.Arg3> '},'
    );
}

PutCommand-Arg {
  s.Number = <StrFromInt s.Number>;
  (#C s.Char) = 'static_cast<unsigned char>(''' <EscapeChar s.Char> ''')';
}

PrintString {
  e.String = '"' <EscapeString e.String> '", ' <PrintLength e.String>;
}

CreateCommandTag {
  #ElOpenBracket = #ElBracket;
  #ElOpenADT = #ElBracket;
  #ElOpenCall = #ElBracket;
  #ElCloseBracket = #ElBracket;
  #ElCloseADT = #ElBracket;
  #ElCloseCall = #ElBracket;

  s.Other = s.Other;
}

CreateCommandInfo {
  #ElChar s.Char = (#C s.Char);

  #ElName s.NameId = s.NameId;

  #ElNumber s.Number = s.Number;
  #ElHugeNumber s.NumberId = s.NumberId;

  #ElIdent s.NameId = s.NameId;

  #ElString s.StringId = s.StringId;

  s.Bracket = <NumberFromBracket s.Bracket>;
}
