//FROM LibraryEx
$EXTERN Fetch, MapReduce, Map;

//FROM Generator-Common
$EXTERN GenCommonHeaders, GenCommonTailer, PrintLength;

//FROM DisplayName
$EXTERN DisplayCName, CName;

//FROM Library
$EXTERN StrFromInt;

//FROM Escape
$EXTERN EscapeChar, EscapeString;

//FROM Opcodes
$EXTERN NumberFromOpcode, NumberFromBracket;


$ENTRY GenProgram-RASL {
  (
    (#ModuleID s.Cookie1 s.Cookie2)
    e.RASL
  ) =
    <GenCommonHeaders>
    ('static refalrts::UInt32 COOKIE1 = ' <StrFromInt s.Cookie1> 'U;')
    ('static refalrts::UInt32 COOKIE2 = ' <StrFromInt s.Cookie2> 'U;')
    ('#define rasl rasl_' <StrFromInt s.Cookie1> '_' <StrFromInt s.Cookie2>)
    ()
    ('extern const refalrts::RASLCommand rasl[];')
    ()
    <CheckEmptyIndent
      <MapReduce GenCommand-RASL (/* отступ */) e.RASL>
    >
    <GenCommonTailer>;
}

CheckEmptyIndent {
  () /* отступ должен остаться тем же */
  e.Generated =
    e.Generated;
}

NameWithScope {
  #GN-Entry e.Name =
    'refalrts::RefalFuncName("' <DisplayCName e.Name> '", 0, 0)';

  #GN-Local e.Name =
    'refalrts::RefalFuncName("' <DisplayCName e.Name> '", COOKIE1, COOKIE2)';
}

GenCommand-RASL {
  // ---------------------------------------------------------------------------
  // Создания глобальных объектов, общие команды

  (e.Indent) (#CmdComment e.Text) = (e.Indent) (e.Indent '//' e.Text);

  // ---------------------------------------------------------------------------
  // Команды режима интерпретации
  // Создание глобальных объектов, общие команды

  (e.Indent) (#CmdEnumDescr s.ScopeClass e.Name) =
    (e.Indent)
    (
      'static refalrts::RefalEmptyFunction descr_' <CName e.Name> '('
      <NameWithScope s.ScopeClass e.Name>
      ');'
    );

  (e.Indent) (#CmdInterpretFuncDescr s.ScopeClass e.Name s.Offset) =
    (e.Indent)
    ('static refalrts::RASLFunction descr_' <CName e.Name> '(')
    ('  ' <NameWithScope s.ScopeClass e.Name> ',')
    ('  rasl + ' <StrFromInt s.Offset> ',')
    ('  functions,')
    ('  idents,')
    ('  numbers,')
    ('  strings')
    (');')
    ();

  (e.Indent) (#CmdSwapDescr s.ScopeClass e.Name) =
    (e.Indent)
    (
      'static refalrts::RefalSwap descr_' <CName e.Name> '('
      <NameWithScope s.ScopeClass e.Name>
      ');'
    );

  (e.Indent) (#CmdFuncArray e.FuncNames) =
    (e.Indent)
    (e.Indent 'static refalrts::FunctionTableItem func_table_items[] = {')
    <Map
      {
        (#GN-Entry e.Name) = (e.Indent '  "*' <DisplayCName e.Name> '",');
        (#GN-Local e.Name) = (e.Indent '  "#' <DisplayCName e.Name> '",');
      }
      e.FuncNames
    >
    (e.Indent '  0')
    (e.Indent '};')
    ()
    (e.Indent
      'static refalrts::FunctionTable functions('
      'COOKIE1, COOKIE2, func_table_items'
      ');'
    )
    ();

  (e.Indent) (#CmdLabelArray) =
    (e.Indent)
    (e.Indent 'using refalrts::idents;')
    ();

  (e.Indent) (#CmdLabelArray e.LabelNames (e.LastName)) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalIdentifier idents[] = {')
    <Map
      {
        (e.Name) =
          (e.Indent '  refalrts::ident_from_static("' <DisplayCName e.Name> '"),');
      }
      e.LabelNames
    >
    (e.Indent '  refalrts::ident_from_static("' <DisplayCName e.LastName> '"),')
    (e.Indent '};')
    ();

  (e.Indent) (#CmdNumberArray) =
    (e.Indent)
    (e.Indent 'using refalrts::numbers;')
    ();

  (e.Indent) (#CmdNumberArray e.Numbers s.LastNumber) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalNumber numbers[] = {')
    <Map
      {
        s.Number = (e.Indent '  ' <StrFromInt s.Number> 'UL,');
      }
      e.Numbers
    >
    (e.Indent '  ' <StrFromInt s.LastNumber> 'UL')
    (e.Indent '};')
    ();

  (e.Indent) (#CmdStringArray) =
    (e.Indent)
    (e.Indent 'using refalrts::strings;')
    ();

  (e.Indent) (#CmdStringArray e.Strings (e.LastString)) =
    (e.Indent)
    (e.Indent 'static const refalrts::StringItem strings[] = {')
    <Map
      {
        (e.String) = (e.Indent '  {' <PrintString e.String> '},');
      }
      e.Strings
    >
    (e.Indent '  {' <PrintString e.LastString> '}')
    (e.Indent '};')
    ();

  (e.Indent) (#CmdInitRAA) =
    (e.Indent '  ')
    (e.Indent 'const refalrts::RASLCommand rasl[] = {');

  (e.Indent '  ') (#CmdFinRAA) =
    (e.Indent)
    (e.Indent '  {refalrts::icEnd, 0, 0, 0}')
    (e.Indent '};');

  (e.Indent) (#CmdProfileFunction) =
    (e.Indent)
    <PutCommand #CmdProfileFunction>;

  (e.Indent) (#CmdLoadConstants) =
    (e.Indent)
    <PutCommand #CmdLoadConstants>;

  (e.Indent) (#CmdIssueMemory s.Memory) =
    (e.Indent)
    <PutCommand #CmdIssueMemory s.Memory 0 0>;

  (e.Indent) (#CmdReserveBacktrackStack s.Depth) =
    (e.Indent)
    <PutCommand #CmdReserveBacktrackStack s.Depth 0 0>;

  (e.Indent) (#CmdOnFailGoTo s.Offset) =
    (e.Indent)
    <PutCommand #CmdOnFailGoTo s.Offset 0 0>;

  (e.Indent) (#CmdProfilerStopSentence) =
    (e.Indent)
    <PutCommand #CmdProfilerStopSentence>;

  (e.Indent) (#CmdInitB0) =
    (e.Indent)
    <PutCommand #CmdInitB0>;

  (e.Indent) (#CmdInitB0-Lite) =
    (e.Indent)
    <PutCommand #CmdInitB0-Lite>;

  // ---------------------------------------------------------------------------
  // Команды сопоставления с образцом (режим интерпретации)

  (e.Indent) (#CmdChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    <PutCommand (#CmdChar s.Direction) 0 (#C s.Char) s.BracketNumber>;

  (e.Indent) (#CmdCharSave s.Direction s.BracketNumber s.SaveOffset s.Char) =
    (e.Indent)
    <PutCommand
      (#CmdCharSave s.Direction) s.SaveOffset (#C s.Char) s.BracketNumber
    >;

  (e.Indent) (#CmdNum s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    <PutCommand (#CmdNum s.Direction) 0 s.Number s.BracketNumber>;

  (e.Indent) (#CmdNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    (e.Indent)
    <PutCommand (#CmdNumSave s.Direction) s.SaveOffset s.Number s.BracketNumber>;

  (e.Indent) (#CmdHugeNum s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    <PutCommand (#CmdHugeNum s.Direction) 0 s.Number s.BracketNumber>;

  (e.Indent)
  (#CmdHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    (e.Indent)
    <PutCommand
      (#CmdHugeNumSave s.Direction) s.SaveOffset s.Number s.BracketNumber
    >;

  (e.Indent) (#CmdName s.Direction s.BracketNumber s.NameId) =
    (e.Indent)
    <PutCommand (#CmdName s.Direction) 0 s.NameId s.BracketNumber>;

  (e.Indent) (#CmdNameSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    (e.Indent)
    <PutCommand (#CmdNameSave s.Direction) s.SaveOffset s.NameId s.BracketNumber>;

  (e.Indent) (#CmdIdent s.Direction s.BracketNumber s.NameId) =
    (e.Indent)
    <PutCommand (#CmdIdent s.Direction) 0 s.NameId s.BracketNumber>;

  (e.Indent)
  (#CmdIdentSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    (e.Indent)
    <PutCommand
      (#CmdIdentSave s.Direction) s.SaveOffset s.NameId s.BracketNumber
    >;

  (e.Indent) (#CmdBrackets s.Direction s.Num s.NumRanges) =
    (e.Indent)
    <PutCommand (#CmdBrackets s.Direction) 0 s.NumRanges s.Num>;

  (e.Indent) (#CmdBracketsSave s.Direction s.Num s.NumRanges) =
    (e.Indent)
    <PutCommand (#CmdBracketsSave s.Direction) 0 s.NumRanges s.Num>;

  (e.Indent) (#CmdADT s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    (e.Indent)
    <PutCommand (#CmdADT s.Direction) s.NameId s.InnerBrackets s.BracketNumber>;

  (e.Indent)
  (#CmdADTSave s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    (e.Indent)
    <PutCommand
      (#CmdADTSave s.Direction) s.NameId s.InnerBrackets s.BracketNumber
    >;

  (e.Indent) (#CmdCallSave s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PutCommand (#CmdCallSave s.Direction) 0 s.InnerBrackets s.BracketNumber>;

  (e.Indent) (#CmdEmpty s.Direction s.Num) =
    (e.Indent)
    <PutCommand #CmdEmpty 0 0 s.Num>;

  (e.Indent) (#CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    <PutCommand (s.Mode #CmdVar s.Direction) 0 s.VarNumber s.BracketNumber>;

  (e.Indent) (#CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    <PutCommand (s.Mode #CmdVarSave s.Direction) 0 s.VarNumber s.BracketNumber>;

  (e.Indent)
  (#CmdRepeated s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber) =
    (e.Indent)
    <PutCommand
      (s.Mode #CmdRepeated s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (e.Indent)
  (#CmdRepeatedTVarSave
    s.Direction s.BracketNumber s.VarNumber s.SampleNumber
  ) =
    (e.Indent)
    <PutCommand
      ('t' #CmdRepeatedSave s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (e.Indent) (#CmdEPrepare s.BracketNumber s.VarNumber) =
    (e.Indent)
    <PutCommand #CmdEPrepare 0 s.VarNumber s.BracketNumber>;

  (e.Indent) (#CmdEStart s.BracketNumber s.VarNumber) =
    (e.Indent)
    <PutCommand #CmdEStart 0 s.VarNumber s.BracketNumber>;

  (e.Indent) (#CmdSave s.OldBracketNumber s.NewBracketNumber) =
    (e.Indent)
    <PutCommand #CmdSave 0 s.NewBracketNumber s.OldBracketNumber>;

  // ---------------------------------------------------------------------------
  // Команды построения результата (режим интерпретации)

  (e.Indent) (#CmdResetAllocator) =
    (e.Indent)
    <PutCommand #CmdResetAllocator 0 0 0>;

  (e.Indent) (#CmdSetRes s.Offset) =
    (e.Indent)
    <Fetch
      s.Offset
      {
        #ARG-BEGIN = <PutCommand #CmdSetResArgBegin>;
        #RIGHT-EDGE = <PutCommand #CmdSetResRightEdge>;

        s.Offset^ = <PutCommand #CmdSetRes 0 0 s.Offset>;
      }
    >;

  (e.Indent) (#CmdCopyVar 'e' s.Target s.Sample) =
    (e.Indent)
    <PutCommand #CmdCopyEVar s.Target s.Sample 0>;

  (e.Indent) (#CmdCopyVar s.Mode s.Target s.Sample) =
    (e.Indent)
    <PutCommand #CmdCopySTVar s.Target s.Sample 0>;

  (e.Indent) (#CmdReinitSVar s.Offset s.Sample) =
    (e.Indent)
    <PutCommand #CmdReinitSVar 0 s.Sample s.Offset>;

  (e.Indent) (#CmdCreateElem s.CreateMode s.ElemNumber s.ElementType e.Info) =
    (e.Indent)
    <PutCommand
      (s.CreateMode <CreateCommandTag s.ElementType>)
      0 <CreateCommandInfo s.ElementType e.Info> s.ElemNumber
    >;

  (e.Indent) (#CmdLinkBrackets s.Left s.Right) =
    (e.Indent)
    <PutCommand #CmdLinkBrackets s.Left s.Right 0>;

  (e.Indent) (#CmdPushStack s.ElemNumber) =
    (e.Indent)
    <PutCommand #CmdPushStack 0 0 s.ElemNumber>;

  (e.Indent) (#CmdInsertElem s.ElemNumber) =
    (e.Indent)
    <PutCommand #CmdSpliceElem 0 0 s.ElemNumber>;

  (e.Indent) (#CmdInsertVar 'e' s.Offset) =
    (e.Indent)
    <PutCommand #CmdSpliceEVar 0 0 s.Offset>;

  (e.Indent) (#CmdInsertVar s.Mode s.Offset) =
    (e.Indent)
    <PutCommand #CmdSpliceSTVar 0 0 s.Offset>;

  (e.Indent) (#CmdInsertRange s.ElemNumber) =
    (e.Indent)
    <PutCommand #CmdSpliceRange 0 0 s.ElemNumber>;

  (e.Indent) (#CmdInsertTile s.BeginOffset s.EndOffset) =
    (e.Indent)
    <PutCommand #CmdSpliceTile s.BeginOffset s.EndOffset 0>;

  (e.Indent) (#CmdSpliceToFreeList) =
    (e.Indent)
    <PutCommand #CmdSpliceToFreeList 0 0 0>;

  (e.Indent) (#CmdNextStep) =
    (e.Indent)
    <PutCommand #CmdNextStep>;

  (e.Indent) (#CmdTrash s.Offset) =
    (e.Indent)
    <Fetch
      s.Offset
      {
        #LEFT-EDGE = <PutCommand #CmdTrashLeftEdge>;

        s.Offset^ = <PutCommand #CmdTrash 0 0 s.Offset>;
      }
    >;

  (e.Indent) (#CmdFail) =
    (e.Indent)
    <PutCommand #CmdFail>;
}

PutCommand {
  s.Symbolic =
    ('  {' <StrFromInt <NumberFromOpcode s.Symbolic>> ', 0, 0, 0},');

  s.Symbolic t.Arg1 t.Arg2 t.Arg3 =
    <PutCommand (s.Symbolic) t.Arg1 t.Arg2 t.Arg3>;

  (e.Symbolic) t.Arg1 t.Arg2 t.Arg3 =
    (
      '  {' <StrFromInt <NumberFromOpcode e.Symbolic>>
      ', ' <PutCommand-Arg t.Arg1>
      ', ' <PutCommand-Arg t.Arg2>
      ', ' <PutCommand-Arg t.Arg3> '},'
    );
}

PutCommand-Arg {
  s.Number = <StrFromInt s.Number>;
  (#C s.Char) = 'static_cast<unsigned char>(''' <EscapeChar s.Char> ''')';
}

PrintString {
  e.String = '"' <EscapeString e.String> '", ' <PrintLength e.String>;
}

CreateCommandTag {
  #ElOpenBracket = #ElBracket;
  #ElOpenADT = #ElBracket;
  #ElOpenCall = #ElBracket;
  #ElCloseBracket = #ElBracket;
  #ElCloseADT = #ElBracket;
  #ElCloseCall = #ElBracket;

  s.Other = s.Other;
}

CreateCommandInfo {
  #ElChar s.Char = (#C s.Char);

  #ElName s.NameId = s.NameId;

  #ElNumber s.Number = s.Number;
  #ElHugeNumber s.NumberId = s.NumberId;

  #ElIdent s.NameId = s.NameId;

  #ElString s.StringId = s.StringId;

  s.Bracket = <NumberFromBracket s.Bracket>;
}
