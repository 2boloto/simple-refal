//FROM LibraryEx
$EXTERN Fetch, Map, Inc;

//FROM DisplayName
$EXTERN DisplayName;

//FROM Library
$EXTERN StrFromInt, Div, Mod, UnBracket, Sub, Mul;

//FROM Escape
$EXTERN EscapeChar;

//FROM Opcodes
$EXTERN NumberFromOpcode, NumberFromBracket, BlockTypeNumber;


$ENTRY GenProgram-RASL {
  (
    (#ModuleID s.Cookie1 s.Cookie2)
    (#CmdFuncArray e.FuncNames)
    (#CmdLabelArray e.Labels)
    (#CmdNumberArray e.Numbers)
    (#CmdStringArray e.Strings)
    (#RASL e.RASL)
    (#Items e.Items)
  ) =
    <EnvelopeCLines
      <CreateBinaryStream
        (#ModuleID s.Cookie1 s.Cookie2)
        (#CmdFuncArray e.FuncNames)
        (#CmdLabelArray e.Labels)
        (#CmdNumberArray e.Numbers)
        (#CmdStringArray e.Strings)
        (#RASL e.RASL)
        (#Items e.Items)
      >
    >;
}

EnvelopeCLines {
  e.Bytes =
    ('// Automatically generated file. Don\'t edit!')
    ('#include "refalrts.h"')
    ()
    ('static unsigned char bytes[] = {')
    <Map
      {
        s.Number =
          ('  ' <StrFromInt s.Number> ',');

        (#C s.Char) =
          ('  static_cast<unsigned char>(''' <EscapeChar s.Char> '''),');
      }
      e.Bytes
    >
    ('  0')
    ('};')
    ()
    ('static refalrts::RawBytesBlock block(bytes, sizeof(bytes) - 1);')
    ()
    ('//End of file');
}

CreateBinaryStream {
  (#ModuleID s.Cookie1 s.Cookie2)
  (#CmdFuncArray e.FuncNames)
  (#CmdLabelArray e.Labels)
  (#CmdNumberArray e.Numbers)
  (#CmdStringArray e.Strings)
  (#RASL e.RASL)
  (#Items e.Items) =
    <PutBlock #Start <BytesFromString 'RASLCODE'>>
    <Fetch
      (
        <Length-T
          <Map
            {
              (s.ScopeClass e.FuncName) =
                (<NameWithSign-Bytes s.ScopeClass e.FuncName>);
            }
            e.FuncNames
          >
        >
      )
      (
        <Length-T
          <Map
            {
              (e.Ident) = (<Asciiz <DisplayName e.Ident>>);
            }
            e.Labels
          >
        >
      )
      (<Length-T <Map { s.Number = <PutWordLE s.Number>; } e.Numbers>>)
      (
        <Length-T
          <Map
            {
              (e.String) =
                <Fetch
                  <Length-T e.String>
                  {
                    s.Length e.String^ =
                      (<PutWordLE s.Length> <BytesFromString e.String>);
                  }
                >;
            }
            e.Strings
          >
        >
      )
      (<Length-T <Map GenCommand-RASL e.RASL>>)
      {
        (s.ExternalCount e.Externals)
        (s.IdentCount e.Idents)
        (s.NumberCount e.Numbers^)
        (s.StringCount e.Strings^)
        (s.RaslLength e.RASL^) =
          <Fetch
            (<Length-T <Map UnBracket e.Externals>>)
            (<Length-T <Map UnBracket e.Idents>>)
            (<Length-T <Map UnBracket e.Strings>>)
            {
              (s.ExternalSize e.Externals^)
              (s.IdentSize e.Idents^)
              (s.StringSize e.Strings^) =
                <PutBlock
                  #ConstTable
                  <PutWordLE s.Cookie1>
                  <PutWordLE s.Cookie2>
                  <PutWordLE s.ExternalCount>
                  <PutWordLE s.IdentCount>
                  <PutWordLE s.NumberCount>
                  <PutWordLE s.StringCount>
                  <PutWordLE s.RaslLength>
                  <PutWordLE s.ExternalSize>
                  <PutWordLE s.IdentSize>
                  <PutWordLE <Sub s.StringSize <Mul 4 s.StringCount>>>
                  e.Externals
                  e.Idents
                  e.Numbers
                  e.Strings
                  <Map UnBracket e.RASL>
                >;
            }
          >;
      }
    >
    <Map GenCommand-Globals e.Items>;
}

BytesFromString {
  e.String = <Map { s.Char = (#C s.Char); } e.String>;
}

Asciiz {
  e.String = <BytesFromString e.String> 0;
}

PutBlock {
  s.Type e.Bytes =
    <BlockTypeNumber s.Type>
    <Fetch
      <Length-T e.Bytes>
      {
        s.Length e.Bytes^ = <PutWordLE s.Length> e.Bytes;
      }
    >;
}

Length-T {
  e.Items = <DoLength-T 0 e.Items>;
}

DoLength-T {
  s.Count e.Items t.Last = <DoLength-T <Inc s.Count> e.Items> t.Last;
  s.Count /* пусто */ = s.Count;
}

PutWordLE {
  s.1 s.2 s.3 s.4 = s.1 s.2 s.3 s.4;

  e.Bytes s.Value = <PutWordLE e.Bytes <Mod s.Value 256> <Div s.Value 256>>;
}

NameWithSign-Bytes {
  #GN-Entry e.Name = <Asciiz '*' <DisplayName e.Name>>;
  #GN-Local e.Name = <Asciiz '#' <DisplayName e.Name>>;
}

GenCommand-Globals {
  (#CmdEnumDescr s.ScopeClass e.Name) =
    <PutBlock #EmptyFunction <NameWithSign-Bytes s.ScopeClass e.Name>>;

  (#CmdInterpretFuncDescr s.ScopeClass e.Name s.Offset) =
    <PutBlock
      #RefalFunction
      <NameWithSign-Bytes s.ScopeClass e.Name>
      <PutWordLE s.Offset>
    >;

  (#CmdSwapDescr s.ScopeClass e.Name) =
    <PutBlock #Swap <NameWithSign-Bytes s.ScopeClass e.Name>>;

  (#CmdNativeFuncDescr s.ScopeClass e.Name) =
    <PutBlock #NativeFunction <NameWithSign-Bytes s.ScopeClass e.Name>>;
}

GenCommand-RASL {
  // ---------------------------------------------------------------------------
  // Создания глобальных объектов, общие команды

  (#CmdComment e.Text) =
    /*
      Пропускаем.
      По-хорошему тут надо формировать символьную информацию для отладки.
    */
    ;

  (#CmdProfileFunction) =
    <PutCommand #CmdProfileFunction>;

  (#CmdLoadConstants) =
    <PutCommand #CmdLoadConstants>;

  (#CmdIssueMemory s.Memory) =
    <PutCommand #CmdIssueMemory s.Memory 0 0>;

  (#CmdReserveBacktrackStack s.Depth) =
    <PutCommand #CmdReserveBacktrackStack s.Depth 0 0>;

  (#CmdOnFailGoTo s.Offset) =
    <PutCommand #CmdOnFailGoTo s.Offset 0 0>;

  (#CmdProfilerStopSentence) =
    <PutCommand #CmdProfilerStopSentence>;

  (#CmdInitB0) =
    <PutCommand #CmdInitB0>;

  (#CmdInitB0-Lite) =
    <PutCommand #CmdInitB0-Lite>;

  // ---------------------------------------------------------------------------
  // Команды сопоставления с образцом (режим интерпретации)

  (#CmdChar s.Direction s.BracketNumber s.Char) =
    <PutCommand (#CmdChar s.Direction) 0 (#C s.Char) s.BracketNumber>;

  (#CmdCharSave s.Direction s.BracketNumber s.SaveOffset s.Char) =
    <PutCommand
      (#CmdCharSave s.Direction) s.SaveOffset (#C s.Char) s.BracketNumber
    >;

  (#CmdNum s.Direction s.BracketNumber s.Number) =
    <PutCommand (#CmdNum s.Direction) 0 s.Number s.BracketNumber>;

  (#CmdNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <PutCommand (#CmdNumSave s.Direction) s.SaveOffset s.Number s.BracketNumber>;

  (#CmdHugeNum s.Direction s.BracketNumber s.Number) =
    <PutCommand (#CmdHugeNum s.Direction) 0 s.Number s.BracketNumber>;

  (#CmdHugeNumSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <PutCommand
      (#CmdHugeNumSave s.Direction) s.SaveOffset s.Number s.BracketNumber
    >;

  (#CmdName s.Direction s.BracketNumber s.NameId) =
    <PutCommand (#CmdName s.Direction) 0 s.NameId s.BracketNumber>;

  (#CmdNameSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    <PutCommand (#CmdNameSave s.Direction) s.SaveOffset s.NameId s.BracketNumber>;

  (#CmdIdent s.Direction s.BracketNumber s.NameId) =
    <PutCommand (#CmdIdent s.Direction) 0 s.NameId s.BracketNumber>;

  (#CmdIdentSave s.Direction s.BracketNumber s.SaveOffset s.NameId) =
    <PutCommand
      (#CmdIdentSave s.Direction) s.SaveOffset s.NameId s.BracketNumber
    >;

  (#CmdBrackets s.Direction s.Num s.NumRanges) =
    <PutCommand (#CmdBrackets s.Direction) 0 s.NumRanges s.Num>;

  (#CmdBracketsSave s.Direction s.Num s.NumRanges) =
    <PutCommand (#CmdBracketsSave s.Direction) 0 s.NumRanges s.Num>;

  (#CmdADT s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    <PutCommand (#CmdADT s.Direction) s.NameId s.InnerBrackets s.BracketNumber>;

  (#CmdADTSave s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    <PutCommand
      (#CmdADTSave s.Direction) s.NameId s.InnerBrackets s.BracketNumber
    >;

  (#CmdCallSave s.Direction s.BracketNumber s.InnerBrackets) =
    <PutCommand (#CmdCallSave s.Direction) 0 s.InnerBrackets s.BracketNumber>;

  (#CmdEmpty s.Direction s.Num) =
    <PutCommand #CmdEmpty 0 0 s.Num>;

  (#CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    <PutCommand (s.Mode #CmdVar s.Direction) 0 s.VarNumber s.BracketNumber>;

  (#CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    <PutCommand (s.Mode #CmdVarSave s.Direction) 0 s.VarNumber s.BracketNumber>;

  (#CmdRepeated s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber) =
    <PutCommand
      (s.Mode #CmdRepeated s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (#CmdRepeatedTVarSave
    s.Direction s.BracketNumber s.VarNumber s.SampleNumber
  ) =
    <PutCommand
      ('t' #CmdRepeatedSave s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (#CmdEPrepare s.BracketNumber s.VarNumber) =
    <PutCommand #CmdEPrepare 0 s.VarNumber s.BracketNumber>;

  (#CmdEStart s.BracketNumber s.VarNumber) =
    <PutCommand #CmdEStart 0 s.VarNumber s.BracketNumber>;

  (#CmdSave s.OldBracketNumber s.NewBracketNumber) =
    <PutCommand #CmdSave 0 s.NewBracketNumber s.OldBracketNumber>;

  // ---------------------------------------------------------------------------
  // Команды построения результата (режим интерпретации)

  (#CmdResetAllocator) =
    <PutCommand #CmdResetAllocator 0 0 0>;

  (#CmdSetRes s.Offset) =
    <Fetch
      s.Offset
      {
        #ARG-BEGIN = <PutCommand #CmdSetResArgBegin>;
        #RIGHT-EDGE = <PutCommand #CmdSetResRightEdge>;

        s.Offset^ = <PutCommand #CmdSetRes 0 0 s.Offset>;
      }
    >;

  (#CmdCopyVar 'e' s.Target s.Sample) =
    <PutCommand #CmdCopyEVar s.Target s.Sample 0>;

  (#CmdCopyVar s.Mode s.Target s.Sample) =
    <PutCommand #CmdCopySTVar s.Target s.Sample 0>;

  (#CmdReinitSVar s.Offset s.Sample) =
    <PutCommand #CmdReinitSVar 0 s.Sample s.Offset>;

  (#CmdCreateElem s.CreateMode s.ElemNumber s.ElementType e.Info) =
    <PutCommand
      (s.CreateMode <CreateCommandTag s.ElementType>)
      0 <CreateCommandInfo s.ElementType e.Info> s.ElemNumber
    >;

  (#CmdLinkBrackets s.Left s.Right) =
    <PutCommand #CmdLinkBrackets s.Left s.Right 0>;

  (#CmdPushStack s.ElemNumber) =
    <PutCommand #CmdPushStack 0 0 s.ElemNumber>;

  (#CmdInsertElem s.ElemNumber) =
    <PutCommand #CmdSpliceElem 0 0 s.ElemNumber>;

  (#CmdInsertVar 'e' s.Offset) =
    <PutCommand #CmdSpliceEVar 0 0 s.Offset>;

  (#CmdInsertVar s.Mode s.Offset) =
    <PutCommand #CmdSpliceSTVar 0 0 s.Offset>;

  (#CmdInsertRange s.ElemNumber) =
    <PutCommand #CmdSpliceRange 0 0 s.ElemNumber>;

  (#CmdInsertTile s.BeginOffset s.EndOffset) =
    <PutCommand #CmdSpliceTile s.BeginOffset s.EndOffset 0>;

  (#CmdSpliceToFreeList) =
    <PutCommand #CmdSpliceToFreeList 0 0 0>;

  (#CmdNextStep) =
    <PutCommand #CmdNextStep>;

  (#CmdTrash s.Offset) =
    <Fetch
      s.Offset
      {
        #LEFT-EDGE = <PutCommand #CmdTrashLeftEdge>;

        s.Offset^ = <PutCommand #CmdTrash 0 0 s.Offset>;
      }
    >;

  (#CmdFail) =
    <PutCommand #CmdFail>;
}

PutCommand {
  s.Symbolic =
    (<NumberFromOpcode s.Symbolic> 0 0 0);

  s.Symbolic t.Arg1 t.Arg2 t.Arg3 =
    <PutCommand (s.Symbolic) t.Arg1 t.Arg2 t.Arg3>;

  (e.Symbolic) t.Arg1 t.Arg2 t.Arg3 =
    (<NumberFromOpcode e.Symbolic> t.Arg1 t.Arg2 t.Arg3);
}

CreateCommandTag {
  #ElOpenBracket = #ElBracket;
  #ElOpenADT = #ElBracket;
  #ElOpenCall = #ElBracket;
  #ElCloseBracket = #ElBracket;
  #ElCloseADT = #ElBracket;
  #ElCloseCall = #ElBracket;

  s.Other = s.Other;
}

CreateCommandInfo {
  #ElChar s.Char = (#C s.Char);

  #ElName s.NameId = s.NameId;

  #ElNumber s.Number = s.Number;
  #ElHugeNumber s.NumberId = s.NumberId;

  #ElIdent s.NameId = s.NameId;

  #ElString s.StringId = s.StringId;

  s.Bracket = <NumberFromBracket s.Bracket>;
}
