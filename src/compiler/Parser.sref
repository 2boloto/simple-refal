//FROM LibraryEx
$EXTERN Fetch, Map, Inc, Seq, Dec;

//FROM Error
$EXTERN EL-AddUnexpected, EL-AddErrorAt;


$ENTRY ParseProgram {
  t.ErrorList e.Tokens =
    <ParseElements
      t.ErrorList
      (/* AST */)
      <Map PrepareBracket e.Tokens>
    >;
}

PrepareBracket {
  (#TkOpenBracket s.LnNum) = (# Open s.LnNum #TkOpenBracket);
  (#TkCloseBracket s.LnNum) = (# Close s.LnNum #TkCloseBracket);

  (#TkOpenADT s.LnNum) = (# Open s.LnNum #TkOpenADT);
  (#TkCloseADT s.LnNum) = (# Close s.LnNum #TkCloseADT);

  (#TkOpenCall s.LnNum) = (# Open s.LnNum #TkOpenCall);
  (#TkCloseCall s.LnNum) = (# Close s.LnNum #TkCloseCall);

  t.OtherToken = t.OtherToken;
}

/*
  Трансляция осуществляется обычным методом рекурсивного спуска.

  TranslationUnit = Element* .

  Element =
    '$ENUM' NameList |
    '$EENUM' NameList |
    '$EXTERN' NameList |
    '$FORWARD' NameList |
    '$SWAP' NameList |
    '$ESWAP' NameList |
    '$LABEL' NameList |
    '$ENTRY' Function |
    Function .

  NameList = Name ',' NameList | Name ';' .

  Function = Name Block .

  Block = '{' Sentence* '}' .

  Sentence = Pattern '=' Result ';' .

  Pattern = PatternTerm* .

  PatternTerm = CommonTerm |
    '(' Patter ')' | '[' Pattern ']' | RedefinitionVariable .

  RedefinitionVariable = Variable '^' .

  CommonTerm = Char | Number | Name | Variable | '#' Ident .

  Result = ResultTerm* .

  ResultTerm = CommonTerm |
    '(' Result ')' | '[' Result ']' | '<' Result '>' | Block .

  Стратегия обработки ошибок. Выделяем только одну функцию, проглатывающую
  неожиданные лексемы. Остальные функции при обнаружении неожиданной лексемы
  должны её оставить в лексической свёртке перейдя в одно из состояний уровнем
  выше. Данная стратегия обработки ошибок может нарушаться, но при этом должно
  выполняться условие, что #TkEOF передаётся в ParseElements.
*/

/*
  TranslationUnit = Element* .
*/

/*
  Element =
    '$ENUM' NameList |
    '$EENUM' NameList |
    '$EXTERN' NameList |
    '$FORWARD' NameList |
    '$SWAP' NameList |
    '$ESWAP' NameList |
    '$LABEL' NameList |
    '$ENTRY' Function |
    Function .
*/

ParseElements {
  t.ErrorList (e.AST) (#TkEOF s.LnNum) =
    t.ErrorList e.AST;

  t.ErrorList (e.AST) (#TkDirective s.LnNum s.Directive) e.Tail =
    <Fetch
      <ParseElement-SwDirective
        t.ErrorList s.Directive e.Tail
      >
      {
        (e.NewASTItems) t.ErrorList^ e.Tail^ =
          <ParseElements t.ErrorList (e.AST e.NewASTItems) e.Tail>;
      }
    >;

  t.ErrorList (e.AST) (#TkNativeBlock t.SrcPos e.Block) e.Tail =
    <ParseElements
      t.ErrorList (e.AST (#NativeBlock t.SrcPos e.Block)) e.Tail
    >;

  t.ErrorList (e.AST) (#TkName s.LnNum e.Name) e.Tail =
    <Fetch
      <ParseFunction #GN-Local (e.Name) t.ErrorList e.Tail>
      {
        (e.NewASTItems) t.ErrorList^ e.Tail^ =
          <ParseElements t.ErrorList (e.AST e.NewASTItems) e.Tail>;
      }
    >;

  t.ErrorList (e.AST) (#TkSemicolon s.LnNum) e.Tail =
    <ParseElements t.ErrorList (e.AST) e.Tail>;

  t.ErrorList (e.AST) t.Unexpected e.Tail =
    <ParseElements
      <EL-AddUnexpected t.ErrorList t.Unexpected 'directive or name'>
      (e.AST) e.Tail
    >;
}

ASTItemFromDirective {
  #EEnum   = #Enum        #GN-Entry;
  #Enum    = #Enum        #GN-Local;
  #ESwap   = #Swap        #GN-Entry;
  #Swap    = #Swap        #GN-Local;

  #Extern  = #Declaration #GN-Entry;

  // Директивы $FORWARD и $LABEL эквивалентны пустому месту
  #Forward = #Declaration #GN-Local;
  // Для меток не важно: entry или local.
  #Ident   = #Ident       #GN-Entry;
}

ParseElement-SwDirective {
  t.ErrorList #Entry (#TkName s.LnNum e.Name) e.Tail =
    <ParseFunction #GN-Entry (e.Name) t.ErrorList e.Tail>;

  t.ErrorList #Entry t.Unexpected e.Tail =
    (/* ничего не генерируем */)
    <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>
    t.Unexpected e.Tail;

  t.ErrorList s.Directive e.Tail =
    <ParseNameList
      (/* generated */) t.ErrorList
      <ASTItemFromDirective s.Directive>
      e.Tail
    >;
}

/*
  NameList = Name ',' NameList | Name ';' .
*/

ParseNameList {
  (e.AST) t.ErrorList s.ASTItem s.ScopeClass
  (#TkName s.LnNum e.Name) e.Tail =
    <ParseNameList-Tail
      (e.AST <Wrap s.ASTItem s.LnNum s.ScopeClass e.Name>)
      t.ErrorList s.ASTItem s.ScopeClass e.Tail
    >;

  (e.AST) t.ErrorList s.ASTItem s.ScopeClass
  t.Unexpected e.Tail =
    (e.AST)
    <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>
    t.Unexpected e.Tail;
}

Wrap {
  #Ident s.LnNum s.ScopeClass e.Name = (#Ident s.LnNum e.Name);

  s.ASTItem s.LnNum s.ScopeClass e.Name =
    (s.ASTItem s.LnNum s.ScopeClass e.Name);
}

ParseNameList-Tail {
  (e.AST) t.ErrorList s.ASTItem s.ScopeClass (#TkComma s.LnNum) e.Tail =
    <ParseNameList (e.AST) t.ErrorList s.ASTItem s.ScopeClass e.Tail>;

  (e.AST) t.ErrorList s.ASTItem s.ScopeClass (#TkSemicolon s.LnNum) e.Tail =
    (e.AST) t.ErrorList e.Tail;

  (e.AST) t.ErrorList s.ASTItem s.ScopeClass t.Unexpected e.Tail =
    (e.AST)
    <EL-AddUnexpected t.ErrorList t.Unexpected 'comma or semicolon'>
    t.Unexpected e.Tail;
}

/*
  Function = Name '{' Sentence* '}'
*/

ParseFunction {
  s.ScopeClass (e.Name) t.ErrorList (#TkOpenBlock s.LnNum) e.Tail =
    <Fetch
      <ParseBlock t.ErrorList e.Tail>
      {
        (e.Block) t.ErrorList^ e.Tail^ =
          ((#Function s.LnNum s.ScopeClass (e.Name) e.Block))
          t.ErrorList e.Tail;
      }
    >;

  s.ScopeClass (e.Name) t.ErrorList t.Unexpected e.Tail =
    (/* ничего не сгенерировали */)
    <EL-AddUnexpected t.ErrorList t.Unexpected 'open brace'>
    t.Unexpected e.Tail;
}

/*
  <ParseBlock t.ErrorList e.Tokens>
    == t.FunctionBody t.ErrorList e.Tokens

  t.FunctionBody ::= (#Sentences ((e.Pattern) (e.Result))*)

  Открывающая скобка должна отсутствовать во входном потоке.
*/
ParseBlock {
  t.ErrorList (#TkNativeBlock t.SrcPos e.Block) e.Tokens =
    <Fetch
      e.Tokens
      {
        (#TkCloseBlock t.CloseBlockSrcPos) e.Tokens^ =
          (#NativeBody t.SrcPos e.Block) t.ErrorList e.Tokens;

        t.Unexpected e.Tokens^ =
          (#NativeBody t.SrcPos e.Block)
          <EL-AddUnexpected t.ErrorList t.Unexpected '}'>
          t.Unexpected e.Tokens;
      }
    >;

  t.ErrorList e.Tokens =
    <DoParseBlock
      t.ErrorList
      (/* sentences */) e.Tokens
    >;
}

DoParseBlock {
  t.ErrorList (e.Sentences) (#TkCloseBlock s.LnNumber) e.Tail =
    (#Sentences e.Sentences) t.ErrorList e.Tail;

  t.ErrorList (e.Sentences) (#TkEOF s.LnNum) e.Tail =
    (#Sentences e.Sentences)
    <EL-AddErrorAt
      t.ErrorList s.LnNum 'Unexpected EOF, expected "}"'
    >
    (#TkEOF s.LnNum) e.Tail;

  t.ErrorList (e.Sentences) e.Tokens =
    <DoParseBlock
      <ParseSentence t.ErrorList (e.Sentences) e.Tokens>
    >;
}

ParseSentence {
  t.ErrorList (e.Sentences) e.Tokens =
    <Fetch
      <ParsePattern
        t.ErrorList ( /* мультискобки */ )
        ( /* просканировано */ ) e.Tokens
      >
      <Seq
        {
          t.ErrorList^ (e.Pattern) (#TkReplace s.LnNum) e.Tokens^ =
            t.ErrorList (e.Pattern) e.Tokens;

          t.ErrorList^ (e.Pattern) t.NextResultToken e.Tokens^ =
            <EL-AddUnexpected
              t.ErrorList t.NextResultToken '='
            >
            (e.Pattern) t.NextResultToken e.Tokens;
        }
        {
          t.ErrorList^ (e.Pattern) e.Tokens^ =
            (e.Pattern)
            <ParseResult
              t.ErrorList
              ( /* мультискобки */ ) ( /* просканировано */ ) e.Tokens
            >;
        }
        {
          (e.Pattern) t.ErrorList^
          (e.Result) (#TkSemicolon s.LnNum) e.Tokens^ =
            t.ErrorList
            (e.Sentences ((e.Pattern) (e.Result))) e.Tokens;

          (e.Pattern) t.ErrorList^
          (e.Result) (#TkCloseBlock s.LnNum) e.Tokens^ =
            <EL-AddErrorAt t.ErrorList s.LnNum 'Missed semicolon'>
            (e.Sentences ((e.Pattern) (e.Result)))
            (#TkCloseBlock s.LnNum) e.Tokens;

          (e.Pattern) t.ErrorList^
          (e.Result) (#TkEOF s.LnNum) =
            <EL-AddErrorAt t.ErrorList s.LnNum 'Unexpected EOF in function'>
            (e.Sentences ((e.Pattern) (e.Result)))
            (#TkEOF s.LnNum);

          (e.Pattern) t.ErrorList^
          (e.Result) t.Unexpected e.Tokens^ =
            <EL-AddUnexpected t.ErrorList t.Unexpected 'semicolon'>
            (e.Sentences ((e.Pattern) (e.Result)))
            e.Tokens;
        }
      >
    >;
}

ParsePattern {
  // Обработка литералов атомов

  t.ErrorList (e.MultiBrackets) (e.Scanned) (#TkChar s.LnNum s.Char) e.Tail =
    <ParsePattern
      t.ErrorList (e.MultiBrackets) (e.Scanned (#TkChar s.Char)) e.Tail
    >;

  t.ErrorList (e.MultiBrackets)
  (e.Scanned) (#TkNumber s.LnNum s.Number) e.Tail =
    <ParsePattern
      t.ErrorList (e.MultiBrackets) (e.Scanned (#TkNumber s.Number)) e.Tail
    >;

  t.ErrorList (e.MultiBrackets) (e.Scanned) (#TkName s.LnNum e.Name) e.Tail =
    <ParsePattern
      t.ErrorList (e.MultiBrackets) (e.Scanned (#TkName s.LnNum e.Name)) e.Tail
    >;

  t.ErrorList (e.MultiBrackets)
  (e.Scanned)
  (#TkIdentMarker s.LnNumMarker) (#TkName s.LnNumName e.Name) e.Tail =
    <ParsePattern
      t.ErrorList (e.MultiBrackets) (e.Scanned (#TkIdentifier e.Name)) e.Tail
    >;

  t.ErrorList (e.MultiBrackets) (e.Scanned) (#TkIdentMarker s.LnNum) e.Tail =
    <ParsePattern
      <EL-AddErrorAt t.ErrorList s.LnNum 'Missed name after ''#'''>
      (e.MultiBrackets)
      (e.Scanned) e.Tail
    >;

  // Переменные

  t.ErrorList (e.MultiBracket)
  (e.Scanned)
  (#TkVariable s.LnNumVar s.Mode e.Index)
  (#TkRedefinition s.LnNumRedef)
  e.Tail =
    <ParsePattern
      t.ErrorList (e.MultiBracket)
      (e.Scanned (#TkNewVariable s.LnNumVar s.Mode e.Index)) e.Tail
    >;

  t.ErrorList (e.MultiBracket)
  (e.Scanned) (#TkVariable s.LnNum s.Mode e.Index) e.Tail =
    <ParsePattern
      t.ErrorList (e.MultiBracket)
      (e.Scanned (#TkVariable s.LnNum s.Mode e.Index)) e.Tail
    >;

  t.ErrorList (e.MultiBracket)
  (e.Scanned) (#TkRedefinition s.LnNum) e.Tail =
    <ParsePattern
      <EL-AddErrorAt t.ErrorList s.LnNum 'Naked redefinition sign'>
      (e.MultiBracket)
      (e.Scanned) e.Tail
    >;

  /*
    Скобки.

    Стратегия обработки ошибок: если мы встретили "не ту" закрывающую скобку,
    считаем, что "та" была пропущена. Если имеем непарную открывающую скобку,
    считаем, что соответствующая скобка была пропущена в конце выражения;
    если имеем непарную закрывающую скобку, считаем её лишней.
  */

  t.ErrorList (e.MultiBracket)
  (e.Scanned) (# Open s.LnNum #TkOpenBracket) e.Tail =
    <ParsePattern
      t.ErrorList
      (
        e.MultiBracket
        (#Brackets s.LnNum #TkCloseBracket e.Scanned)
      )
      () e.Tail
    >;

  t.ErrorList (e.MultiBracket)
  (e.Scanned)
  (# Open s.LnNumBracket #TkOpenADT) (#TkName s.LnNumName e.Name) e.Tail =
    <ParsePattern
      t.ErrorList
      (
        e.MultiBracket
        (#ADT-Brackets s.LnNumBracket #TkCloseADT e.Scanned)
      )
      (s.LnNumName (e.Name)) e.Tail
    >;

  t.ErrorList (e.MultiBracket)
  (e.Scanned) (# Open s.LnNum #TkOpenADT) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList s.LnNum 'Expected name after "["'
      >
      (
        e.MultiBracket
        (#ADT-Brackets s.LnNum #TkCloseADT e.Scanned)
      )
      (s.LnNum (#UnnamedADT)) e.Tail
    >;

  t.ErrorList (e.MultiBracket)
  (e.Scanned) (# Open s.LnNum #TkOpenCall) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList s.LnNum 'Unexpected call bracket in pattern expression'
      >
      (
        e.MultiBracket
        (#Brackets s.LnNum #TkCloseCall e.Scanned)
      )
      () e.Tail
    >;

  t.ErrorList
  (
    e.MultiBracket
    (s.BracketsSign s.InnerLnNum s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) (# Close s.ClosedLnNum s.CloseBracket) e.Tail =
    <ParsePattern
      t.ErrorList (e.MultiBracket)
      (e.Scanned (s.BracketsSign e.InnerScanned))
      e.Tail
    >;

  t.ErrorList
  (
    e.MultiBracket
    (s.BracketsSign s.InnerLnNum s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) (# Close s.LnNum s.OtherCloseBracket) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList s.InnerLnNum
        'Unbalanced bracket "' <StrFromBracket s.BracketsSign> '"'
      >
      (e.MultiBracket)
      (e.Scanned (s.BracketsSign e.InnerScanned))
      (# Close s.LnNum s.OtherCloseBracket) e.Tail
    >;

  t.ErrorList () (e.Scanned) (# Close s.LnNum s.CloseBracket) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList s.LnNum
        'Unbalanced bracket "' <StrFromBracket s.CloseBracket> '"'
      >
      ()
      (e.Scanned) e.Tail
    >;

  t.ErrorList
  (
    e.MultiBracket
    (s.BracketsSign s.InnerLnNum s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) e.Tail =
    <ParsePattern
      <EL-AddErrorAt
        t.ErrorList s.InnerLnNum
        'Unbalanced bracket "' <StrFromBracket s.BracketsSign> '"'
      >
      (e.MultiBracket)
      (e.Scanned (s.BracketsSign e.InnerScanned))
      e.Tail
    >;

  t.ErrorList () (e.Pattern) e.Tail =
    t.ErrorList (e.Pattern)  e.Tail;
}

StrFromBracket {
  #TkOpenBracket = '('; #TkCloseBracket = ')';
  #TkOpenCall = '<'; #TkCloseCall = '>';
  #TkOpenADT = '['; #TkCloseADT = ']';
  #Brackets = '(';
  #ADT-Brackets = '[';
  #CallBrackets = '<';
}

/*
  <ParseResult t.ErrorList (e.MultiBracket) (e.Scanned) e.Tail>
*/
ParseResult {
  // Обработка литералов атомов

  t.ErrorList (e.MultiBracket) (e.Scanned) (#TkChar s.LnNum s.Char) e.Tail =
    <ParseResult
      t.ErrorList (e.MultiBracket) (e.Scanned (#TkChar s.Char)) e.Tail
    >;

  t.ErrorList (e.MultiBracket) (e.Scanned) (#TkNumber s.LnNum s.Number) e.Tail =
    <ParseResult
      t.ErrorList (e.MultiBracket) (e.Scanned (#TkNumber s.Number)) e.Tail
    >;

  t.ErrorList (e.MultiBracket) (e.Scanned) (#TkName s.LnNum e.Name) e.Tail =
    <ParseResult
      t.ErrorList (e.MultiBracket) (e.Scanned (#TkName s.LnNum e.Name)) e.Tail
    >;

  t.ErrorList (e.MultiBracket)
  (e.Scanned)
  (#TkIdentMarker s.MarkerLnNum) (#TkName s.NameLnNum e.Name) e.Tail =
    <ParseResult
      t.ErrorList (e.MultiBracket) (e.Scanned (#TkIdentifier e.Name)) e.Tail
    >;

  t.ErrorList (e.MultiBracket) (e.Scanned) (#TkIdentMarker s.LnNum) e.Tail =
    <ParseResult
      <EL-AddErrorAt t.ErrorList s.LnNum 'Missed name after "#"'>
      (e.MultiBracket) (e.Scanned) e.Tail
    >;

  // Переменные

  t.ErrorList
  (e.MultiBracket) (e.Scanned) (#TkVariable s.LnNum s.Mode e.Index) e.Tail =
    <ParseResult
      t.ErrorList (e.MultiBracket)
      (e.Scanned (#TkVariable s.LnNum s.Mode e.Index)) e.Tail
    >;

  /*
    Скобки.

    Стратегия обработки ошибок: если мы встретили "не ту" закрывающую скобку,
    считаем, что "та" была пропущена. Если имеем непарную открывающую скобку,
    считаем, что соответствующая скобка была пропущена в конце выражения;
    если имеем непарную закрывающую скобку, считаем её лишней.
  */

  // Хитро обрабатываются АДТ-скобки, т.к. требуется, чтобы после них было имя.

  t.ErrorList (e.MultiBracket)
  (e.Scanned)
  (# Open s.LnNumADT #TkOpenADT) (#TkName s.LnNumName e.Name) e.Tail =
    <ParseResult
      t.ErrorList
      (
        e.MultiBracket
        (#ADT-Brackets s.LnNumADT #TkCloseADT e.Scanned)
      )
      (s.LnNumName (e.Name)) e.Tail
    >;

  t.ErrorList
  (e.MultiBracket) (e.Scanned) (# Open s.LnNum #TkOpenADT) e.Tail =
    <ParseResult
      <EL-AddErrorAt
        t.ErrorList s.LnNum 'Expected name after "["'
      >
      (
        e.MultiBracket
        (#ADT-Brackets s.LnNum #TkCloseADT e.Scanned)
      )
      (s.LnNum (#UnnamedADT)) e.Tail
    >;

  // Структурные и угловые скобки обрабатываются одинаково
  t.ErrorList
  (e.MultiBracket) (e.Scanned) (# Open s.LnNum s.OpenBracket) e.Tail =
    <ParseResult
      t.ErrorList
      (
        e.MultiBracket
        (
          <Fetch
            s.OpenBracket
            {
              #TkOpenBracket = #Brackets;
              #TkOpenCall = #CallBrackets;
            }
          >
          s.LnNum
          <Fetch
            s.OpenBracket
            {
              #TkOpenBracket = #TkCloseBracket;
              #TkOpenCall = #TkCloseCall;
            }
          >
          e.Scanned
        )
      )
      () e.Tail
    >;

  // Правильная закрывающая скобка
  t.ErrorList
  (
    e.MultiBracket
    (s.BracketsSign s.OpenLnNum s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) (# Close s.LnNum s.CloseBracket) e.Tail =
    <ParseResult
      t.ErrorList
      (e.MultiBracket) (e.Scanned (s.BracketsSign e.InnerScanned))
      e.Tail
    >;

  // Лямбда-функция
  t.ErrorList (e.MultiBracket) (e.Scanned) (#TkOpenBlock s.LnNum) e.Tail =
    <Fetch
      <ParseBlock t.ErrorList e.Tail>
      {
        (e.Block) t.ErrorList^ e.Tail^ =
          <ParseResult
            t.ErrorList (e.MultiBracket)
            (e.Scanned (#Closure e.Block)) e.Tail
          >;
      }
    >;

  // Неправильная закрывающая скобка или закрывающая скобка отсутствует
  t.ErrorList
  (
    e.MultiBracket
    (s.BracketsSign s.OpenLnNum s.CloseBracket e.Scanned)
  )
  (e.InnerScanned) e.Tail =
    <ParseResult
      <EL-AddErrorAt
        t.ErrorList s.OpenLnNum
        'Unbalanced bracket "' <StrFromBracket s.BracketsSign> '"'
      >
      (e.MultiBracket) (e.Scanned (s.BracketsSign e.InnerScanned))
      e.Tail
    >;

  t.ErrorList () (e.Scanned) (# Close s.LnNum s.CloseBracket) e.Tail =
    <ParseResult
      <EL-AddErrorAt
        t.ErrorList s.LnNum
        'Unbalanced bracket "' <StrFromBracket s.CloseBracket> '"'
      >
      () (e.Scanned) e.Tail
    >;

  t.ErrorList () (e.Result) e.Tail =
    t.ErrorList (e.Result) e.Tail;
}
