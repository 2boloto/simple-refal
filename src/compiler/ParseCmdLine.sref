//FROM GetOpt
$EXTERN GetOpt;

//FROM LibraryEx
$EXTERN Fetch, Seq, MapReduce, Map;

//FROM Config
$EXTERN Config-Create, Config-SetCppCompiler, Config-SetCompilerFlags,
  Config-SetOptFlags, Config-SetErrorFile, Config-SetMarkupContext,
  Config-SetDebugInfo, Config-SetGrammarCheck, Config-SetTargetFileName,
  Config-SetTargetSuffix, Config-SetSearchFolder;

/**
  <ParseCommandLine e.Arguments>
    == #Success t.Config (s.ArgNum e.File)*
    == #Fails (s.ArgNum e.ErrorMessage)
*/
$ENTRY ParseCommandLine {
  e.Arguments =
    <Fetch
      <GetOpt
        (
          (#CppCompiler #Required 'c' ('cpp-command'))
          (#Opt #Required 'O')
          (#ErrorFile #Required 'e' ('error-file'))
          (#MarkupContext #None ('markup-context'))
          (#DebugInfo #None 'g' ('debug-info'))
          (#SearchFolder #Required 'd' ('dir') ('directory'))
          (#CppFlags #Required 'CF' ('cppflags'))
          (#CppFlag #Required 'f' ('cppflag'))
          (#RuntimeFolder #Required 'D' ('runtime-dir') ('runtime-directory'))
          (#GrammarCheck #None ('grammar-check'))
          (#TargetFileName #Required 'o' ('target-file'))
          (#TargetSuffix #Required ('targsuffix') ('targetsuffix') ('targsuf'))
        )
        e.Arguments
      >
      <Seq
        {
          (e.Errors) e.Options
            = (<Config-Create> e.Errors) e.Options;
        }
        (MapReduce
          {
            (t.Config e.Errors^) (#CppCompiler s.Num e.CppCompiler)
              = <Update
                  t.Config (e.Errors) Config-SetCppCompiler s.Num e.CppCompiler
                >;

            (t.Config e.Errors^) (#CppFlags s.Num e.Flags)
              = <Update
                  t.Config (e.Errors) Config-SetCompilerFlags s.Num ' ' e.Flags
                >;

            (t.Config e.Errors^) (#CppFlag s.Num e.Flag)
              = <Update
                  t.Config (e.Errors)
                  Config-SetCompilerFlags s.Num ' "' e.Flag '"'
                >;

            (t.Config e.Errors^) (#RuntimeFolder s.Num e.Path)
              = <Update
                  t.Config (e.Errors)
                  Config-SetCompilerFlags s.Num ' -I"' e.Path '"'
                >
                (#SearchFolder s.Num e.Path);

            (t.Config e.Errors^) (#Opt s.Num e.Flags)
              = <Update t.Config (e.Errors) Config-SetOptFlags s.Num e.Flags>;

            (t.Config e.Errors^) (#ErrorFile s.Num e.FileName)
              = <Update
                  t.Config (e.Errors) Config-SetErrorFile s.Num e.FileName
                >;

            (t.Config e.Errors^) (#MarkupContext s.Num)
              = <Update t.Config (e.Errors) Config-SetMarkupContext s.Num>;

            (t.Config e.Errors^) (#DebugInfo s.Num)
              = <Update t.Config (e.Errors) Config-SetDebugInfo s.Num>;

            (t.Config e.Errors^) (#GrammarCheck s.Num)
              = <Update t.Config (e.Errors) Config-SetGrammarCheck s.Num>;

            (t.Config e.Errors^) (#TargetFileName s.Num e.FileName)
              = <Update
                  t.Config (e.Errors) Config-SetTargetFileName s.Num e.FileName
                >;

            (t.Config e.Errors^) (#TargetSuffix s.Num e.Suffix)
              = <Update
                  t.Config (e.Errors) Config-SetTargetSuffix s.Num e.Suffix
                >;

            (t.Config e.Errors^) t.Option
              = (t.Config e.Errors) t.Option;
          }
        )
        (MapReduce
          {
            (t.Config e.Errors) (#SearchFolder s.Num e.Folder)
              = (<Config-SetSearchFolder t.Config e.Folder> e.Errors);

            (t.Config e.Errors) (#FILE s.Num e.FileName)
              = (t.Config e.Errors) (s.Num e.FileName);
          }
        )
        {
          (t.Config /* нет ошибок */) e.FileNames =
            #Success t.Config e.FileNames;

          (t.Config e.Errors) e.FileNames =
            #Fails
            <Map
              {
                (s.Pos #NoRequiredParam e.Param) =
                  (s.Pos 'option ' e.Param ' expects parameter');

                (s.Pos #UnknownShortOption s.Option) =
                  (s.Pos 'unknown option -' s.Option);

                (s.Pos #UnknownLongOption e.Option) =
                  (s.Pos 'unknown option --' e.Option);

                // У нас все опции с параметрами, не должно возникать
                // (s.Pos #UnexpectedLongOptionParam (e.Option) e.Param) =

                (s.Pos #RepeatOption s.Tag) =
                  (
                    s.Pos
                    'option '
                    <Fetch
                      s.Tag {
                        #CppCompiler = '-c or --cpp-command';
                        #Opt = '-O';
                        #ErrorFile = '-e or --error-file';
                      }
                    >
                    ' must appear one time'
                  );

                (s.Pos #BadValue-Opt e.BadValue) =
                  (
                    s.Pos
                    'option -O expects ''P'', ''R'', ''d'' or '
                    'it''s combination, but got ''' e.BadValue ''
                  );

                (s.Pos #EmptyErrorFileName)
                  = (s.Pos 'option --error-file expects non-empty argument');
              }
              e.Errors
            >;
        }
      >
    >;
}

Update {
  t.Config (e.Errors) s.Updater s.LineNum e.Option
    = <Fetch
        <s.Updater t.Config e.Option>
        {
          #Success t.Config^ = (t.Config e.Errors);

          #Fails e.ErrorMessage
            = (t.Config e.Errors (s.LineNum e.ErrorMessage));
        }
      >;
}
