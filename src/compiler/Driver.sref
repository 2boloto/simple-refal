//FROM LibraryEx
$EXTERN Fetch, Seq, SaveFile, SaveBytes;

//FROM LoadSource
$EXTERN LoadSource;

//FROM Lexer
$EXTERN LexFolding;

//FROM Parser
$EXTERN ParseProgram;

//FROM Error
$EXTERN EL-Create, EL-Destroy;

//FROM Checker
$EXTERN CheckProgram;

//FROM Config
$EXTERN Config-GetDebugMode, Config-GetOptPattern, Config-GetOptResult,
  Config-GetGenMode;

//FROM Desugaring
$EXTERN Desugar;

//FROM HighLevelRASL
$EXTERN HighLevelRASL;

//FROM LowLevelRASL
$EXTERN LowLevelRASL;

//FROM Generator-RASL
$EXTERN GenProgram-RASL;

//FROM Generator-Native
$EXTERN GenProgram-Native;

/**
  <CompileFile t.Config (e.SrcName) e.OutputName>
    == #Success e.OutputName t.Native
    == #Fails
  t.Native ::= #NoNative | (e.NativeOutputName)
*/
$ENTRY CompileFile {
  t.Config (e.SrcName) e.OutputName '.rasl'=
    <Fetch
      e.SrcName
      <Seq
        <FrontEnd e.SrcName>
        {
          t.ErrorList e.AST =
            <Fetch
              <EL-Destroy t.ErrorList>
              {
                #EL-NoErrors =
                  <Fetch
                    e.AST
                    <BackEnd t.Config (e.SrcName) e.OutputName>
                  >;

                #EL-HasErrors =
                  #Fails;
              }
            >;
        }
      >
    >;
}

FrontEnd {
  e.SrcName =
    <Seq
      LoadSource
      LexFolding
      (ParseProgram <EL-Create e.SrcName>)
      {
        t.ErrorList e.AST =
          <CheckProgram t.ErrorList e.AST>
          e.AST;
      }
    >;
}

BackEnd {
  t.Config (e.SrcName) e.OutputName
    = <Config-GetDebugMode t.Config> : s.MarkupContext s.DebugInfo
    = <Config-GetOptPattern t.Config> : s.OptPattern
    = <Config-GetOptResult t.Config> : s.OptResult
    = <Config-GetGenMode t.Config> : s.GenMode
    = <Seq
        (Desugar s.MarkupContext)
        (HighLevelRASL s.OptPattern s.OptResult)
        (LowLevelRASL s.GenMode s.DebugInfo (e.SrcName))
        {
          t.RASLModule =
            <BackEnd-RASLModule t.RASLModule e.OutputName '.rasl'>
            #NoNative;

          t.RASLModule t.NativeModule =
            <BackEnd-RASLModule t.RASLModule e.OutputName '.rasl'>
            <BackEnd-NativeModule
              t.NativeModule (e.SrcName) e.OutputName '.cpp'
            >;
        }
      >;
}

BackEnd-RASLModule {
  t.RASLModule e.OutputName =
    <Fetch
      <GenProgram-RASL t.RASLModule>
      {
        e.ByteStream =
          <SaveBytes (e.OutputName) e.ByteStream>;
      }
    >
    #Success e.OutputName;
}

BackEnd-NativeModule {
  t.NativeModule (e.SrcName) e.OutputName =
    <SaveFile
      (e.OutputName)
      <GenProgram-Native (e.SrcName) (e.OutputName) t.NativeModule>
    >
    (e.OutputName);
}

/**
  <GrammarCheck e.SrcName>
    == #Success
    == #Fails
*/
$ENTRY GrammarCheck {
  e.SrcName =
    <Fetch
      e.SrcName
      <Seq
        LoadSource
        LexFolding
        (ParseProgram <EL-Create e.SrcName>)
        {
          t.ErrorList e.AST =
            <Fetch
              <EL-Destroy t.ErrorList>
              {
                #EL-NoErrors = #Success;
                #EL-HasErrors = #Fails;
              }
            >;
        }
      >
    >;
}
