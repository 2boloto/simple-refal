//FROM LibraryEx
$EXTERN Map, Fetch, Seq, MapReduce, Inc, Compare;

//FROM Library
$EXTERN StrFromInt;

//FROM HighLevelRASL-GenResult-Simple
$EXTERN GenResult-Simple;

//FROM HighLevelRASL-Common
$EXTERN Inc2, PrintVar, FakeOffset, TextFromExpr;

/**
  <HighLevelRASL e.AST>
    == e.RASLAST

  e.RASLAST ::= t.RASLFunction*
  t.RASLFunction ::=
      (#Function s.ScopeClass (e.Name) t.HiRASLCommand*)
    | (s.SingularItem s.ScopeClass e.Name)
    | (#Ident e.Name)
    | (#Separator)
  s.SingularItem ::= #Enum | #Swap | #Stub | #Declaration
  t.HiRASLCommand ::=
      (#Cmd… e.Value)
    | (#CmdSentence t.HiRASLCommand*)
    | (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber t.HiRASLCommand*)
*/
$ENTRY HighLevelRASL {
  e.ProgramElements =
    <Map
      {
        (#Function s.ScopeClass (e.Name) e.Sentences) =
          <HighLevelRASL-Function
            s.ScopeClass (e.Name) e.Sentences
          >;

        (#Enum s.ScopeClass e.Name) =
          (#CmdEnum s.ScopeClass e.Name);

        (#Swap s.ScopeClass e.Name) =
          (#CmdSwap s.ScopeClass e.Name);

        (#Stub s.ScopeClass e.Name) =
          /* пусто */;

        (#Declaration s.ScopeClass e.Name) =
          (#CmdDeclaration s.ScopeClass e.Name);

        (#Ident e.Name) = (#CmdDefineIdent e.Name);

        (#Separator) = (#CmdSeparator);
      }
      e.ProgramElements
    >;
}

HighLevelRASL-Function {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      e.Sentences
      <Seq
        (Map
          {
            ((e.Pattern) (e.Result)) =
              (<HighLevelRASL-Sentence (e.Pattern) (e.Result)>);
          }
        )
        (MapReduce
          {
            s.MaxMemory ((#CmdIssueMem s.Memory) e.Sentence) =
              <Fetch
                <Compare s.MaxMemory s.Memory> {
                  '<' = s.Memory;
                  s.Other = s.MaxMemory;
                }
              >
              (#CmdSentence e.Sentence);
          }
          0
        )
        {
          s.MaxMemory e.Sentences^ (#CmdSentence e.LastSentence) =
            (#Function
              s.ScopeClass (e.Name)
              (#CmdIssueMem s.MaxMemory)
              e.Sentences
              <Fetch
                e.LastSentence
                {
                  e.Commands (#CmdOpenELoop e.OpenELoop) =
                    e.Commands (#CmdOpenELoop e.OpenELoop) (#CmdFail);

                  e.LastSentence^ = e.LastSentence;
                }
              >
            );

          0 /* нет предложений */ =
            (#CmdEnum s.ScopeClass e.Name);
        }
      >
    >;
}

HighLevelRASL-Sentence {
  (e.Pattern) (e.Result) =
    <Fetch
      <GenPattern e.Pattern>
      {
        s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.PatternCommands =
          <Fetch
            <GenResult-Simple
              s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result
            >
            {
              s.ContextCount e.ResultCommands =
                <FoldOpenELoops
                  (#CmdIssueMem s.ContextCount)
                  (#CmdInitB0)
                  e.PatternCommands
                  e.ResultCommands
                >;
            }
          >;
      }
    >;
}

FoldOpenELoops {
  e.Commands-B (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber) e.Commands-E =
    e.Commands-B
    (#CmdOpenELoop
      #AlgLeft s.BracketNum s.VarNumber
      <FoldOpenELoops e.Commands-E>
    );

  e.Commands = e.Commands;
}

/*
  e.Vars ::= (s.Count s.Mode e.Index)*
*/

//==============================================================================
// Генерация образца
//==============================================================================

/*
Команды распознавания
  Литералы, формат (#Cmd*** s.Direction s.BracketNum e.Literal)
  Скобки, формат (#CmdBrackets s.Direction s.BracketNum s.InnerNum)
  АТД, формат
    (#CmdADT s.Direction s.BracketNum s.InnerNum e.Name)
  Пустые скобки, формат (#CmdEmpty #AlgLeft s.BracketNum),
    направление добавлено для единнобразия, генератором не используется
  Переменные:
    повторные, формат
      (#CmdRepeated s.Direction s.BracketNum s.Mode s.VarNumber s.SampleNumber)
    новые s и t, формат (#CmdVar s.Direction s.BracketNum s.Mode s.VarNumber)
    открытые e:
      первоначальный формат (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber)
      после обработки:
        (#CmdOpenedE-Start #AlgLeft s.BracketNum 'e' e.Index)
        (#CmdOpenedE-End #AlgLeft s.BracketNum 'e' e.Index)
  Команды сохранения скобок
    (#CmdSave s.OldNumber e.NewNumber)
  Комментарий, вносимый в исходный код (#CmdComment e.Text)
*/

GenPattern {
  e.Pattern =
    <DoGenPattern
      2 (#Junk) (#E 0 e.Pattern) (#Junk) (/* vars */) (/* commands */)
    >;
}

DoGenPattern {
  // Распознавание T-подстановки
  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#TkChar s.Char)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 (#TkChar s.Char) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgTerm s.Num s.Char))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#TkName e.Name)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 (#TkName e.Name) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgTerm s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#TkIdentifier e.Ident)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 (#TkIdentifier e.Ident) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgTerm s.Num e.Ident))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#TkNumber s.Value)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 (#TkNumber s.Value) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgTerm s.Num s.Value))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#Brackets e.SubRange)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B (#Junk e.Junk1 (#TkOpenBracket))
      (#E s.ContextOffset e.SubRange)
      (#Junk (#TkCloseBracket) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdBrackets #AlgTerm s.Num s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#ADT-Brackets (e.Name) e.SubRange)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B (#Junk e.Junk1 (#TkOpenADT) (#TkName e.Name))
      (#E s.ContextOffset e.SubRange)
      (#Junk (#TkCloseADT) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdADT #AlgTerm s.Num s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#TkVariable s.Mode e.Index)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk1 (#TkVarialbe s.Mode e.Index s.Num) e.Junk2)
      e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.Num)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgTerm s.Num s.Mode s.Num s.SampleOffset)
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#TkVariable 't' e.Index)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk1 (#TkVariable 't' e.Index s.Num) e.Junk2)
      e.Substs-E
      (e.Vars ('t' (e.Index) s.Num)) (e.Commands)
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#T s.Num (#TkVariable 's' e.Index)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk1 (#TkVariable 's' e.Index s.Num) e.Junk2)
      e.Substs-E
      (e.Vars ('s' (e.Index) s.Num))
      (e.Commands (#CmdVar #AlgTerm s.Num 's' s.ContextOffset))
    >;

  // Распознавание S-подстановки
  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#S s.Num (#TkChar s.Char)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 (#TkChar s.Char) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgTerm s.Num s.Char))
    >;
  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#S s.Num (#TkName e.Name)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 (#TkName e.Name) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgTerm s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#S s.Num (#TkIdentifier e.Ident)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 (#TkIdentifier e.Ident) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgTerm s.Num e.Ident))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#S s.Num (#TkNumber s.Value)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 (#TkNumber s.Value) e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgTerm s.Num s.Value))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#S s.Num (#TkVariable s.Mode e.Index)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk1 (#TkVariable s.Mode e.Index s.Num) e.Junk2)
      e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.Num)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgTerm s.Num s.Mode s.Num s.SampleOffset)
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#S s.Num (#TkVariable 's' e.Index)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk1 (#TkVariable 's' e.Index s.Num) e.Junk2)
      e.Substs-E
      (e.Vars ('s' (e.Index) s.Num)) (e.Commands)
    >;

  // Распознавание литералов (символьных, целочисленных, имён)
  s.ContextOffset
  e.Substs-B (#Junk e.Junk) (#E s.Num (#TkChar s.Char) e.Range) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk (#TkChar s.Char)) (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgLeft s.Num s.Char))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk) (#E s.Num (#TkNumber s.Number) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk (#TkNumber s.Number)) (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgLeft s.Num s.Number))
    >;

  s.ContextOffset
  e.Substs-B (#Junk e.Junk) (#E s.Num (#TkName e.Name) e.Range) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk (#TkName e.Name)) (#E s.Num e.Range) e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgLeft s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk) (#E s.Num (#TkIdentifier e.Name) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk (#TkIdentifier e.Name)) (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgLeft s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B (#E s.Num e.Range (#TkChar s.Char)) (#Junk e.Junk) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range) (#Junk (#TkChar s.Char) e.Junk)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgRight s.Num s.Char))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkNumber s.Number)) (#Junk e.Junk)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range) (#Junk (#TkNumber s.Number) e.Junk)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgRight s.Num s.Number))
    >;

  s.ContextOffset
  e.Substs-B (#E s.Num e.Range (#TkName e.Name)) (#Junk e.Junk) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range) (#Junk (#TkName e.Name) e.Junk)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgRight s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkIdentifier e.Name)) (#Junk e.Junk)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range) (#Junk (#TkIdentifier e.Name) e.Junk)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgRight s.Num e.Name))
    >;

  // Распознавание скобок
  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk) (#E s.Num (#Brackets e.SubRange) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#Junk e.Junk (#TkOpenBracket)) (#E s.ContextOffset e.SubRange)
      (#Junk (#TkCloseBracket)) (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdBrackets #AlgLeft s.Num s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#Brackets e.SubRange)) (#Junk e.Junk)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range) (#Junk (#TkOpenBracket))
      (#E s.ContextOffset e.SubRange) (#Junk (#TkCloseBracket) e.Junk)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdBrackets #AlgRight s.Num s.ContextOffset))
    >;

  // Распознавание АТД-скобок
  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk) (#E s.Num (#ADT-Brackets (e.Name) e.SubRange) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#Junk e.Junk (#TkOpenADT) (#TkName e.Name))
      (#E s.ContextOffset e.SubRange)
      (#Junk (#TkCloseADT)) (#E s.Num e.Range)
      e.Substs-E
      (e.Vars)
      (e.Commands (#CmdADT #AlgLeft s.Num s.ContextOffset e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#ADT-Brackets (e.Name) e.SubRange)) (#Junk e.Junk)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range) (#Junk (#TkOpenADT) (#TkName e.Name))
      (#E s.ContextOffset e.SubRange) (#Junk (#TkCloseADT) e.Junk)
      e.Substs-E
      (e.Vars)
      (e.Commands (#CmdADT #AlgRight s.Num s.ContextOffset e.Name))
    >;

  // Пустой диапазон
  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#E s.Num /* пусто */) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#Junk e.Junk1 e.Junk2) e.Substs-E
      (e.Vars) (e.Commands (#CmdEmpty #AlgLeft s.Num))
    >;

  // Распознавание переменных
  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk) (#E s.Num (#TkVariable s.Mode e.Index) e.Range)
  e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      <IncVarOffset s.ContextOffset s.Mode>
      e.Substs-B
      (#Junk e.Junk (#TkVariable s.Mode e.Index s.ContextOffset))
      (#E s.Num e.Range)
      e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.ContextOffset)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgLeft s.Num s.Mode s.ContextOffset s.SampleOffset)
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable s.Mode e.Index)) (#Junk e.Junk)
  e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      <IncVarOffset s.ContextOffset s.Mode>
      e.Substs-B
      (#E s.Num e.Range)
      (#Junk (#TkVariable s.Mode e.Index s.ContextOffset) e.Junk)
      e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.ContextOffset)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgRight s.Num s.Mode s.ContextOffset s.SampleOffset)
      )
    >;

  // Диапазон с закрытой переменной
  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk1) (#E s.Num (#TkVariable 'e' e.Index)) (#Junk e.Junk2)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#Junk e.Junk1 (#TkVariable 'e' e.Index s.Num) e.Junk2)
      e.Substs-E
      (e.Vars ('e' (e.Index) s.Num))
      (e.Commands
        (#CmdComment
          ' closed ' <PrintVar 'e' e.Index> ' as range ' #Offset s.Num
        )
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk) (#E s.Num (#TkVariable 's' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#Junk e.Junk (#TkVariable 's' e.Index s.ContextOffset))
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('s' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgLeft s.Num 's' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk) (#E s.Num (#TkVariable 't' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#Junk e.Junk (#TkVariable 't' e.Index s.ContextOffset))
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('t' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgLeft s.Num 't' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable 's' e.Index)) (#Junk e.Junk)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      (#Junk (#TkVariable 's' e.Index s.ContextOffset) e.Junk)
      e.Substs-E
      (e.Vars ('s' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgRight s.Num 's' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable 't' e.Index)) (#Junk e.Junk)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      (#Junk (#TkVariable 't' e.Index s.ContextOffset) e.Junk)
      e.Substs-E
      (e.Vars ('t' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgRight s.Num 't' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#Junk e.Junk) (#E s.Num (#TkVariable 'e' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#Junk e.Junk (#TkVariable 'e' e.Index s.ContextOffset))
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('e' (e.Index) s.ContextOffset))
      (e.Commands (#CmdOpenedE #AlgLeft s.Num s.ContextOffset))
    >;

  // Завершение разбора.
  s.ContextOffset (#Junk e.MarkedPattern) (e.Vars) (e.Commands) =
    s.ContextOffset (e.Vars) (e.MarkedPattern)
    (#CmdComment <TextFromExpr <FakeOffset e.MarkedPattern>>)
    e.Commands;
}

IncVarOffset {
  s.ContextOffset 'e' = <Inc2 s.ContextOffset>;
  s.ContextOffset 't' = <Inc s.ContextOffset>;
  s.ContextOffset 's' = <Inc s.ContextOffset>;
}
