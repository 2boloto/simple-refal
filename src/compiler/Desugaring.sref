//FROM LibraryEx
$EXTERN Fetch, Seq, Map, MapReduce, Inc, DelAccumulator, Reduce, Sort;

//FROM Library
$EXTERN StrFromInt;

$ENTRY Desugar {
  e.AST =
    <Fetch
      e.AST
      <Seq
        Pass-RemovePos
        Pass-EnumerateVariables
        Pass-NameNestedFuncs
        Pass-FlatNestedFuncs
        Pass-CreatePredeclarations
      >
    >;
}

Pass-RemovePos {
  e.AST =
    <Map
      {
        (#Function t.SrcPos s.ScopeClass (e.Name) e.Body) =
          (#Function s.ScopeClass (e.Name) <RemovePos-Body e.Body>);

        (#Ident t.SrcPos e.Name) =
          (#Ident e.Name);

        (#NativeBlock t.SrcPos e.Code) =
          (#NativeBlock t.SrcPos e.Code);

        (s.EnumSwapDeclaration t.SrcPos s.ScopeClass e.Name) =
          (s.EnumSwapDeclaration s.ScopeClass e.Name);
      }
      e.AST
    >;
}

RemovePos-Body {
  #Sentences e.Sentences =
    #Sentences
    <Map
      {
        ((e.Pattern) (e.Result)) =
          ((<RemovePos-Expr e.Pattern>) (<RemovePos-Expr e.Result>));
      }
      e.Sentences
    >;

  #NativeBody t.SrcPos e.Code = #NativeBody t.SrcPos e.Code;
}

RemovePos-Expr {
  e.Expr =
    <Map
      {
        (#TkVariable t.SrcPos s.Mode e.Index) =
          (#TkVariable s.Mode e.Index);

        (#TkNewVariable t.SrcPos s.Mode e.Index) =
          (#TkNewVariable s.Mode e.Index);

        (#TkName t.SrcPos e.Name) = (#TkName e.Name);

        (#Brackets e.InBrackets) =
          (#Brackets <RemovePos-Expr e.InBrackets>);

        (#ADT-Brackets t.SrcPos (e.Name) e.InBrackets) =
          (#ADT-Brackets (e.Name) <RemovePos-Expr e.InBrackets>);

        (#CallBrackets e.InBrackets) =
          (#CallBrackets <RemovePos-Expr e.InBrackets>);

        (#Closure e.Sentences) =
          (#Closure <RemovePos-Body e.Sentences>);

        t.OtherTerm = t.OtherTerm;
      }
      e.Expr
    >;
}

Pass-EnumerateVariables {
  e.AST =
    <Map
      {
        (#Function s.ScopeClass (e.Name) e.Body) =
          (#Function
            s.ScopeClass (e.Name)
            <EnumerateVars-Sentences 1 (/* переменные */) e.Body>
          );

        t.OtherProgramElement = t.OtherProgramElement;
      }
      e.AST
    >;
}

EnumerateVars-Sentences {
  s.Depth (e.ScopeVars) #Sentences e.Sentences =
    #Sentences
    <Map
      {
        ((e.Pattern) (e.Result)) =
          <Fetch
            <EnumerateVars-Expr s.Depth (e.ScopeVars) e.Pattern>
            {
              (e.ScopeVars^) e.Pattern^ =
                <Fetch
                  <EnumerateVars-Expr s.Depth (e.ScopeVars) e.Result>
                  {
                    (e.ScopeVars^) e.Result^ =
                      ((e.Pattern) (e.Result));
                  }
                >;
            }
          >;
      }
      e.Sentences
    >;

  s.Depth (e.ScopeVars) #NativeBody t.SrcPos e.Code =
    #NativeBody t.SrcPos e.Code;
}

EnumerateVars-Expr {
  s.Depth (e.OriginScopeVars) e.Expr =
    <MapReduce
      {
        (e.ScopeVars-B (s.Mode e.Index s.Depth^) e.ScopeVars-E)
        (#TkVariable s.Mode e.Index) =
          (e.ScopeVars-B (s.Mode e.Index s.Depth) e.ScopeVars-E)
          (#TkVariable s.Mode e.Index s.Depth);

        (e.ScopeVars) (#TkVariable s.Mode e.Index) =
          ((s.Mode e.Index s.Depth) e.ScopeVars)
          (#TkVariable s.Mode e.Index s.Depth);

        (e.ScopeVars) (#TkNewVariable s.Mode e.Index) =
          ((s.Mode e.Index s.Depth) e.ScopeVars)
          (#TkVariable s.Mode e.Index s.Depth);

        (e.ScopeVars) (#Brackets e.InBrackets) =
          <Fetch
            <EnumerateVars-Expr s.Depth (e.ScopeVars) e.InBrackets>
            {
              (e.ScopeVars^) e.InBrackets^ =
                (e.ScopeVars) (#Brackets e.InBrackets);
            }
          >;

        (e.ScopeVars) (#ADT-Brackets (e.Name) e.InBrackets) =
          <Fetch
            <EnumerateVars-Expr s.Depth (e.ScopeVars) e.InBrackets>
            {
              (e.ScopeVars^) e.InBrackets^ =
                (e.ScopeVars) (#ADT-Brackets (e.Name) e.InBrackets);
            }
          >;

        (e.ScopeVars) (#CallBrackets e.InBrackets) =
          <Fetch
            <EnumerateVars-Expr s.Depth (e.ScopeVars) e.InBrackets>
            {
              (e.ScopeVars^) e.InBrackets^ =
                (e.ScopeVars) (#CallBrackets e.InBrackets);
            }
          >;

        (e.ScopeVars) (#Closure e.Sentences) =
          <Fetch
            <EnumerateVars-Sentences <Inc s.Depth> (e.ScopeVars) e.Sentences>
            {
              e.Sentences^ =
                (e.ScopeVars) (#Closure e.Sentences);
            }
          >;

        (e.ScopeVars) t.OtherTerm = (e.ScopeVars) t.OtherTerm;
      }
      (e.OriginScopeVars) e.Expr
    >;
}

Pass-NameNestedFuncs {
  e.AST =
    <Map
      {
        (#Function s.ScopeClass (e.Name) e.Body) =
          (#Function
            s.ScopeClass (e.Name)
            <NameNestedBody (e.Name #SUF) e.Body>
          );

        t.OtherProgramElement = t.OtherProgramElement;
      }
      e.AST
    >;
}

NameNestedBody {
  (e.MainName) #Sentences ((e.Pattern) (e.Result)) =
    #Sentences
    (
      (e.Pattern)
      (<NameNestedResult (e.MainName) e.Result>)
    );

  (e.MainName) #Sentences e.Sentences =
    #Sentences
    <DelAccumulator
      <MapReduce
        {
          s.SentenceNumber ((e.Pattern) (e.Result)) =
            <Inc s.SentenceNumber>
            (
              (e.Pattern)
              (<NameNestedResult (e.MainName '$' s.SentenceNumber) e.Result>)
            );
        }
        1 e.Sentences
      >
    >;

  (e.MainName) #NativeBody t.SrcPos e.Code =
    #NativeBody t.SrcPos e.Code;
}

NameNestedResult {
  (e.MainName) e.Result =
    <DelAccumulator <NameNestedResultRec 1 (e.MainName) e.Result>>;
}

NameNestedResultRec {
  s.StartNumber (e.MainName) e.Result =
    <MapReduce
      {
        s.NextNumber (#Brackets e.InBrackets) =
          <Fetch
            <NameNestedResultRec s.NextNumber (e.MainName) e.InBrackets>
            {
              s.NextNumber^ e.InBrackets^ =
                s.NextNumber (#Brackets e.InBrackets);
            }
          >;

        s.NextNumber (#ADT-Brackets (e.Name) e.InBrackets) =
          <Fetch
            <NameNestedResultRec s.NextNumber (e.MainName) e.InBrackets>
            {
              s.NextNumber^ e.InBrackets^ =
                s.NextNumber (#ADT-Brackets (e.Name) e.InBrackets);
            }
          >;

        s.NextNumber (#CallBrackets e.InBrackets) =
          <Fetch
            <NameNestedResultRec s.NextNumber (e.MainName) e.InBrackets>
            {
              s.NextNumber^ e.InBrackets^ =
                s.NextNumber (#CallBrackets e.InBrackets);
            }
          >;

        s.NextNumber (#Closure e.Sentences) =
          <Inc s.NextNumber>
          (#Closure
            (e.MainName '\\' s.NextNumber)
            <NameNestedBody (e.MainName '\\' s.NextNumber) e.Sentences>
          );

        s.NextNumber t.OtherTerm = s.NextNumber t.OtherTerm;
      }
      s.StartNumber e.Result
    >;
}

Pass-FlatNestedFuncs {
  e.AST =
    <Map
      {
        (#Function s.ScopeClass (e.Name) e.Body) =
          <Fetch
            <ExtractNested e.Body>
            {
              (e.NestedFuncs) e.Body^ =
                e.NestedFuncs
                (#Function s.ScopeClass (e.Name) e.Body);
            }
          >;

        t.OtherProgramElement = t.OtherProgramElement;
      }
      e.AST
    >;
}

ExtractNested {
  e.Sentences =
    <Fetch
      <ExtractNestedRec (/* внешних переменных нет */) e.Sentences>
      {
        (/* заимстовованных переменных нет */) (e.NestedFuncs) e.Sentences^ =
          (e.NestedFuncs) e.Sentences;
      }
    >;
}

ExtractNestedRec {
  (e.ScopeVars) #Sentences e.Sentences =
    <Fetch
      <MapReduce
        {
          ((e.NestedFuncs) (e.BorrowedVars)) ((e.Pattern) (e.Result)) =
            <Fetch
              <ExtractNested-Pattern (e.ScopeVars) (e.BorrowedVars) e.Pattern>
              {
                (e.BorrowedVars^) e.LocalVars =
                  <Fetch
                    <ExtractNested-Result
                      (e.NestedFuncs) (e.BorrowedVars)
                      (e.ScopeVars) (e.LocalVars) e.Result
                    >
                    {
                      (e.NestedFuncs^) (e.BorrowedVars^) e.Result^ =
                        ((e.NestedFuncs) (e.BorrowedVars))
                        ((e.Pattern) (e.Result));
                    }
                  >;
              }
            >;
        }
        ((/* вложенные функции */) (/* заимствованные переменные */))
        e.Sentences
      >
      {
        ((e.NestedFuncs) (e.BorrowedVars)) e.Sentences^ =
          (e.BorrowedVars) (e.NestedFuncs) #Sentences e.Sentences;
      }
    >;

  (e.ScopeVars) #NativeBody t.SrcPos e.Code =
    (/* нет заимстовованных переменных */) (/* нет вложенных функций */)
    #NativeBody t.SrcPos e.Code;
}

ExtractNested-Pattern {
  (e.ScopeVars) (e.BorrowedVars) e.Pattern =
    <Fetch
      e.Pattern
      <Seq
        ExtractAllVars
        Uniq
        (MapReduce RemoveBorrowedVars (e.BorrowedVars))
        {
          (e.BorrowedVars^) e.LocalVars =
            <MapReduce
              FindBorrowedVars
              ((e.ScopeVars) (e.BorrowedVars))
              e.LocalVars
            >;
        }
        {
          ((e.ScopeVars^) (e.BorrowedVars^)) e.LocalVars =
            (e.BorrowedVars) e.LocalVars;
        }
      >
    >;
}

ExtractAllVars {
  (#TkVariable s.Mode e.Index) e.Tail =
    (s.Mode e.Index) <ExtractAllVars e.Tail>;

  (#Brackets e.Inner) e.Tail = <ExtractAllVars e.Inner e.Tail>;
  (#ADT-Brackets e.Inner) e.Tail = <ExtractAllVars e.Inner e.Tail>;

  t.OtherTerm e.Tail = <ExtractAllVars e.Tail>;

  /* пусто */ = /* пусто */;
}

Uniq {
  e.Uniqs t.Repeated e.NotScanned-M t.Repeated e.NotScanned-E =
    e.Uniqs <Uniq e.NotScanned-M t.Repeated e.NotScanned-E>;

  e.Uniqs = e.Uniqs;
}

RemoveBorrowedVars {
  (e.BorrowedVars-B (s.Mode e.Index) e.BorrowedVars-E) (s.Mode e.Index) =
    (e.BorrowedVars-B (s.Mode e.Index) e.BorrowedVars-E)
    /* отбрасываем */;

  (e.BorrowedVars) (s.Mode e.Index) = (e.BorrowedVars) (s.Mode e.Index);
}

FindBorrowedVars {
  (
    (e.ScopeVars-B (s.Mode e.Index) e.ScopeVars-E)
    (e.BorrowedVars)
  )
  (s.Mode e.Index) =
    (
      (e.ScopeVars-B (s.Mode e.Index) e.ScopeVars-E)
      (e.BorrowedVars (s.Mode e.Index))
    );

  ((e.ScopeVars) (e.BorrowedVars)) (s.Mode e.Index) =
    ((e.ScopeVars) (e.BorrowedVars)) (s.Mode e.Index);
}

ExtractNested-Result {
  (e.OriginNestedFuncs) (e.OriginBorrowedVars) (e.ScopeVars) (e.LocalVars)
  e.OriginResult =
    <Fetch
      <MapReduce
        (ExtractNested-Result-Term (e.ScopeVars) (e.LocalVars))
        ((e.OriginNestedFuncs) (e.OriginBorrowedVars)) e.OriginResult
      >
      {
        ((e.NestedFuncs) (e.BorrowedVars)) e.Result =
          (e.NestedFuncs) (e.BorrowedVars) e.Result;
      }
    >;
}

ExtractNested-Result-Term {
  (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars)) (#TkVariable s.Mode e.Index) =
    (
      (e.NestedFuncs)
      <CheckBorrowed (e.ScopeVars) (e.BorrowedVars) (s.Mode e.Index)>
    )
    (#TkVariable s.Mode e.Index);

  (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars)) (#Brackets e.InBrackets) =
    <Fetch
      <ExtractNested-Result
        (e.NestedFuncs) (e.BorrowedVars) (e.ScopeVars) (e.LocalVars)
        e.InBrackets
      >
      {
        (e.NestedFuncs^) (e.BorrowedVars^) e.InBrackets^ =
          ((e.NestedFuncs) (e.BorrowedVars))
          (#Brackets e.InBrackets);
      }
    >;

  (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars))
  (#ADT-Brackets (e.Name) e.InBrackets) =
    <Fetch
      <ExtractNested-Result
        (e.NestedFuncs) (e.BorrowedVars) (e.ScopeVars) (e.LocalVars)
        e.InBrackets
      >
      {
        (e.NestedFuncs^) (e.BorrowedVars^) e.InBrackets^ =
          ((e.NestedFuncs) (e.BorrowedVars))
          (#ADT-Brackets (e.Name) e.InBrackets);
      }
    >;

  (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars))
  (#CallBrackets e.InBrackets) =
    <Fetch
      <ExtractNested-Result
        (e.NestedFuncs) (e.BorrowedVars) (e.ScopeVars) (e.LocalVars)
        e.InBrackets
      >
      {
        (e.NestedFuncs^) (e.BorrowedVars^) e.InBrackets^ =
          ((e.NestedFuncs) (e.BorrowedVars))
          (#CallBrackets e.InBrackets);
      }
    >;

  (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars))
  (#Closure (e.ClosureName) e.Body) =
    <Fetch
      <ExtractNestedRec (e.ScopeVars e.LocalVars) e.Body>
      {
        (/* свободные переменные в функции отсутствуют */)
        (e.NestedNestedFuncs) #Sentences e.Sentences =
          (
            (
              e.NestedFuncs e.NestedNestedFuncs
              (#Function #GN-Local (e.ClosureName) #Sentences e.Sentences)
            )
            (e.BorrowedVars)
          )
          (#TkName e.ClosureName);

        (e.NestedBorrowedVars) (e.NestedNestedFuncs) #Sentences e.Sentences =
          (
            (
              e.NestedFuncs e.NestedNestedFuncs
              (#Function
                #GN-Local (e.ClosureName)
                #Sentences
                <Map (AddContextToSentence e.NestedBorrowedVars) e.Sentences>
              )
            )
            <Reduce
              (CheckBorrowed (e.ScopeVars))
              (e.BorrowedVars) e.NestedBorrowedVars
            >
          )
          (#CallBrackets
            (#TkName #CreateClosure)
            (#TkName e.ClosureName)
            <CreateContext e.NestedBorrowedVars>
          );

        (/* свободные переменные в нативной функции отсутствуют */)
        (/* вложенные функции в нативной функции отсутствуют */)
        #NativeBody t.SrcPos e.Code =
          (
            (
              e.NestedFuncs
              (#Function #GN-Local (e.ClosureName) #NativeBody t.SrcPos e.Code)
            )
            (e.BorrowedVars)
          )
          (#TkName e.ClosureName);
      }
    >;

  (e.ScopeVars) (e.LocalVars)
  ((e.NestedFuncs) (e.BorrowedVars)) t.OtherTerm =
    ((e.NestedFuncs) (e.BorrowedVars)) t.OtherTerm;
}

CheckBorrowed {
  (e.ScopeVars) (e.BorrowedVars-B (s.Mode e.Index) e.BorrowedVars-E)
  (s.Mode e.Index) =
    (e.BorrowedVars-B (s.Mode e.Index) e.BorrowedVars-E);

  (e.ScopeVars-B (s.Mode e.Index) e.ScopeVars-E) (e.BorrowedVars)
  (s.Mode e.Index) =
    (e.BorrowedVars (s.Mode e.Index));

  (e.ScopeVars) (e.BorrowedVars) (s.Mode e.Index) =
    (e.BorrowedVars);
}

AddContextToSentence {
  e.Context ((e.Pattern) (e.Result)) =
    (
      (
        <CreateContext e.Context>
        e.Pattern
      )
      (e.Result)
    );
}

CreateContext {
  e.Context =
    <Map
      {
        ('e' e.Index) = (#Brackets (#TkVariable 'e' e.Index));
        (s.Mode e.Index) = (#TkVariable s.Mode e.Index);
      }
      e.Context
    >;
}

Pass-CreatePredeclarations {
  e.AST =
    /*
      Функция принимает абстрактное синтаксическое дерево
      и формирует новое с устранением избыточных элементов
      и созданием необходимых.
    */
    <Fetch
      e.AST
      <Seq
        RemoveRedudandElements
        FoldEnums
        (Map
          {
            (#Swap s.ScopeClass e.Name) = (#SwapEnum #Swap s.ScopeClass e.Name);
            (#Enum s.ScopeClass e.Name) = (#SwapEnum #Enum s.ScopeClass e.Name);

            t.Other = t.Other;
          }
        )
        (MapReduce
          {
            ((e.FuncDecls) (e.SwapsEnums) (e.Idents))
            (#Function s.ScopeClass (e.Name) e.Body) =
              <Fetch
                <ExtractIdents e.Body>
                {
                  (e.FuncIdents) e.Body^ =
                    (
                      (e.FuncDecls (#Declaration s.ScopeClass e.Name))
                      (e.SwapsEnums)
                      (e.Idents e.FuncIdents)
                    )
                    (#Function s.ScopeClass (e.Name) e.Body);
                }
              >;

            ((e.FuncDecls) (e.SwapsEnums) (e.Idents))
            (#SwapEnum s.Type s.ScopeClass e.Name) =
              (
                (<FuncDeclsCleanup (e.Name) e.FuncDecls>)
                (e.SwapsEnums (s.Type s.ScopeClass e.Name))
                (e.Idents)
              )
              /* пусто */;

            (
              (e.FuncDecls)
              (e.SwapEnums-B (s.Type s.ScopeClass e.Name) e.SwapEnums-E)
              (e.Idents)
            )
            (#Declaration s.ScopeClass e.Name) =
              (
                (e.FuncDecls)
                (e.SwapEnums-B (s.Type s.ScopeClass e.Name) e.SwapEnums-E)
                (e.Idents)
              )
              /* пусто */;

            ((e.FuncDecls) (e.SwapsEnums) (e.Idents))
            (#Declaration s.ScopeClass e.Name) =
              (
                (e.FuncDecls (#Declaration s.ScopeClass e.Name))
                (e.SwapsEnums)
                (e.Idents)
              )
              /* пусто */;

            ((e.FuncDecls) (e.SwapsEnums) (e.Idents))
            (#Ident e.Name) =
              ((e.FuncDecls) (e.SwapsEnums) (e.Idents (#Ident e.Name)))
              /* пусто */;

            ((e.FuncDecls) (e.SwapsEnums) (e.Idents))
            (#NativeBlock t.SrcPos e.Code) =
              ((e.FuncDecls) (e.SwapsEnums) (e.Idents))
              (#NativeBlock t.SrcPos e.Code);
          }
          ((/* объявления */) (/* swap’ы и enum’ы */) (/* идентификаторы */))
        )
        {
          ((e.FuncDecls) (e.SwapsEnums) (e.Idents)) e.Functions =
            <UniqSorted <Sort e.FuncDecls>>
            (#Separator)
            <UniqSorted <Sort e.Idents>>
            e.SwapsEnums
            e.Functions;
        }
      >
    >;
}

RemoveRedudandElements {
  /*
    При реализации вставок кода на C++ функция
    ничего не должна будет удалять, поскольку не известно,
    какие именно сущности используются или объявляются в коде.
  */
  e.AST =
    <Fetch
      e.AST
      <Seq
        {
          /*
            Если есть хотя бы один нативный блок,
            $LABEL и $FORWARD сохраняем.
          */
          e.AST-B (#NativeBlock t.SrcPos e.Code) e.AST-E =
            {
              s.Type e.Info = (s.Type e.Info);
            }
            e.AST-B (#NativeBlock t.SrcPos e.Code) e.AST-E;

          /*
            Если есть нативные функции, сохраняем только $LABEL.
          */
          e.AST-B
          (#Function s.ScopeClass (e.Name) #NativeBody e.Code)
          e.AST-E =
            {
              #Ident e.Name^ = (#Ident e.Name);
              #Declaration #GN-Local e.Name^ = /* пропускаем */;
            }
            e.AST-B
            (#Function s.ScopeClass (e.Name) #NativeBody e.Code)
            e.AST-E;

          /*
            Если ничего нативного нет, то избыточные элементы отбрасываем.
          */
          e.AST^ =
            {
              s.Type e.Info = /* пропускаем */;
            }
            e.AST;
        }
        {
          s.FnSelectiveSaver e.AST^ =
            <Map
              {
                (#Function s.ScopeClass (e.Name) e.Body) =
                  (#Function s.ScopeClass (e.Name) e.Body);

                (#Enum s.ScopeClass e.Name) =
                  (#Enum s.ScopeClass e.Name);

                (#Swap s.ScopeClass e.Name) =
                  (#Swap s.ScopeClass e.Name);

                (#Declaration #GN-Entry e.Name) =
                  (#Declaration #GN-Entry e.Name);

                (#Declaration #GN-Local e.Name) =
                  <s.FnSelectiveSaver #Declaration #GN-Local e.Name>;

                (#Ident e.Name) =
                  <s.FnSelectiveSaver #Ident e.Name>;

                (#NativeBlock t.SrcPos e.Code) =
                  (#NativeBlock t.SrcPos e.Code);
              }
              e.AST
            >;
        }
      >
    >;
}

FoldEnums {
  e.AST =
    <Map
      {
        (#Function s.ScopeClass (e.Name) /* пусто */) =
          (#Enum s.ScopeClass e.Name);

        t.Other = t.Other;
      }
      e.AST
    >;
}

ExtractIdents {
  #Sentences e.Sentences =
    <Fetch
      e.Sentences
      <Seq
        (MapReduce
          {
            (e.Idents) ((e.Pattern) (e.Result)) =
              <Fetch
                (<ExtractIdent-Expr e.Pattern>)
                (<ExtractIdent-Expr e.Result>)
                {
                  ((e.PatternIdents) e.Pattern^) ((e.ResultIdents) e.Result^) =
                    (e.Idents e.PatternIdents e.ResultIdents)
                    ((e.Pattern) (e.Result));
                }
              >;
          }
          (/* idents */)
        )
        {
          (e.Idents) e.Sentences =
            (e.Idents) #Sentences e.Sentences;
        }
      >
    >;

  #NativeBody t.SrcPos e.Code =
    (/* нет идентификаторов */) #NativeBody t.SrcPos e.Code;
}

ExtractIdent-Expr {
  e.Expr =
    <MapReduce
      {
        (e.Idents) (#TkIdentifier e.Name) =
          (e.Idents (#Ident e.Name)) (#TkIdentifier e.Name);

        (e.Idents) (#Brackets e.SubExpr) =
          <Fetch
            <ExtractIdent-Expr e.SubExpr>
            {
              (e.SubIdents) e.SubExpr^ =
                (e.Idents e.SubIdents) (#Brackets e.SubExpr);
            }
          >;

        (e.Idents) (#ADT-Brackets (e.Name) e.SubExpr) =
          <Fetch
            <ExtractIdent-Expr e.SubExpr>
            {
              (e.SubIdents) e.SubExpr^ =
                (e.Idents e.SubIdents) (#ADT-Brackets (e.Name) e.SubExpr);
            }
          >;

        (e.Idents) (#CallBrackets e.SubExpr) =
          <Fetch
            <ExtractIdent-Expr e.SubExpr>
            {
              (e.SubIdents) e.SubExpr^ =
                (e.Idents e.SubIdents) (#CallBrackets e.SubExpr);
            }
          >;

        (e.Idents) t.OtherTerm = (e.Idents) t.OtherTerm;
      }
      (/* idents */)
      e.Expr
    >;
}

FuncDeclsCleanup {
  (e.Name) e.FuncDecls-B (#Declaration s.ScopeClass e.Name) e.FuncDecls-E =
    e.FuncDecls-B <FuncDeclsCleanup (e.Name) e.FuncDecls-E>;

  (e.Name) e.FuncDecls = e.FuncDecls;
}

UniqSorted {
  e.Uniqs t.Repeated t.Repeated e.NotScanned =
    e.Uniqs <UniqSorted t.Repeated e.NotScanned>;

  e.Uniqs = e.Uniqs;
}
