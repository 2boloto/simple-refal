//FROM LibraryEx
$EXTERN Map, Reduce;

//FROM Error
$EXTERN EL-AddErrorAt;


$ENUM SymTable;

$ENTRY ST-Create {
  = [SymTable () () ()];
}

/*
  Внутренний формат
  t.SymTable ::= [SymTable (t.Reference*) (e.Externs) t.Function*]
  t.Reference ::= (s.LnNum e.Name)
  e.Idents, e.Externs ::= (e.Name)*
  t.Function ::= (s.ScopeClass e.Name)
*/

PatchReferences {
  (e.References) e.Name =
    (
      <Map
        {
          (s.LnNum e.Name) = /* пусто */;

          (s.LnNum e.Name^) = (s.LnNum e.Name);
        }
        e.References
      >
    );
}

/**
  <ST-AddDefined
    t.ErrorList t.SymTable s.ScopeClass s.LnNum e.Name
  >
    == t.ErrorList t.SymTable
*/

$ENTRY ST-AddDefined {
  t.ErrorList
  [SymTable
    (e.References) (e.Externs)
    e.Names-B (s.AnyScopeClass e.Name) e.Names-E
  ]
  s.ScopeClass s.LnNum e.Name =
    <EL-AddErrorAt t.ErrorList s.LnNum 'Function ' e.Name ' already defined'>
    [SymTable
      (e.References) (e.Externs)
      e.Names-B (s.AnyScopeClass e.Name) e.Names-E
    ];

  t.ErrorList
  [SymTable
    (e.References) (e.Externs-B (e.Name) e.Externs-E) e.Names
  ]
  s.ScopeClass s.LnNum e.Name =
    t.ErrorList
    [SymTable
      <PatchReferences (e.References) e.Name>
      (e.Externs-B e.Externs-E) e.Names (s.ScopeClass e.Name)
    ];

  t.ErrorList
  [SymTable (e.References) (e.Externs) e.Names]
  s.ScopeClass s.LnNum e.Name =
    t.ErrorList
    [SymTable
      <PatchReferences (e.References) e.Name>
      (e.Externs) e.Names (s.ScopeClass e.Name)
    ];
}

$ENTRY ST-AddExtern {
  /*
    Можно повторно объявить имя не зависимо от того, было ли оно до этого
    объявлено или определено.
  */
  t.ErrorList
  [SymTable
    (e.References) (e.Externs-B (e.Name) e.Externs-E) e.Names
  ]
  e.Name =
    t.ErrorList
    [SymTable
      (e.References) (e.Externs-B (e.Name) e.Externs-E) e.Names
    ];

  t.ErrorList
  [SymTable
    (e.References) (e.Externs)
    e.Names-B (s.ScopeClass e.Name) e.Names-E
  ]
  e.Name =
    t.ErrorList
    [SymTable
      (e.References) (e.Externs)
      e.Names-B (s.ScopeClass e.Name) e.Names-E
    ];

  t.ErrorList
  [SymTable (e.References) (e.Externs) e.Names] e.Name =
    t.ErrorList
    [SymTable
      <PatchReferences (e.References) e.Name>
      (e.Externs (e.Name)) e.Names
    ];
}

$ENTRY ST-AddFunctionCall {
  [SymTable
    (e.References) (e.Externs-B (e.Name) e.Externs-E) e.Names
  ]
  s.LnNum e.Name =
    [SymTable
      (e.References) (e.Externs-B (e.Name) e.Externs-E) e.Names
    ];

  [SymTable
    (e.References) (e.Externs)
    e.Names-B (s.ScopeClass e.Name) e.Names-E
  ]
  s.LnNum e.Name =
    [SymTable
      (e.References) (e.Externs)
      e.Names-B (s.ScopeClass e.Name) e.Names-E
    ];

  [SymTable (e.References) (e.Externs) e.Names] s.LnNum e.Name =
    [SymTable (e.References (s.LnNum e.Name)) (e.Externs) e.Names];
}

$ENTRY ST-AddUnresolved {
  t.ErrorList [SymTable (e.References) (e.Externs) e.Names] =
    <Reduce
      {
        t.ErrorList^ (s.LnNum e.Name) =
          <EL-AddErrorAt
            t.ErrorList s.LnNum 'Function ' e.Name ' is not defined'
          >;
      }
      t.ErrorList e.References
    >;
}

$ENTRY ST-GetAnyName {
  [SymTable
    (e.References) (e.Externs)
    e.Names-B (s.ScopeClass e.Name) e.Names-E
  ] =
    e.Name;
}
