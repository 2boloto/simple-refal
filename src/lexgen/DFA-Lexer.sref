//FROM Escape
$EXTERN EscapeString;

//FROM LibraryEx
$EXTERN Fetch, Seq, Map, MapReduce, Inc;

//FROM Library
$EXTERN IntFromStr, Chr;


//==============================================================================
// Лексический разбор
//==============================================================================

$ENTRY DFA-TextFromToken {
  #TSetName e.Name = 'set name ' e.Name;
  #TLiteral e.Text = 'literal ''' <EscapeString e.Text> '';
  #TName e.Name = 'name ' e.Name;
  #TNamedFlush e.Name = 'named flush ' e.Name;
  #TEquals = '"="';
  #TDot = '"."';
  #TAlternative = '"|"';
  #TFlush = 'flush';
  #TErrorFlush e.Text = 'error flush "' e.Text '"';
  #TEOF = 'end of file';
}

/**
  <DFA-Tokens s.FirstLineNumber (e.Line)*>
    == t.Token*

  t.Token ::= (s.TokType t.SrcPos e.Info)

  s.TokType e.Info ::=
      #TEquals
    | #TDot
    | #TAlternative
    | #TSetName
    | #TFlush
    | #TErrorFlush e.Message
    | #TNamedFlush e.TokTag
    | #TLiteral e.Chars
    | #TName e.Name
*/
$ENTRY DFA-Tokens {
  s.FirstLineNumber e.Lines =
    <Fetch
      e.Lines
      <Seq
        (Map {
          (e.Line) = e.Line '\n';
        })
        LoTokens
        (MapReduce
          {
            s.LineNumber (#TNewLine) = <Inc s.LineNumber>;

            s.LineNumber (s.TokName e.Content) =
              s.LineNumber (s.TokName s.LineNumber e.Content);
          }
          <Inc s.FirstLineNumber>
        )
        {
          s.LineNumber e.Tokens =
            e.Tokens (#TEOF s.LineNumber);
        }
      >
    >;
}

LoTokens {
  ' ' e.Text = <LoTokens e.Text>;
  '\t' e.Text = <LoTokens e.Text>;
  '\r' e.Text = <LoTokens e.Text>;

  '\n' e.Text = (#TNewLine) <LoTokens e.Text>;

  ':' e.Text = <SetName () e.Text>;
  '!' e.Text = <FlushName e.Text>;
  '\'' e.Text = <Literal () e.Text>;

  '=' e.Text = (#TEquals) <LoTokens e.Text>;
  '.' e.Text = (#TDot) <LoTokens e.Text>;
  '|' e.Text = (#TAlternative) <LoTokens e.Text>;

  s.Next e.Text = <Name s.Next e.Text>;

  = ;
}

NextInSet {
  s.SuccessHandler s.FailHandler
  (e.Set-B s.Next e.Set-E) (e.Scanned) s.Next e.Text =
    <s.SuccessHandler (e.Scanned s.Next) e.Text>;

  s.SuccessHandler s.FailHandler (e.Set) (e.Scanned) e.Text =
    <s.FailHandler (e.Scanned) e.Text>;
}

HiLetters { = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; }
LoLetters { = 'abcdefghijklmnopqrstuvwxyz'; }
Digits { = '0123456789'; }
NameTailSet { = <HiLetters> <LoLetters> <Digits> '-_'; }

SetName {
  (e.Scanned) ':' e.Text =
    (#TSetName e.Scanned) <LoTokens e.Text>;

  (e.Scanned) e.Text =
    <NextInSet
      SetName SetNameFail
      (<NameTailSet>)
      (e.Scanned) e.Text
    >;
}

SetNameFail {
  (e.Scanned) = (#TError 'expected end of set name, got EOF');

  (e.Scanned) s.Next e.Text =
    (#TError 'expected end of set name, got ' s.Next);
}

FlushName {
  '-' e.Text = (#TFlush) <LoTokens e.Text>;

  '"' e.Text =
    <NextInSet
      ErrorFlush ErrorFlushFail
      (<NameTailSet> ' \t,.:;(){}[]*&')
      () e.Text
    >;

  '#' e.Text =
    <NextInSet
      FlushNameTail FlushNameFail
      (<HiLetters>) ('#') e.Text
    >;

  e.Text =
    <NextInSet
      FlushNameTail FlushNameFail
      (<HiLetters>) () e.Text
    >;
}

ErrorFlush {
  (e.Scanned) e.Tail =
    <NextInSet
      ErrorFlush ErrorFlushFail
      (<NameTailSet> ' \t,.:;(){}[]*&!@#$%^-_=+/')
      (e.Scanned) e.Tail
    >;
}

ErrorFlushFail {
  (e.Scanned) '"' e.Text =
    (#TErrorFlush e.Scanned) <LoTokens e.Text>;

  (e.Scanned) s.Other e.Text =
    (#TError 'Expected error text or "') <LoTokens e.Text>;
}

FlushNameFail {
  () e.Text = (#TError 'expected flush name');
}

EndFlushName {
  (e.Scanned) e.Text = (#TNamedFlush e.Scanned) <LoTokens e.Text>;
}

FlushNameTail {
  (e.Scanned) e.Tail =
    <NextInSet
      FlushNameTail EndFlushName
      ( <NameTailSet> ) (e.Scanned) e.Tail
    >;
}

Literal {
  (e.Scanned) '\\' e.Text = <Escape (e.Scanned) e.Text>;

  (e.Scanned) '\'\'' e.Text = <Literal (e.Scanned '\'') e.Text>;

  (e.Scanned) '\'' e.Text = (#TLiteral e.Scanned) <LoTokens e.Text>;

  (e.Scanned) '\n' e.Text =
    (#TError 'Unexpected end of line at literal') <LoTokens e.Text>;

  (e.Scanned) =
    (#TError 'Unexpected end of file at literal');

  (e.Scanned) s.Other e.Text =
    <Literal (e.Scanned s.Other) e.Text>;
}

Escape {
  (e.Scanned) 'n' e.Text = <Literal (e.Scanned '\n') e.Text>;

  (e.Scanned) 'r' e.Text = <Literal (e.Scanned '\r') e.Text>;

  (e.Scanned) 't' e.Text = <Literal (e.Scanned '\t') e.Text>;

  (e.Scanned) '\\' e.Text = <Literal (e.Scanned '\\') e.Text>;

  (e.Scanned) 'd' e.Text = <Literal-DecCode (e.Scanned) e.Text>;

  (e.Scanned) '\'' e.Text = <Literal (e.Scanned '\'') e.Text>;

  (e.Scanned) s.Other e.Text =
    (#TError 'Unexpected escaped character') <LoTokens e.Text>;
}

Literal-DecCode {
  (e.Scanned) e.Tail =
    <Fetch
      <IntFromStr e.Tail>
      {
        #Success s.Number e.Tail^ =
          <Literal (e.Scanned <Chr s.Number>) e.Tail>;

        #Fails e.Tail^ =
          (#TError 'Expected digits') <LoTokens e.Tail>;
      }
    >;

  (e.Scanned) =
    (#TError 'Unexpected end of file');
}

NameFail {
  () s.Next e.Tail =
    (#TError 'Unexpected character ' s.Next) <LoTokens e.Tail>;
}

NameTailFail {
  (e.Scanned) e.Tail =
    (#TName e.Scanned) <LoTokens e.Tail>;
}

NameTail {
  (e.Scanned) e.Tail =
    <NextInSet
      NameTail NameTailFail
      ( <NameTailSet> )
      (e.Scanned) e.Tail
    >;
}

Name {
  e.Tail =
    <NextInSet
      NameTail NameFail ( <HiLetters> ) () e.Tail
    >;
}
