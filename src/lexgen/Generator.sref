//FROM LibraryEx
$EXTERN Map;

//FROM Escape
$EXTERN EscapeChar;


/*
  <GenerateFromDFA e.Rules>
    == (e.Lines)*

  e.Rules ::= ((e.RuleName) t.Alternative*)
  t.Alternative ::= (t.Head t.Flush t.NextState)
  t.Head ::= #Empty | s.Char
  t.Flush ::= #None | #Unnamed | (#Flush e.FlushName) | (#FlushError e.Message)
  t.NextState ::= (t.SrcPos e.NextStateName) | #Finitive
*/
$ENTRY GenerateFromDFA {
  e.Rules =
    <Map WriteFunction e.Rules>;
}

WriteFunction {
  ((e.NextRule) e.Alternatives) =
    ()
    (e.NextRule ' {')
    <Map WriteAlternative e.Alternatives>
    ('  (e.Accum) s.Unexpected e.Text =')
    ('    (#TokenUnexpected s.Unexpected) <Root () e.Text>;')
    ('  (e.Accum) = (#TokenAccum e.Accum) (#TokenUnexpectedEOF);')
    ('}');
}

WriteAlternative {
  (#Empty #None #Finitive) =
    ('  (e.Accum) = (#TokenAccum e.Accum);');

  (#Empty #None (t.SrcPos e.NextStateName)) =
    ('  (e.Accum) e.Text = <' e.NextStateName ' (e.Accum) e.Text>;');

  (#Empty #Unnamed #Finitive) =
    ('  (e.Accum) = ;');

  (#Empty #Unnamed (t.SrcPos e.NextStateName)) =
    ('  (e.Accum) e.Text = <' e.NextStateName ' () e.Text>;');

  (#Empty (#Flush e.FlushName) #Finitive) =
    ('  (e.Accum) = (' e.FlushName ' e.Accum);');

  (#Empty (#Flush e.FlushName) (t.SrcPos e.NextStateName)) =
    (
      '  (e.Accum) e.Text = '
      '(' e.FlushName ' e.Accum) <' e.NextStateName ' () e.Text>;'
    );

  (#Empty (#FlushError e.Message) #Finitive) =
    ('  (e.Accum) = (#TokenError ' '' e.Message '' ');');

  (#Empty (#FlushError e.Message) (t.SrcPos e.NextStateName)) =
    (
      '  (e.Accum) e.Text = '
      '(#TokenError ' '' e.Message '' ') <' e.NextStateName ' () e.Text>;'
    );

  (s.Char #None #Finitive) =
    ('  (e.Accum) ' <EC s.Char> ' = (#TokenAccum e.Accum ' <EC s.Char> ');');

  (s.Char #None (t.SrcPos e.NextStateName)) =
    (
      '  (e.Accum) ' <EC s.Char> ' e.Text = '
      '<' e.NextStateName ' (e.Accum ' <EC s.Char> ') e.Text>;'
    );

  (s.Char #Unnamed #Finitive) =
    ('  (e.Accum) ' <EC s.Char> ' = ;');

  (s.Char #Unnamed (t.SrcPos e.NextStateName)) =
    ('  (e.Accum) ' <EC s.Char> ' e.Text = <' e.NextStateName ' () e.Text>;');

  (s.Char (#Flush e.FlushName) #Finitive) =
    (
      '  (e.Accum) ' <EC s.Char> ' = '
      '(' e.FlushName ' e.Accum ' <EC s.Char> ');'
    );

  (s.Char (#Flush e.FlushName) (t.SrcPos e.NextStateName)) =
    (
      '  (e.Accum) ' <EC s.Char> ' e.Text = '
      '(' e.FlushName ' e.Accum ' <EC s.Char> ') '
      '<' e.NextStateName ' () e.Text>;'
    );

  (s.Char (#FlushError e.Message) #Finitive) =
    ('  (e.Accum) ' <EC s.Char> ' = (#TokenError ' '' e.Message '' ');');

  (s.Char (#FlushError e.Message) (t.SrcPos e.NextStateName)) =
    (
      '  (e.Accum) ' <EC s.Char> ' e.Text = '
      '(#TokenError ' '' e.Message '' ') <' e.NextStateName ' () e.Text>;'
    );
}

//EscapeChar
EC {
  #Any = 's.Any';
  s.Other = '' <EscapeChar s.Other> '';
}
