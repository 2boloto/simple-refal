/*
  Генератор лексических анализаторов.
*/

//FROM LibraryEx
$EXTERN ArgList, Fetch, Seq, LoadFile, SaveFile, Inc, MapReduce;

//FROM ParseCmdLine
$EXTERN ParseCommandLine;

//FROM Generator
$EXTERN GenerateFromDFA;

//FROM Parser
$EXTERN Parse;

//FROM Lexer
$EXTERN Tokens;

//FROM Error
$EXTERN Error;


$ENTRY Go {
  =
    <Fetch
      <ArgList>
      <Seq
        {
          (e.ProgName) e.Options =
            <ParseCommandLine e.Options>;
        }
        {
          #InPlace e.FileName =
            <SaveFile
              (e.FileName)
              <Transform <LoadFile e.FileName>>
            >;

          #From (e.From) #To (e.To) =
            <SaveFile
              (e.To)
              ('// Automatically generated file, don''t edit!')
              ('// Edit file ''' e.From '')
              ()
              ()
              <Transform <LoadFile e.From>>
            >;

          #BadCommandLine =
            /* ничего не делаем, CheckOption уже вывел сообщение об ошибке */;
        }
      >
    >;
}

Transform {
  e.LinesBefore ('/*GEN:TOKENS') e.Description =
    <Fetch
      ( <Length-T e.LinesBefore ('/*GEN:TOKENS')> )
      e.Description
      {
        ( s.Length e.LinesBefore^ )
        e.Description^ ('GEN:END*/') e.Deleted =
          e.LinesBefore e.Description ('GEN:END*/')
          <GenerateFromDFA
            <Parse <Tokens s.Length e.Description>>
          >;

       e.Other = <Error 'End of description not found'>;
      }
    >;

  e.Other = <Error 'Lexer description not found'>;
}

NextNum {
  s.Next (e.Line) = <Inc s.Next> (e.Line);
}

Length-T {
  e.Line = <MapReduce NextNum 0 e.Line>;
}
