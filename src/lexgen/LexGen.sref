/*
  Генератор лексических анализаторов.
*/

//FROM LibraryEx
$EXTERN ArgList, Fetch, Seq, LoadFile, SaveFile, Inc, MapReduce;

//FROM ParseCmdLine
$EXTERN ParseCommandLine;

//FROM Generator
$EXTERN GenerateFromDFA;

//FROM Parser
$EXTERN Parse;

//FROM Lexer
$EXTERN Tokens;

//FROM Error
$EXTERN Error;


$ENTRY Go {
  =
    <Fetch
      <ArgList>
      <Seq
        {
          (e.ProgName) e.Options =
            <ParseCommandLine e.Options>;
        }
        {
          #InPlace e.FileName =
            <SaveFile
              (e.FileName)
              <Transform <LoadFile e.FileName>>
            >;

          #From (e.From) #To (e.To) =
            <SaveFile
              (e.To)
              ('// Automatically generated file, don''t edit!')
              ('// Edit file ''' e.From '')
              ()
              ()
              <Transform <LoadFile e.From>>
            >;

          #BadCommandLine =
            /* ничего не делаем, CheckOption уже вывел сообщение об ошибке */;
        }
      >
    >;
}

Transform {
  e.Lines =
    <Fetch
      e.Lines
      <Seq
        {
          e.LinesBefore ('/*GEN:' e.GenMode) e.DescriptionAndTail =
            (<Length-T e.LinesBefore ('/*GEN:' e.GenMode)>)
            (e.GenMode)
            e.DescriptionAndTail;

          e.Other = <Error 'Lexer description not found'>;
        }
        {
          (s.Length e.LinesBefore) (e.GenMode)
          e.Description ('GEN:END*/') e.Deleted =
            (s.Length e.LinesBefore) (e.GenMode) e.Description;

          (s.Length e.LinesBefore) (e.GenMode)
           e.Other =
             <Error 'End of description not found'>;
        }
        {
          (s.Length e.LinesBefore) ('TOKENS') e.Description =
            <Fetch
              s.Length e.Description
              <Seq
                Tokens
                Parse
                GenerateFromDFA
                {
                  e.Generated =
                    e.LinesBefore
                    e.Description
                    ('GEN:END*/')
                    e.Generated;
                }
              >
            >;

          (s.Length e.LinesBefore) (e.OtherGenMode) e.Description =
            <Error 'Unknown generation mode ' e.OtherGenMode>;
        }
      >
    >;
}

Length-T {
  e.Lines =
    <MapReduce
      {
        s.Next (e.Line) = <Inc s.Next> (e.Line);
      }
      0 e.Lines
    >;
}
