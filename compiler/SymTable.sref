$ENUM SymTable;

$ENTRY ST-Create {
  = [SymTable () ()];
}

$ENTRY ST-Destroy {
  [SymTable e.Names (e.References) (e.Idents)] = ;
}

/*
  Внутренний формат
  t.SymTable ::= [SymTable t.Name* (t.Reference*) (e.Idents)]
  t.Name ::=
      (Declared s.ScopeClass e.Name)
    | (Defined s.ScopeClass e.Name)
  t.Reference ::= (s.LnNum e.Name)
  e.Idents ::= (e.Name)*
*/

$ENUM Declared, Defined;

//FROM Generator
$EXTERN GN-Entry, GN-Local;

//FROM Error
$EXTERN EL-AddErrorAt;

//FROM LibraryEx
$EXTERN Map, Reduce;

PatchReferences {
  (e.References) e.Name =
    (
      <Map
        {
          (s.LnNum e.Name) = /* пусто */;

          (s.LnNum e.Name^) = (s.LnNum e.Name);
        }
        e.References
      >
    );
}

/**
  <ST-AddDefined
    t.ErrorList t.SymTable s.ScopeClass s.LnNum e.Name
  >
    == t.ErrorList t.SymTable
*/

$ENTRY ST-AddDefined {
  t.ErrorList
  [SymTable
    e.Names-B (Defined s.AnyScopeClass e.Name) e.Names-E (e.References)
    (e.Idents)
  ]
  s.ScopeClass s.LnNum e.Name =
    <EL-AddErrorAt t.ErrorList s.LnNum 'Function ' e.Name ' already defined'>
    [SymTable
      e.Names-B (Defined s.AnyScopeClass e.Name) e.Names-E (e.References)
      (e.Idents)
    ];

  t.ErrorList
  [SymTable
    e.Names-B (Declared s.AnyScopeClass e.Name) e.Names-E (e.References)
    (e.Idents)
  ]
  s.ScopeClass s.LnNum e.Name =
    t.ErrorList
    [SymTable
      e.Names-B (Defined s.ScopeClass e.Name) e.Names-E
      <PatchReferences (e.References) e.Name>
      (e.Idents)
    ];

  t.ErrorList
  [SymTable e.Names (e.References) (e.Idents)] s.ScopeClass s.LnNum e.Name =
    t.ErrorList
    [SymTable
      e.Names (Defined s.ScopeClass e.Name)
      <PatchReferences (e.References) e.Name>
      (e.Idents)
    ];
}

$ENTRY ST-AddExtern {
  t.ErrorList t.SymTable e.Name =
    <ST-AddDeclared t.ErrorList t.SymTable GN-Entry 0 e.Name>;
}

ST-AddDeclared {
  /*
    Можно повторно объявить имя не зависимо от того, было ли оно до этого
    объявлено или определено.
  */
  t.ErrorList
  [SymTable
    e.Names-B (Declared s.ScopeClass e.Name) e.Names-E (e.References)
    (e.Idents)
  ]
  s.AnyScopeClass s.LnNum e.Name =
    t.ErrorList
    [SymTable
      e.Names-B (Declared s.ScopeClass e.Name) e.Names-E (e.References)
      (e.Idents)
    ];

  t.ErrorList
  [SymTable
    e.Names-B (Defined s.ScopeClass e.Name) e.Names-E (e.References) (e.Idents)
  ]
  s.AnyScopeClass s.LnNum e.Name =
    t.ErrorList
    [SymTable
      e.Names-B (Defined s.ScopeClass e.Name) e.Names-E (e.References)
      (e.Idents)
    ];

  t.ErrorList
  [SymTable e.Names (e.References) (e.Idents)] s.AnyScopeClass s.LnNum e.Name =
    t.ErrorList
    [SymTable
      e.Names (Declared GN-Entry e.Name)
      <PatchReferences (e.References) e.Name>
      (e.Idents)
    ];
}

$ENTRY ST-AddFunctionCall {
  [SymTable
    e.Names-B (Declared GN-Entry e.Name) e.Names-E (e.References) (e.Idents)
  ]
  s.LnNum e.Name =
    [SymTable
      e.Names-B (Declared GN-Entry e.Name) e.Names-E (e.References)
      (e.Idents)
    ];

  [SymTable
    e.Names-B (Declared GN-Local e.Name) e.Names-E (e.References) (e.Idents)
  ]
  s.LnNum e.Name =
    [SymTable
      e.Names-B (Declared GN-Local e.Name) e.Names-E
      (e.References (s.LnNum e.Name))
      (e.Idents)
    ];

  [SymTable
    e.Names-B (Defined s.ScopeClass e.Name) e.Names-E (e.References) (e.Idents)
  ]
  s.LnNum e.Name =
    [SymTable
      e.Names-B (Defined s.ScopeClass e.Name) e.Names-E (e.References)
      (e.Idents)
    ];

  [SymTable e.Names (e.References) (e.Idents)]
  s.LnNum e.Name =
    [SymTable e.Names (e.References (s.LnNum e.Name)) (e.Idents)];
}

$ENTRY ST-AddIdent {
  [SymTable e.Names (e.References) (e.Idents-B (e.Name) e.Idents-E)]
  e.Name =
    [SymTable e.Names (e.References) (e.Idents-B (e.Name) e.Idents-E)];


  [SymTable e.Names (e.References) (e.Idents)] e.Name =
    [SymTable e.Names (e.References) (e.Idents (e.Name))];
}

$ENTRY ST-CheckUnresolved {
  t.ErrorList [SymTable e.Names (e.References) (e.Idents)] =
    <Reduce
      {
        t.ErrorList^ (s.LnNum e.Name) =
          <EL-AddErrorAt
            t.ErrorList s.LnNum 'Function ' e.Name ' is not defined'
          >;
      }
      t.ErrorList e.References
    >
    [SymTable e.Names (e.References) (e.Idents)];
}

/**
  <ST-AllFunctions t.SymTable>
    == (s.ScopeClass e.Name)*
*/
$ENTRY ST-AllFunctions {
  [SymTable e.Names (e.References) (e.Idents)] =
    <Map
      {
        (Declared GN-Entry e.Name) = (GN-Entry e.Name);
        (Declared GN-Local e.Name) = /* пусто */;
        (Defined s.ScopeClass e.Name) = (s.ScopeClass e.Name);
      }
      e.Names
    >;
}

/**
  <ST-AllIdents t.SymTable> == (e.Name)*
*/
$ENTRY ST-AllIdents {
  [SymTable e.Names (e.References) (e.Idents)] = e.Idents;
}

$ENTRY ST-GetAnyName {
  [SymTable
    e.Names-B (Defined s.ScopeClass e.Name) e.Names-E (e.References)
    (e.Idents)
  ] =
    e.Name;
}
