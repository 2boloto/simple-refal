#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
%вчегда ставить отступ, даже в начале
\usepackage{indentfirst}
%\renewcommand{\baselinestretch}{1.25}
%\usepackage[12pt]{extsizes}
\usepackage{float}
%переименовать объект алгоритм
\floatname{algorithm}{Листинг}
%\newcommand{\algorithmname}{Listing}
%позволить добавление списка литературы в содержание
%\usepackage{tocbibind}
\usepackage[nottoc]{tocbibind} %получаем ToC без включения его самого же
\end_preamble
\use_default_options true
\begin_modules
figs-within-sections
tabs-within-sections
eqs-within-sections
\end_modules
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection*
1.
 Пример трансляции функции до доработки компилятора
\begin_inset CommandInset label
LatexCommand label
name "sub:attach-Func-master"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{1.
 Пример трансляции функции до доработки компилятора}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,stepnumber=1,basicstyle={\ttfamily},tabsize=2"
inline false
status open

\begin_layout Plain Layout

Func {
\end_layout

\begin_layout Plain Layout

	((e.FilePath)) (e.Text) e.A =
\end_layout

\begin_layout Plain Layout

		<WriteLine e.FilePath>
\end_layout

\begin_layout Plain Layout

		<WriteLine e.Text>
\end_layout

\begin_layout Plain Layout

		<WriteToHandle <FOpen 'w' e.FilePath> e.Text>
\end_layout

\begin_layout Plain Layout

		 ; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,stepnumber=1,basicstyle={\ttfamily},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

static refalrts::FnResult Func(refalrts::Iter arg_begin, refalrts::Iter
 arg_end) {
\end_layout

\begin_layout Plain Layout

  refalrts::this_is_generated_function();
\end_layout

\begin_layout Plain Layout

  do {
\end_layout

\begin_layout Plain Layout

    refalrts::Iter bb_0 = arg_begin;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter be_0 = arg_end;
\end_layout

\begin_layout Plain Layout

    refalrts::move_left( bb_0, be_0 );
\end_layout

\begin_layout Plain Layout

    refalrts::move_left( bb_0, be_0 );
\end_layout

\begin_layout Plain Layout

    refalrts::move_right( bb_0, be_0 );
\end_layout

\begin_layout Plain Layout

    static refalrts::Iter eFilePath_1_b_1;
\end_layout

\begin_layout Plain Layout

    static refalrts::Iter eFilePath_1_e_1;
\end_layout

\begin_layout Plain Layout

    static refalrts::Iter eText_1_b_1;
\end_layout

\begin_layout Plain Layout

    static refalrts::Iter eText_1_e_1;
\end_layout

\begin_layout Plain Layout

    static refalrts::Iter eFilePath_1_b_2;
\end_layout

\begin_layout Plain Layout

    static refalrts::Iter eFilePath_1_e_2;
\end_layout

\begin_layout Plain Layout

    static refalrts::Iter eText_1_b_2;
\end_layout

\begin_layout Plain Layout

    static refalrts::Iter eText_1_e_2;
\end_layout

\begin_layout Plain Layout

    // ( ( e.FilePath#1 ) ) ( e.Text#1 ) e.A#1
\end_layout

\begin_layout Plain Layout

    refalrts::Iter bb_1 = 0;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter be_1 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::brackets_left( bb_1, be_1, bb_0, be_0 ) )
\end_layout

\begin_layout Plain Layout

      break;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter bb_2 = 0;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter be_2 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::brackets_left( bb_2, be_2, bb_1, be_1 ) )
\end_layout

\begin_layout Plain Layout

      break;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter bb_3 = 0;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter be_3 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::brackets_left( bb_3, be_3, bb_0, be_0 ) )
\end_layout

\begin_layout Plain Layout

      break;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::empty_seq( bb_1, be_1 ) )
\end_layout

\begin_layout Plain Layout

      break;
\end_layout

\begin_layout Plain Layout

    eFilePath_1_b_1 = bb_2;
\end_layout

\begin_layout Plain Layout

    eFilePath_1_e_1 = be_2;
\end_layout

\begin_layout Plain Layout

    eText_1_b_1 = bb_3;
\end_layout

\begin_layout Plain Layout

    eText_1_e_1 = be_3;
\end_layout

\begin_layout Plain Layout

    // Unused closed variable e.A#1
\end_layout

\begin_layout Plain Layout

#ifdef INTERPRET
\end_layout

\begin_layout Plain Layout

    const static refalrts::ResultAction raa[] = {
\end_layout

\begin_layout Plain Layout

      {refalrts::icBracket, 0, 0, refalrts::ibOpenCall},
\end_layout

\begin_layout Plain Layout

      {refalrts::icFunc, (void*) & WriteLine, (void*) "WriteLine"},
\end_layout

\begin_layout Plain Layout

      {refalrts::icSpliceEVar, & eFilePath_1_b_1, & eFilePath_1_e_1},
\end_layout

\begin_layout Plain Layout

      {refalrts::icBracket, 0, 0, refalrts::ibCloseCall},
\end_layout

\begin_layout Plain Layout

      {refalrts::icBracket, 0, 0, refalrts::ibOpenCall},
\end_layout

\begin_layout Plain Layout

      {refalrts::icFunc, (void*) & WriteLine, (void*) "WriteLine"},
\end_layout

\begin_layout Plain Layout

      {refalrts::icSpliceEVar, & eText_1_b_1, & eText_1_e_1},
\end_layout

\begin_layout Plain Layout

      {refalrts::icBracket, 0, 0, refalrts::ibCloseCall},
\end_layout

\begin_layout Plain Layout

      {refalrts::icBracket, 0, 0, refalrts::ibOpenCall},
\end_layout

\begin_layout Plain Layout

      {refalrts::icFunc, (void*) & WriteToHandle, (void*) "WriteToHandle"},
\end_layout

\begin_layout Plain Layout

      {refalrts::icBracket, 0, 0, refalrts::ibOpenCall},
\end_layout

\begin_layout Plain Layout

      {refalrts::icFunc, (void*) & FOpen, (void*) "FOpen"},
\end_layout

\begin_layout Plain Layout

      {refalrts::icChar, 0, 0, 'w'},
\end_layout

\begin_layout Plain Layout

      {refalrts::icCopyEVar, & eFilePath_1_b_1, & eFilePath_1_e_1},
\end_layout

\begin_layout Plain Layout

      {refalrts::icBracket, 0, 0, refalrts::ibCloseCall},
\end_layout

\begin_layout Plain Layout

      {refalrts::icCopyEVar, & eText_1_b_1, & eText_1_e_1},
\end_layout

\begin_layout Plain Layout

      {refalrts::icBracket, 0, 0, refalrts::ibCloseCall},
\end_layout

\begin_layout Plain Layout

      {refalrts::icEnd} 
\end_layout

\begin_layout Plain Layout

   };
\end_layout

\begin_layout Plain Layout

    refalrts::Iter allocs[2*sizeof(raa)/sizeof(raa[0])];
\end_layout

\begin_layout Plain Layout

    refalrts::FnResult res = refalrts::interpret_array( raa, allocs, arg_begin,
 arg_end );
\end_layout

\begin_layout Plain Layout

    return res;
\end_layout

\begin_layout Plain Layout

#else
\end_layout

\begin_layout Plain Layout

    refalrts::reset_allocator();
\end_layout

\begin_layout Plain Layout

    refalrts::Iter res = arg_begin;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::copy_evar( eFilePath_1_b_2, eFilePath_1_e_2, eFilePath_1_b_1
, eFilePath_1_e_1 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::copy_evar( eText_1_b_2, eText_1_e_2, eText_1_b_1, eText_1_e_
1 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n0 = 0;     if( ! refalrts::alloc_open_call( n0 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n1 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_name( n1, & WriteLine, "WriteLine" ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n2 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_close_call( n2 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n3 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_open_call( n3 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n4 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_name( n4, & WriteLine, "WriteLine" ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n5 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_close_call( n5 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n6 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_open_call( n6 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n7 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_name( n7, & WriteToHandle, "WriteToHandle" ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory; 
\end_layout

\begin_layout Plain Layout

   refalrts::Iter n8 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_open_call( n8 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n9 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_name( n9, & FOpen, "FOpen" ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n10 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_char( n10, 'w' ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n11 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_close_call( n11 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::Iter n12 = 0;
\end_layout

\begin_layout Plain Layout

    if( ! refalrts::alloc_close_call( n12 ) )
\end_layout

\begin_layout Plain Layout

      return refalrts::cNoMemory;
\end_layout

\begin_layout Plain Layout

    refalrts::push_stack( n12 );
\end_layout

\begin_layout Plain Layout

    refalrts::push_stack( n6 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n12 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_evar( res, eText_1_b_2, eText_1_e_2 );
\end_layout

\begin_layout Plain Layout

    refalrts::push_stack( n11 );
\end_layout

\begin_layout Plain Layout

    refalrts::push_stack( n8 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n11 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_evar( res, eFilePath_1_b_2, eFilePath_1_e_2 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n10 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n9 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n8 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n7 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n6 );
\end_layout

\begin_layout Plain Layout

    refalrts::push_stack( n5 );
\end_layout

\begin_layout Plain Layout

    refalrts::push_stack( n3 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n5 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_evar( res, eText_1_b_1, eText_1_e_1 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n4 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n3 );
\end_layout

\begin_layout Plain Layout

    refalrts::push_stack( n2 );
\end_layout

\begin_layout Plain Layout

    refalrts::push_stack( n0 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n2 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_evar( res, eFilePath_1_b_1, eFilePath_1_e_1 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n1 );
\end_layout

\begin_layout Plain Layout

    res = refalrts::splice_elem( res, n0 );
\end_layout

\begin_layout Plain Layout

    refalrts::use( res );
\end_layout

\begin_layout Plain Layout

    refalrts::splice_to_freelist( arg_begin, arg_end );
\end_layout

\begin_layout Plain Layout

    return refalrts::cSuccess;
\end_layout

\begin_layout Plain Layout

#endif 
\end_layout

\begin_layout Plain Layout

  } while ( 0 );
\end_layout

\begin_layout Plain Layout

  return refalrts::FnResult( 
\end_layout

\begin_layout Plain Layout

   refalrts::cRecognitionImpossible | (__LINE__ << 8)
\end_layout

\begin_layout Plain Layout

  ); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection*
2.
 Пример трансляции тестовой функции до доработки 
\begin_inset CommandInset label
LatexCommand label
name "sub:attach-Func-master-1"

\end_inset


\end_layout

\begin_layout Standard
Так выглядит листинг 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:context-opt"

\end_inset

 до внесения улучшений в компилятор.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{subsection}{2.
 Пример трансляции тестовой функции до доработки}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,basicstyle={\ttfamily},tabsize=2"
inline false
status open

\begin_layout Plain Layout

refalrts::Iter bb_0 = arg_begin;
\end_layout

\begin_layout Plain Layout

refalrts::Iter be_0 = arg_end;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

static refalrts::Iter ePattern_1_b_1;
\end_layout

\begin_layout Plain Layout

static refalrts::Iter ePattern_1_e_1;
\end_layout

\begin_layout Plain Layout

static refalrts::Iter sNumRanges_2_1;
\end_layout

\begin_layout Plain Layout

static refalrts::Iter eVars_2_b_1;
\end_layout

\begin_layout Plain Layout

static refalrts::Iter eVars_2_e_1;
\end_layout

\begin_layout Plain Layout

static refalrts::Iter eCommands_2_b_1;
\end_layout

\begin_layout Plain Layout

static refalrts::Iter eCommands_2_e_1;
\end_layout

\begin_layout Plain Layout

refalrts::Iter bb_1 = 0;
\end_layout

\begin_layout Plain Layout

refalrts::Iter be_1 = 0;
\end_layout

\begin_layout Plain Layout

if( ! refalrts::brackets_left( bb_1, be_1, bb_0, be_0 ) )
\end_layout

\begin_layout Plain Layout

  break;
\end_layout

\begin_layout Plain Layout

ePattern_1_b_1 = bb_1;
\end_layout

\begin_layout Plain Layout

ePattern_1_e_1 = be_1;
\end_layout

\begin_layout Plain Layout

refalrts::Iter bb_2 = 0;
\end_layout

\begin_layout Plain Layout

refalrts::Iter be_2 = 0;
\end_layout

\begin_layout Plain Layout

eVars_2_b_1 = bb_2;
\end_layout

\begin_layout Plain Layout

eVars_2_e_1 = be_2;
\end_layout

\begin_layout Plain Layout

eCommands_2_b_1 = bb_0;
\end_layout

\begin_layout Plain Layout

eCommands_2_e_1 = be_0;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

const static refalrts::ResultAction raa[] = {
\end_layout

\begin_layout Plain Layout

  {refalrts::icBracket, 0, 0, refalrts::ibOpenBracket},
\end_layout

\begin_layout Plain Layout

  {refalrts::icSpliceEVar, & eVars_2_b_1, & eVars_2_e_1},
\end_layout

\begin_layout Plain Layout

  {refalrts::icBracket, 0, 0, refalrts::ibCloseBracket},
\end_layout

\begin_layout Plain Layout

  {refalrts::icBracket, 0, 0, refalrts::ibOpenBracket},
\end_layout

\begin_layout Plain Layout

  {refalrts::icBracket, 0, 0, refalrts::ibOpenBracket},
\end_layout

\begin_layout Plain Layout

  {refalrts::icFunc, (void*) & CmdComment, (void*) "CmdComment"},
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

  {refalrts::icBracket, 0, 0, refalrts::ibCloseBracket},
\end_layout

\begin_layout Plain Layout

  {refalrts::icEnd}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\end_body
\end_document
